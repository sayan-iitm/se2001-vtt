WEBVTT
Kind: captions
Language: en

00:00:00.320 --> 00:00:13.910 align:start position:0%
 
[Music]

00:00:13.910 --> 00:00:13.920 align:start position:0%
 
 

00:00:13.920 --> 00:00:17.910 align:start position:0%
 
welcome<00:00:14.320><c> to</c><00:00:14.480><c> the</c><00:00:14.799><c> awk</c><00:00:15.280><c> programming</c><00:00:15.759><c> language</c>

00:00:17.910 --> 00:00:17.920 align:start position:0%
welcome to the awk programming language
 

00:00:17.920 --> 00:00:20.630 align:start position:0%
welcome to the awk programming language
awk<00:00:18.320><c> is</c><00:00:18.480><c> a</c><00:00:18.640><c> special</c><00:00:18.960><c> programming</c><00:00:19.600><c> language</c>

00:00:20.630 --> 00:00:20.640 align:start position:0%
awk is a special programming language
 

00:00:20.640 --> 00:00:23.189 align:start position:0%
awk is a special programming language
which<00:00:20.960><c> looks</c><00:00:21.279><c> at</c><00:00:21.439><c> the</c><00:00:21.680><c> input</c><00:00:22.080><c> stream</c>

00:00:23.189 --> 00:00:23.199 align:start position:0%
which looks at the input stream
 

00:00:23.199 --> 00:00:25.189 align:start position:0%
which looks at the input stream
as<00:00:23.439><c> consisting</c><00:00:24.000><c> of</c><00:00:24.160><c> records</c>

00:00:25.189 --> 00:00:25.199 align:start position:0%
as consisting of records
 

00:00:25.199 --> 00:00:27.910 align:start position:0%
as consisting of records
and<00:00:25.359><c> each</c><00:00:25.599><c> record</c><00:00:26.000><c> consisting</c><00:00:26.480><c> of</c><00:00:26.720><c> fields</c>

00:00:27.910 --> 00:00:27.920 align:start position:0%
and each record consisting of fields
 

00:00:27.920 --> 00:00:29.589 align:start position:0%
and each record consisting of fields
and<00:00:28.080><c> then</c><00:00:28.240><c> you</c><00:00:28.400><c> can</c><00:00:28.560><c> write</c><00:00:28.800><c> program</c><00:00:29.279><c> codes</c>

00:00:29.589 --> 00:00:29.599 align:start position:0%
and then you can write program codes
 

00:00:29.599 --> 00:00:32.150 align:start position:0%
and then you can write program codes
that<00:00:29.760><c> would</c><00:00:30.080><c> operate</c><00:00:30.480><c> on</c><00:00:30.720><c> each</c><00:00:31.039><c> record</c>

00:00:32.150 --> 00:00:32.160 align:start position:0%
that would operate on each record
 

00:00:32.160 --> 00:00:33.670 align:start position:0%
that would operate on each record
at<00:00:32.320><c> a</c><00:00:32.399><c> time</c>

00:00:33.670 --> 00:00:33.680 align:start position:0%
at a time
 

00:00:33.680 --> 00:00:36.310 align:start position:0%
at a time
and<00:00:33.920><c> also</c><00:00:34.320><c> selecting</c><00:00:35.280><c> what</c><00:00:35.440><c> type</c><00:00:35.680><c> of</c><00:00:35.840><c> a</c><00:00:35.920><c> record</c>

00:00:36.310 --> 00:00:36.320 align:start position:0%
and also selecting what type of a record
 

00:00:36.320 --> 00:00:39.670 align:start position:0%
and also selecting what type of a record
should<00:00:36.960><c> be</c><00:00:37.200><c> processed</c><00:00:38.160><c> based</c><00:00:38.480><c> upon</c><00:00:39.120><c> any</c>

00:00:39.670 --> 00:00:39.680 align:start position:0%
should be processed based upon any
 

00:00:39.680 --> 00:00:42.709 align:start position:0%
should be processed based upon any
pattern<00:00:40.239><c> or</c><00:00:40.399><c> condition</c><00:00:41.200><c> that</c><00:00:41.360><c> you</c><00:00:41.520><c> can</c><00:00:41.600><c> supply</c>

00:00:42.709 --> 00:00:42.719 align:start position:0%
pattern or condition that you can supply
 

00:00:42.719 --> 00:00:45.190 align:start position:0%
pattern or condition that you can supply
though<00:00:42.960><c> awk</c><00:00:43.920><c> is</c><00:00:44.160><c> viewed</c><00:00:44.480><c> as</c><00:00:44.640><c> a</c><00:00:44.719><c> scripting</c>

00:00:45.190 --> 00:00:45.200 align:start position:0%
though awk is viewed as a scripting
 

00:00:45.200 --> 00:00:46.470 align:start position:0%
though awk is viewed as a scripting
language

00:00:46.470 --> 00:00:46.480 align:start position:0%
language
 

00:00:46.480 --> 00:00:48.869 align:start position:0%
language
it<00:00:46.719><c> has</c><00:00:46.879><c> enough</c><00:00:47.200><c> mathematical</c>

00:00:48.869 --> 00:00:48.879 align:start position:0%
it has enough mathematical
 

00:00:48.879 --> 00:00:50.709 align:start position:0%
it has enough mathematical
functions<00:00:49.360><c> that</c><00:00:49.520><c> you</c><00:00:49.680><c> could</c><00:00:49.840><c> actually</c><00:00:50.160><c> use</c><00:00:50.399><c> it</c>

00:00:50.709 --> 00:00:50.719 align:start position:0%
functions that you could actually use it
 

00:00:50.719 --> 00:00:52.069 align:start position:0%
functions that you could actually use it
for<00:00:50.960><c> some</c><00:00:51.199><c> of</c><00:00:51.360><c> the</c>

00:00:52.069 --> 00:00:52.079 align:start position:0%
for some of the
 

00:00:52.079 --> 00:00:53.750 align:start position:0%
for some of the
routine<00:00:52.480><c> calculations</c><00:00:53.120><c> that</c><00:00:53.280><c> you</c><00:00:53.440><c> would</c><00:00:53.600><c> like</c>

00:00:53.750 --> 00:00:53.760 align:start position:0%
routine calculations that you would like
 

00:00:53.760 --> 00:00:54.709 align:start position:0%
routine calculations that you would like
to<00:00:53.920><c> do</c>

00:00:54.709 --> 00:00:54.719 align:start position:0%
to do
 

00:00:54.719 --> 00:00:57.510 align:start position:0%
to do
using<00:00:55.039><c> the</c><00:00:55.120><c> command</c><00:00:55.360><c> line</c><00:00:55.600><c> environment</c>

00:00:57.510 --> 00:00:57.520 align:start position:0%
using the command line environment
 

00:00:57.520 --> 00:01:00.709 align:start position:0%
using the command line environment
and<00:00:58.000><c> awk</c><00:00:58.480><c> is</c><00:00:58.800><c> an</c><00:00:58.960><c> abbreviation</c>

00:01:00.709 --> 00:01:00.719 align:start position:0%
and awk is an abbreviation
 

00:01:00.719 --> 00:01:02.630 align:start position:0%
and awk is an abbreviation
of<00:01:01.199><c> the</c><00:01:01.359><c> names</c><00:01:01.680><c> of</c><00:01:01.840><c> three</c><00:01:02.079><c> people</c><00:01:02.399><c> who</c>

00:01:02.630 --> 00:01:02.640 align:start position:0%
of the names of three people who
 

00:01:02.640 --> 00:01:05.189 align:start position:0%
of the names of three people who
developed<00:01:03.039><c> this</c><00:01:03.280><c> language</c><00:01:04.159><c> namely</c><00:01:04.559><c> aho</c>

00:01:05.189 --> 00:01:05.199 align:start position:0%
developed this language namely aho
 

00:01:05.199 --> 00:01:08.630 align:start position:0%
developed this language namely aho
weinberger<00:01:06.080><c> and</c><00:01:06.560><c> kerningham</c>

00:01:08.630 --> 00:01:08.640 align:start position:0%
weinberger and kerningham
 

00:01:08.640 --> 00:01:11.270 align:start position:0%
weinberger and kerningham
and<00:01:08.880><c> awk</c><00:01:09.200><c> has</c><00:01:09.360><c> been</c><00:01:09.520><c> adopted</c><00:01:10.320><c> by</c><00:01:10.560><c> the</c><00:01:10.799><c> posix</c>

00:01:11.270 --> 00:01:11.280 align:start position:0%
and awk has been adopted by the posix
 

00:01:11.280 --> 00:01:14.109 align:start position:0%
and awk has been adopted by the posix
standard<00:01:12.159><c> namely</c><00:01:12.560><c> ieee</c>

00:01:14.109 --> 00:01:14.119 align:start position:0%
standard namely ieee
 

00:01:14.119 --> 00:01:17.270 align:start position:0%
standard namely ieee
1003.1<00:01:15.119><c> hyphen</c><00:01:15.600><c> 2008</c>

00:01:17.270 --> 00:01:17.280 align:start position:0%
1003.1 hyphen 2008
 

00:01:17.280 --> 00:01:19.190 align:start position:0%
1003.1 hyphen 2008
which<00:01:17.439><c> is</c><00:01:17.520><c> the</c><00:01:17.600><c> latest</c><00:01:18.000><c> version</c><00:01:18.320><c> as</c><00:01:18.479><c> of</c><00:01:18.720><c> now</c>

00:01:19.190 --> 00:01:19.200 align:start position:0%
which is the latest version as of now
 

00:01:19.200 --> 00:01:21.990 align:start position:0%
which is the latest version as of now
and<00:01:19.759><c> there</c><00:01:20.000><c> are</c><00:01:20.080><c> many</c><00:01:20.320><c> variants</c><00:01:20.880><c> of</c><00:01:21.119><c> awk</c><00:01:21.759><c> with</c>

00:01:21.990 --> 00:01:22.000 align:start position:0%
and there are many variants of awk with
 

00:01:22.000 --> 00:01:24.469 align:start position:0%
and there are many variants of awk with
some<00:01:22.320><c> enhanced</c><00:01:22.799><c> features</c><00:01:23.280><c> also</c>

00:01:24.469 --> 00:01:24.479 align:start position:0%
some enhanced features also
 

00:01:24.479 --> 00:01:28.149 align:start position:0%
some enhanced features also
n<00:01:24.720><c> awk</c><00:01:25.520><c> g</c><00:01:25.840><c> awk</c><00:01:26.159><c> or</c><00:01:26.320><c> m</c><00:01:26.560><c> awk</c><00:01:26.880><c> and</c><00:01:26.960><c> so</c><00:01:27.200><c> on</c>

00:01:28.149 --> 00:01:28.159 align:start position:0%
n awk g awk or m awk and so on
 

00:01:28.159 --> 00:01:31.990 align:start position:0%
n awk g awk or m awk and so on
on<00:01:28.479><c> linux</c><00:01:29.200><c> what</c><00:01:29.439><c> you</c><00:01:29.759><c> see</c><00:01:30.240><c> would</c><00:01:30.479><c> be</c><00:01:30.720><c> g</c><00:01:31.040><c> awk</c><00:01:31.520><c> or</c>

00:01:31.990 --> 00:01:32.000 align:start position:0%
on linux what you see would be g awk or
 

00:01:32.000 --> 00:01:33.830 align:start position:0%
on linux what you see would be g awk or
gawk<00:01:32.400><c> language</c>

00:01:33.830 --> 00:01:33.840 align:start position:0%
gawk language
 

00:01:33.840 --> 00:01:35.990 align:start position:0%
gawk language
but<00:01:34.159><c> there'd</c><00:01:34.479><c> be</c><00:01:34.880><c> a</c>

00:01:35.990 --> 00:01:36.000 align:start position:0%
but there'd be a
 

00:01:36.000 --> 00:01:38.870 align:start position:0%
but there'd be a
symbolic<00:01:36.560><c> link</c><00:01:37.200><c> from</c><00:01:37.520><c> awk</c><00:01:37.840><c> to</c><00:01:38.240><c> g</c><00:01:38.560><c> awk</c>

00:01:38.870 --> 00:01:38.880 align:start position:0%
symbolic link from awk to g awk
 

00:01:38.880 --> 00:01:41.190 align:start position:0%
symbolic link from awk to g awk
therefore<00:01:39.280><c> you</c><00:01:39.360><c> could</c><00:01:39.600><c> use</c><00:01:39.920><c> the</c><00:01:40.640><c> programming</c>

00:01:41.190 --> 00:01:41.200 align:start position:0%
therefore you could use the programming
 

00:01:41.200 --> 00:01:43.350 align:start position:0%
therefore you could use the programming
language<00:01:41.600><c> with</c><00:01:41.840><c> the</c><00:01:41.920><c> awk</c>

00:01:43.350 --> 00:01:43.360 align:start position:0%
language with the awk
 

00:01:43.360 --> 00:01:45.590 align:start position:0%
language with the awk
as<00:01:43.680><c> the</c><00:01:44.000><c> name</c><00:01:44.640><c> of</c><00:01:44.880><c> the</c>

00:01:45.590 --> 00:01:45.600 align:start position:0%
as the name of the
 

00:01:45.600 --> 00:01:48.710 align:start position:0%
as the name of the
executable

00:01:48.710 --> 00:01:48.720 align:start position:0%
 
 

00:01:48.720 --> 00:01:50.469 align:start position:0%
 
and<00:01:49.119><c> guac</c><00:01:49.680><c> has</c>

00:01:50.469 --> 00:01:50.479 align:start position:0%
and guac has
 

00:01:50.479 --> 00:01:52.550 align:start position:0%
and guac has
some<00:01:50.720><c> features</c><00:01:51.119><c> that</c><00:01:51.200><c> are</c><00:01:51.360><c> extended</c><00:01:51.840><c> beyond</c>

00:01:52.550 --> 00:01:52.560 align:start position:0%
some features that are extended beyond
 

00:01:52.560 --> 00:01:54.710 align:start position:0%
some features that are extended beyond
what<00:01:52.799><c> is</c><00:01:52.880><c> defined</c><00:01:53.200><c> in</c><00:01:53.360><c> posix</c>

00:01:54.710 --> 00:01:54.720 align:start position:0%
what is defined in posix
 

00:01:54.720 --> 00:01:58.310 align:start position:0%
what is defined in posix
we<00:01:54.960><c> do</c><00:01:55.119><c> not</c><00:01:55.360><c> cover</c><00:01:55.759><c> that</c><00:01:56.000><c> in</c><00:01:56.479><c> this</c><00:01:56.640><c> session</c>

00:01:58.310 --> 00:01:58.320 align:start position:0%
we do not cover that in this session
 

00:01:58.320 --> 00:01:59.990 align:start position:0%
we do not cover that in this session
but<00:01:58.560><c> you</c><00:01:58.640><c> could</c><00:01:58.880><c> look</c><00:01:59.040><c> them</c><00:01:59.280><c> up</c><00:01:59.600><c> using</c><00:01:59.840><c> the</c>

00:01:59.990 --> 00:02:00.000 align:start position:0%
but you could look them up using the
 

00:02:00.000 --> 00:02:01.510 align:start position:0%
but you could look them up using the
manual<00:02:00.479><c> page</c><00:02:00.719><c> on</c>

00:02:01.510 --> 00:02:01.520 align:start position:0%
manual page on
 

00:02:01.520 --> 00:02:05.270 align:start position:0%
manual page on
georg

00:02:05.270 --> 00:02:05.280 align:start position:0%
 
 

00:02:05.280 --> 00:02:07.830 align:start position:0%
 
the<00:02:05.520><c> execution</c><00:02:06.079><c> model</c><00:02:06.560><c> of</c><00:02:06.960><c> awk</c><00:02:07.360><c> is</c><00:02:07.439><c> something</c>

00:02:07.830 --> 00:02:07.840 align:start position:0%
the execution model of awk is something
 

00:02:07.840 --> 00:02:09.910 align:start position:0%
the execution model of awk is something
that<00:02:08.479><c> if</c><00:02:08.560><c> you</c><00:02:08.800><c> understand</c>

00:02:09.910 --> 00:02:09.920 align:start position:0%
that if you understand
 

00:02:09.920 --> 00:02:12.390 align:start position:0%
that if you understand
then<00:02:10.160><c> you</c><00:02:10.239><c> can</c><00:02:10.399><c> actually</c><00:02:10.800><c> utilize</c><00:02:11.360><c> that</c>

00:02:12.390 --> 00:02:12.400 align:start position:0%
then you can actually utilize that
 

00:02:12.400 --> 00:02:15.110 align:start position:0%
then you can actually utilize that
for<00:02:12.560><c> certain</c><00:02:13.040><c> tasks</c><00:02:13.440><c> which</c><00:02:14.160><c> can</c><00:02:14.400><c> reduce</c><00:02:14.879><c> a</c><00:02:14.959><c> lot</c>

00:02:15.110 --> 00:02:15.120 align:start position:0%
for certain tasks which can reduce a lot
 

00:02:15.120 --> 00:02:17.589 align:start position:0%
for certain tasks which can reduce a lot
of<00:02:15.360><c> programming</c><00:02:15.920><c> work</c><00:02:16.160><c> for</c><00:02:16.319><c> you</c><00:02:16.480><c> namely</c>

00:02:17.589 --> 00:02:17.599 align:start position:0%
of programming work for you namely
 

00:02:17.599 --> 00:02:19.830 align:start position:0%
of programming work for you namely
you<00:02:17.760><c> don't</c><00:02:18.000><c> have</c><00:02:18.160><c> to</c><00:02:18.400><c> open</c><00:02:18.800><c> files</c>

00:02:19.830 --> 00:02:19.840 align:start position:0%
you don't have to open files
 

00:02:19.840 --> 00:02:21.510 align:start position:0%
you don't have to open files
or<00:02:20.000><c> close</c><00:02:20.319><c> files</c><00:02:20.640><c> you</c><00:02:20.800><c> don't</c><00:02:20.959><c> have</c><00:02:21.120><c> to</c><00:02:21.280><c> worry</c>

00:02:21.510 --> 00:02:21.520 align:start position:0%
or close files you don't have to worry
 

00:02:21.520 --> 00:02:22.790 align:start position:0%
or close files you don't have to worry
about

00:02:22.790 --> 00:02:22.800 align:start position:0%
about
 

00:02:22.800 --> 00:02:25.430 align:start position:0%
about
printing<00:02:23.200><c> out</c><00:02:23.440><c> stuff</c><00:02:24.080><c> and</c><00:02:24.400><c> you</c><00:02:24.560><c> don't</c><00:02:24.720><c> have</c><00:02:24.879><c> to</c>

00:02:25.430 --> 00:02:25.440 align:start position:0%
printing out stuff and you don't have to
 

00:02:25.440 --> 00:02:27.750 align:start position:0%
printing out stuff and you don't have to
keep<00:02:25.680><c> track</c><00:02:26.080><c> of</c><00:02:26.640><c> which</c><00:02:26.959><c> file</c><00:02:27.200><c> you</c><00:02:27.280><c> are</c>

00:02:27.750 --> 00:02:27.760 align:start position:0%
keep track of which file you are
 

00:02:27.760 --> 00:02:29.350 align:start position:0%
keep track of which file you are
processing<00:02:28.239><c> currently</c><00:02:28.720><c> which</c><00:02:28.959><c> record</c><00:02:29.280><c> you</c>

00:02:29.350 --> 00:02:29.360 align:start position:0%
processing currently which record you
 

00:02:29.360 --> 00:02:31.509 align:start position:0%
processing currently which record you
are<00:02:29.440><c> processing</c><00:02:29.920><c> currently</c><00:02:30.640><c> how</c><00:02:30.800><c> many</c><00:02:31.120><c> fields</c>

00:02:31.509 --> 00:02:31.519 align:start position:0%
are processing currently how many fields
 

00:02:31.519 --> 00:02:34.150 align:start position:0%
are processing currently how many fields
are<00:02:31.680><c> there</c><00:02:31.840><c> in</c><00:02:32.000><c> each</c><00:02:32.640><c> record</c><00:02:33.599><c> what</c><00:02:33.840><c> happens</c>

00:02:34.150 --> 00:02:34.160 align:start position:0%
are there in each record what happens
 

00:02:34.160 --> 00:02:36.229 align:start position:0%
are there in each record what happens
when<00:02:34.319><c> you</c><00:02:34.480><c> change</c><00:02:34.800><c> the</c><00:02:34.959><c> field</c><00:02:35.200><c> separator</c><00:02:36.080><c> all</c>

00:02:36.229 --> 00:02:36.239 align:start position:0%
when you change the field separator all
 

00:02:36.239 --> 00:02:38.630 align:start position:0%
when you change the field separator all
these<00:02:36.480><c> tasks</c><00:02:36.879><c> are</c><00:02:37.040><c> taken</c><00:02:37.360><c> care</c><00:02:37.599><c> by</c><00:02:37.840><c> awk</c><00:02:38.480><c> so</c>

00:02:38.630 --> 00:02:38.640 align:start position:0%
these tasks are taken care by awk so
 

00:02:38.640 --> 00:02:41.589 align:start position:0%
these tasks are taken care by awk so
that<00:02:38.800><c> you</c><00:02:38.879><c> can</c><00:02:39.120><c> focus</c><00:02:39.519><c> on</c><00:02:39.840><c> your</c><00:02:40.160><c> task</c><00:02:40.480><c> namely</c>

00:02:41.589 --> 00:02:41.599 align:start position:0%
that you can focus on your task namely
 

00:02:41.599 --> 00:02:43.350 align:start position:0%
that you can focus on your task namely
to<00:02:41.760><c> look</c><00:02:42.000><c> at</c><00:02:42.080><c> the</c><00:02:42.239><c> fields</c><00:02:42.720><c> and</c><00:02:43.040><c> do</c><00:02:43.200><c> the</c>

00:02:43.350 --> 00:02:43.360 align:start position:0%
to look at the fields and do the
 

00:02:43.360 --> 00:02:45.350 align:start position:0%
to look at the fields and do the
processing<00:02:43.840><c> that</c><00:02:43.920><c> you</c><00:02:44.080><c> need</c><00:02:44.239><c> to</c><00:02:44.400><c> do</c>

00:02:45.350 --> 00:02:45.360 align:start position:0%
processing that you need to do
 

00:02:45.360 --> 00:02:47.589 align:start position:0%
processing that you need to do
and<00:02:45.599><c> it's</c><00:02:45.840><c> actually</c><00:02:46.640><c> also</c><00:02:46.879><c> a</c><00:02:47.040><c> very</c><00:02:47.280><c> fast</c>

00:02:47.589 --> 00:02:47.599 align:start position:0%
and it's actually also a very fast
 

00:02:47.599 --> 00:02:48.630 align:start position:0%
and it's actually also a very fast
language

00:02:48.630 --> 00:02:48.640 align:start position:0%
language
 

00:02:48.640 --> 00:02:49.910 align:start position:0%
language
and<00:02:48.800><c> we</c><00:02:48.959><c> will</c><00:02:49.120><c> see</c><00:02:49.280><c> at</c><00:02:49.360><c> the</c><00:02:49.519><c> end</c><00:02:49.680><c> of</c><00:02:49.760><c> this</c>

00:02:49.910 --> 00:02:49.920 align:start position:0%
and we will see at the end of this
 

00:02:49.920 --> 00:02:51.270 align:start position:0%
and we will see at the end of this
session

00:02:51.270 --> 00:02:51.280 align:start position:0%
session
 

00:02:51.280 --> 00:02:53.910 align:start position:0%
session
that<00:02:51.760><c> to</c><00:02:52.000><c> process</c><00:02:52.400><c> millions</c><00:02:52.800><c> of</c><00:02:52.959><c> records</c><00:02:53.599><c> awk</c>

00:02:53.910 --> 00:02:53.920 align:start position:0%
that to process millions of records awk
 

00:02:53.920 --> 00:02:56.790 align:start position:0%
that to process millions of records awk
would<00:02:54.080><c> take</c><00:02:54.319><c> just</c><00:02:54.560><c> couple</c><00:02:54.879><c> of</c><00:02:54.959><c> seconds</c>

00:02:56.790 --> 00:02:56.800 align:start position:0%
would take just couple of seconds
 

00:02:56.800 --> 00:02:58.630 align:start position:0%
would take just couple of seconds
and<00:02:57.040><c> also</c><00:02:57.360><c> awk</c><00:02:57.599><c> can</c><00:02:57.760><c> do</c><00:02:58.000><c> things</c><00:02:58.239><c> that</c>

00:02:58.630 --> 00:02:58.640 align:start position:0%
and also awk can do things that
 

00:02:58.640 --> 00:03:00.869 align:start position:0%
and also awk can do things that
spreadsheets<00:02:59.200><c> cannot</c><00:02:59.519><c> do</c>

00:03:00.869 --> 00:03:00.879 align:start position:0%
spreadsheets cannot do
 

00:03:00.879 --> 00:03:02.710 align:start position:0%
spreadsheets cannot do
and<00:03:01.040><c> therefore</c><00:03:01.440><c> knowing</c><00:03:01.760><c> or</c><00:03:02.159><c> could</c><00:03:02.400><c> actually</c>

00:03:02.710 --> 00:03:02.720 align:start position:0%
and therefore knowing or could actually
 

00:03:02.720 --> 00:03:06.630 align:start position:0%
and therefore knowing or could actually
save<00:03:02.959><c> the</c><00:03:03.120><c> day</c><00:03:03.680><c> for</c><00:03:03.840><c> some</c><00:03:04.080><c> of</c><00:03:04.239><c> you</c>

00:03:06.630 --> 00:03:06.640 align:start position:0%
 
 

00:03:06.640 --> 00:03:09.830 align:start position:0%
 
now<00:03:06.959><c> the</c><00:03:07.200><c> input</c><00:03:07.519><c> stream</c><00:03:08.000><c> is</c><00:03:08.400><c> looked</c><00:03:08.720><c> at</c><00:03:08.959><c> as</c><00:03:09.440><c> a</c>

00:03:09.830 --> 00:03:09.840 align:start position:0%
now the input stream is looked at as a
 

00:03:09.840 --> 00:03:13.030 align:start position:0%
now the input stream is looked at as a
set<00:03:10.080><c> of</c><00:03:10.239><c> records</c><00:03:11.120><c> and</c><00:03:11.360><c> by</c><00:03:11.519><c> default</c><00:03:12.159><c> the</c><00:03:12.800><c> new</c>

00:03:13.030 --> 00:03:13.040 align:start position:0%
set of records and by default the new
 

00:03:13.040 --> 00:03:14.790 align:start position:0%
set of records and by default the new
line<00:03:13.280><c> character</c><00:03:13.840><c> is</c><00:03:14.000><c> used</c><00:03:14.239><c> to</c><00:03:14.319><c> separate</c><00:03:14.720><c> the</c>

00:03:14.790 --> 00:03:14.800 align:start position:0%
line character is used to separate the
 

00:03:14.800 --> 00:03:17.190 align:start position:0%
line character is used to separate the
records<00:03:15.200><c> which</c><00:03:15.440><c> means</c><00:03:15.680><c> that</c><00:03:16.239><c> each</c><00:03:16.640><c> line</c><00:03:17.120><c> in</c>

00:03:17.190 --> 00:03:17.200 align:start position:0%
records which means that each line in
 

00:03:17.200 --> 00:03:19.750 align:start position:0%
records which means that each line in
the<00:03:17.360><c> input</c><00:03:17.599><c> stream</c><00:03:18.080><c> is</c><00:03:18.319><c> a</c><00:03:18.400><c> record</c><00:03:19.200><c> however</c><00:03:19.680><c> you</c>

00:03:19.750 --> 00:03:19.760 align:start position:0%
the input stream is a record however you
 

00:03:19.760 --> 00:03:23.110 align:start position:0%
the input stream is a record however you
can<00:03:20.000><c> override</c><00:03:20.480><c> it</c><00:03:20.959><c> and</c><00:03:21.519><c> provide</c><00:03:21.920><c> any</c><00:03:22.159><c> other</c>

00:03:23.110 --> 00:03:23.120 align:start position:0%
can override it and provide any other
 

00:03:23.120 --> 00:03:25.509 align:start position:0%
can override it and provide any other
set<00:03:23.360><c> of</c><00:03:23.519><c> characters</c><00:03:24.159><c> as</c><00:03:24.720><c> the</c>

00:03:25.509 --> 00:03:25.519 align:start position:0%
set of characters as the
 

00:03:25.519 --> 00:03:28.710 align:start position:0%
set of characters as the
separator<00:03:26.080><c> for</c><00:03:26.319><c> the</c><00:03:26.720><c> record</c><00:03:27.599><c> and</c><00:03:27.840><c> then</c><00:03:28.560><c> the</c>

00:03:28.710 --> 00:03:28.720 align:start position:0%
separator for the record and then the
 

00:03:28.720 --> 00:03:31.670 align:start position:0%
separator for the record and then the
input<00:03:29.040><c> stream</c><00:03:29.280><c> will</c><00:03:29.440><c> be</c><00:03:29.599><c> split</c><00:03:30.319><c> accordingly</c>

00:03:31.670 --> 00:03:31.680 align:start position:0%
input stream will be split accordingly
 

00:03:31.680 --> 00:03:34.229 align:start position:0%
input stream will be split accordingly
for<00:03:31.840><c> example</c><00:03:32.159><c> in</c><00:03:32.319><c> a</c><00:03:32.400><c> html</c><00:03:33.040><c> document</c>

00:03:34.229 --> 00:03:34.239 align:start position:0%
for example in a html document
 

00:03:34.239 --> 00:03:35.750 align:start position:0%
for example in a html document
the<00:03:34.400><c> new</c><00:03:34.560><c> lines</c><00:03:34.799><c> do</c><00:03:34.879><c> not</c><00:03:35.040><c> have</c><00:03:35.200><c> any</c><00:03:35.440><c> special</c>

00:03:35.750 --> 00:03:35.760 align:start position:0%
the new lines do not have any special
 

00:03:35.760 --> 00:03:39.190 align:start position:0%
the new lines do not have any special
meaning<00:03:36.560><c> so</c><00:03:36.799><c> you</c><00:03:36.879><c> may</c><00:03:37.040><c> want</c><00:03:37.200><c> to</c><00:03:37.360><c> split</c><00:03:37.680><c> it</c>

00:03:39.190 --> 00:03:39.200 align:start position:0%
meaning so you may want to split it
 

00:03:39.200 --> 00:03:40.149 align:start position:0%
meaning so you may want to split it
using

00:03:40.149 --> 00:03:40.159 align:start position:0%
using
 

00:03:40.159 --> 00:03:42.470 align:start position:0%
using
html<00:03:40.720><c> codes</c>

00:03:42.470 --> 00:03:42.480 align:start position:0%
html codes
 

00:03:42.480 --> 00:03:44.710 align:start position:0%
html codes
now<00:03:42.640><c> each</c><00:03:42.879><c> record</c><00:03:43.280><c> is</c><00:03:43.440><c> thought</c><00:03:43.680><c> of</c><00:03:43.840><c> as</c>

00:03:44.710 --> 00:03:44.720 align:start position:0%
now each record is thought of as
 

00:03:44.720 --> 00:03:47.350 align:start position:0%
now each record is thought of as
a<00:03:44.879><c> sequence</c><00:03:45.280><c> of</c><00:03:45.440><c> fields</c><00:03:46.239><c> and</c><00:03:46.319><c> therefore</c><00:03:47.200><c> to</c>

00:03:47.350 --> 00:03:47.360 align:start position:0%
a sequence of fields and therefore to
 

00:03:47.360 --> 00:03:49.509 align:start position:0%
a sequence of fields and therefore to
split<00:03:47.680><c> the</c><00:03:47.760><c> record</c><00:03:48.080><c> into</c><00:03:48.400><c> fields</c><00:03:49.040><c> you</c><00:03:49.200><c> can</c><00:03:49.280><c> use</c>

00:03:49.509 --> 00:03:49.519 align:start position:0%
split the record into fields you can use
 

00:03:49.519 --> 00:03:51.750 align:start position:0%
split the record into fields you can use
a<00:03:49.599><c> field</c><00:03:49.840><c> separator</c><00:03:50.480><c> by</c><00:03:50.720><c> default</c>

00:03:51.750 --> 00:03:51.760 align:start position:0%
a field separator by default
 

00:03:51.760 --> 00:03:54.070 align:start position:0%
a field separator by default
the<00:03:52.159><c> space</c><00:03:52.560><c> character</c><00:03:52.959><c> is</c><00:03:53.120><c> used</c><00:03:53.439><c> as</c><00:03:53.599><c> a</c><00:03:53.840><c> field</c>

00:03:54.070 --> 00:03:54.080 align:start position:0%
the space character is used as a field
 

00:03:54.080 --> 00:03:56.710 align:start position:0%
the space character is used as a field
separator<00:03:54.560><c> you</c><00:03:54.640><c> can</c><00:03:54.799><c> have</c><00:03:55.439><c> multiple</c><00:03:56.080><c> spaces</c>

00:03:56.710 --> 00:03:56.720 align:start position:0%
separator you can have multiple spaces
 

00:03:56.720 --> 00:03:58.149 align:start position:0%
separator you can have multiple spaces
that<00:03:57.040><c> will</c><00:03:57.200><c> not</c><00:03:57.439><c> affect</c><00:03:57.680><c> the</c><00:03:57.760><c> number</c><00:03:58.000><c> of</c>

00:03:58.149 --> 00:03:58.159 align:start position:0%
that will not affect the number of
 

00:03:58.159 --> 00:03:59.270 align:start position:0%
that will not affect the number of
fields

00:03:59.270 --> 00:03:59.280 align:start position:0%
fields
 

00:03:59.280 --> 00:04:02.149 align:start position:0%
fields
such<00:03:59.519><c> a</c><00:03:59.680><c> cleanup</c><00:04:00.080><c> is</c><00:04:00.239><c> done</c><00:04:00.400><c> by</c><00:04:00.640><c> awk</c><00:04:00.959><c> directly</c>

00:04:02.149 --> 00:04:02.159 align:start position:0%
such a cleanup is done by awk directly
 

00:04:02.159 --> 00:04:03.910 align:start position:0%
such a cleanup is done by awk directly
and<00:04:02.400><c> you</c><00:04:02.560><c> can</c><00:04:02.720><c> also</c><00:04:02.959><c> override</c><00:04:03.360><c> that</c><00:04:03.680><c> by</c>

00:04:03.910 --> 00:04:03.920 align:start position:0%
and you can also override that by
 

00:04:03.920 --> 00:04:05.350 align:start position:0%
and you can also override that by
defining

00:04:05.350 --> 00:04:05.360 align:start position:0%
defining
 

00:04:05.360 --> 00:04:07.350 align:start position:0%
defining
any<00:04:05.599><c> other</c><00:04:05.840><c> character</c><00:04:06.239><c> as</c><00:04:06.400><c> a</c><00:04:06.480><c> field</c><00:04:06.720><c> separator</c>

00:04:07.350 --> 00:04:07.360 align:start position:0%
any other character as a field separator
 

00:04:07.360 --> 00:04:09.509 align:start position:0%
any other character as a field separator
in<00:04:07.519><c> fact</c><00:04:07.920><c> you</c><00:04:08.000><c> can</c><00:04:08.239><c> even</c><00:04:08.560><c> define</c>

00:04:09.509 --> 00:04:09.519 align:start position:0%
in fact you can even define
 

00:04:09.519 --> 00:04:11.350 align:start position:0%
in fact you can even define
the<00:04:09.680><c> field</c><00:04:09.920><c> separator</c><00:04:10.480><c> using</c><00:04:10.720><c> the</c><00:04:10.959><c> regular</c>

00:04:11.350 --> 00:04:11.360 align:start position:0%
the field separator using the regular
 

00:04:11.360 --> 00:04:13.110 align:start position:0%
the field separator using the regular
expression<00:04:12.000><c> so</c><00:04:12.239><c> that</c>

00:04:13.110 --> 00:04:13.120 align:start position:0%
expression so that
 

00:04:13.120 --> 00:04:14.789 align:start position:0%
expression so that
it<00:04:13.200><c> can</c><00:04:13.360><c> be</c><00:04:13.519><c> picked</c><00:04:13.840><c> up</c><00:04:14.080><c> from</c><00:04:14.319><c> a</c><00:04:14.400><c> set</c><00:04:14.640><c> of</c>

00:04:14.789 --> 00:04:14.799 align:start position:0%
it can be picked up from a set of
 

00:04:14.799 --> 00:04:17.189 align:start position:0%
it can be picked up from a set of
characters<00:04:15.280><c> that</c><00:04:15.360><c> you</c><00:04:15.599><c> are</c><00:04:15.920><c> providing</c><00:04:16.880><c> so</c><00:04:17.120><c> you</c>

00:04:17.189 --> 00:04:17.199 align:start position:0%
characters that you are providing so you
 

00:04:17.199 --> 00:04:19.430 align:start position:0%
characters that you are providing so you
can<00:04:17.359><c> give</c><00:04:17.600><c> multiple</c><00:04:18.079><c> options</c><00:04:18.720><c> which</c><00:04:18.959><c> can</c><00:04:19.199><c> act</c>

00:04:19.430 --> 00:04:19.440 align:start position:0%
can give multiple options which can act
 

00:04:19.440 --> 00:04:21.349 align:start position:0%
can give multiple options which can act
as<00:04:19.600><c> a</c><00:04:19.680><c> field</c><00:04:19.840><c> separator</c><00:04:20.560><c> which</c><00:04:20.799><c> is</c><00:04:20.959><c> fairly</c>

00:04:21.349 --> 00:04:21.359 align:start position:0%
as a field separator which is fairly
 

00:04:21.359 --> 00:04:24.469 align:start position:0%
as a field separator which is fairly
unique<00:04:21.759><c> for</c><00:04:22.000><c> the</c><00:04:22.240><c> awk</c><00:04:22.560><c> language</c>

00:04:24.469 --> 00:04:24.479 align:start position:0%
unique for the awk language
 

00:04:24.479 --> 00:04:25.909 align:start position:0%
unique for the awk language
and<00:04:25.040><c> there</c><00:04:25.280><c> are</c>

00:04:25.909 --> 00:04:25.919 align:start position:0%
and there are
 

00:04:25.919 --> 00:04:28.870 align:start position:0%
and there are
code<00:04:26.240><c> blocks</c><00:04:26.800><c> in</c><00:04:26.960><c> any</c><00:04:27.199><c> awk</c><00:04:27.520><c> script</c>

00:04:28.870 --> 00:04:28.880 align:start position:0%
code blocks in any awk script
 

00:04:28.880 --> 00:04:31.830 align:start position:0%
code blocks in any awk script
and<00:04:29.120><c> each</c><00:04:29.440><c> code</c><00:04:29.680><c> block</c><00:04:29.919><c> will</c><00:04:30.080><c> be</c><00:04:30.240><c> executed</c>

00:04:31.830 --> 00:04:31.840 align:start position:0%
and each code block will be executed
 

00:04:31.840 --> 00:04:34.070 align:start position:0%
and each code block will be executed
once<00:04:32.400><c> for</c><00:04:32.560><c> every</c><00:04:32.880><c> record</c><00:04:33.280><c> which</c><00:04:33.440><c> satisfies</c>

00:04:34.070 --> 00:04:34.080 align:start position:0%
once for every record which satisfies
 

00:04:34.080 --> 00:04:35.590 align:start position:0%
once for every record which satisfies
the<00:04:34.240><c> pattern</c><00:04:34.560><c> that</c><00:04:34.800><c> goes</c><00:04:35.040><c> with</c><00:04:35.199><c> the</c><00:04:35.360><c> code</c>

00:04:35.590 --> 00:04:35.600 align:start position:0%
the pattern that goes with the code
 

00:04:35.600 --> 00:04:36.550 align:start position:0%
the pattern that goes with the code
block

00:04:36.550 --> 00:04:36.560 align:start position:0%
block
 

00:04:36.560 --> 00:04:37.830 align:start position:0%
block
so

00:04:37.830 --> 00:04:37.840 align:start position:0%
so
 

00:04:37.840 --> 00:04:39.430 align:start position:0%
so
if<00:04:38.000><c> you</c><00:04:38.080><c> can</c>

00:04:39.430 --> 00:04:39.440 align:start position:0%
if you can
 

00:04:39.440 --> 00:04:41.350 align:start position:0%
if you can
understand<00:04:39.840><c> this</c><00:04:40.080><c> concept</c><00:04:40.639><c> by</c><00:04:40.880><c> using</c><00:04:41.199><c> the</c>

00:04:41.350 --> 00:04:41.360 align:start position:0%
understand this concept by using the
 

00:04:41.360 --> 00:04:43.430 align:start position:0%
understand this concept by using the
examples<00:04:41.759><c> that</c><00:04:41.919><c> i</c><00:04:42.000><c> am</c><00:04:42.080><c> going</c><00:04:42.240><c> to</c><00:04:42.400><c> show</c><00:04:42.560><c> you</c>

00:04:43.430 --> 00:04:43.440 align:start position:0%
examples that i am going to show you
 

00:04:43.440 --> 00:04:44.950 align:start position:0%
examples that i am going to show you
then<00:04:43.680><c> you</c><00:04:43.840><c> would</c><00:04:44.080><c> view</c>

00:04:44.950 --> 00:04:44.960 align:start position:0%
then you would view
 

00:04:44.960 --> 00:04:48.150 align:start position:0%
then you would view
the<00:04:45.199><c> programming</c><00:04:45.919><c> of</c>

00:04:48.150 --> 00:04:48.160 align:start position:0%
 
 

00:04:48.160 --> 00:04:50.629 align:start position:0%
 
processing<00:04:48.720><c> a</c><00:04:48.880><c> set</c><00:04:49.120><c> of</c><00:04:49.520><c> records</c><00:04:50.080><c> containing</c>

00:04:50.629 --> 00:04:50.639 align:start position:0%
processing a set of records containing
 

00:04:50.639 --> 00:04:51.590 align:start position:0%
processing a set of records containing
fields

00:04:51.590 --> 00:04:51.600 align:start position:0%
fields
 

00:04:51.600 --> 00:04:53.749 align:start position:0%
fields
very<00:04:51.919><c> differently</c><00:04:52.400><c> compared</c><00:04:52.800><c> to</c><00:04:53.280><c> traditional</c>

00:04:53.749 --> 00:04:53.759 align:start position:0%
very differently compared to traditional
 

00:04:53.759 --> 00:04:55.830 align:start position:0%
very differently compared to traditional
way<00:04:53.919><c> of</c><00:04:54.240><c> programming</c><00:04:54.800><c> where</c><00:04:54.960><c> you</c><00:04:55.120><c> open</c><00:04:55.360><c> a</c><00:04:55.520><c> file</c>

00:04:55.830 --> 00:04:55.840 align:start position:0%
way of programming where you open a file
 

00:04:55.840 --> 00:04:58.469 align:start position:0%
way of programming where you open a file
do<00:04:56.000><c> some</c><00:04:56.240><c> action</c><00:04:56.560><c> and</c><00:04:56.800><c> close</c><00:04:57.120><c> it</c>

00:04:58.469 --> 00:04:58.479 align:start position:0%
do some action and close it
 

00:04:58.479 --> 00:05:00.150 align:start position:0%
do some action and close it
and<00:04:58.880><c> by</c><00:04:59.040><c> the</c><00:04:59.199><c> nature</c>

00:05:00.150 --> 00:05:00.160 align:start position:0%
and by the nature
 

00:05:00.160 --> 00:05:03.350 align:start position:0%
and by the nature
the<00:05:00.320><c> number</c><00:05:00.639><c> of</c><00:05:00.720><c> records</c><00:05:01.360><c> is</c><00:05:01.919><c> not</c><00:05:02.160><c> relevant</c><00:05:03.120><c> so</c>

00:05:03.350 --> 00:05:03.360 align:start position:0%
the number of records is not relevant so
 

00:05:03.360 --> 00:05:05.830 align:start position:0%
the number of records is not relevant so
the<00:05:03.520><c> awk</c><00:05:03.840><c> programming</c><00:05:04.320><c> model</c><00:05:05.199><c> would</c><00:05:05.440><c> scale</c>

00:05:05.830 --> 00:05:05.840 align:start position:0%
the awk programming model would scale
 

00:05:05.840 --> 00:05:07.670 align:start position:0%
the awk programming model would scale
quite<00:05:06.240><c> well</c><00:05:06.800><c> and</c><00:05:06.960><c> you</c><00:05:07.039><c> do</c><00:05:07.120><c> not</c><00:05:07.199><c> have</c><00:05:07.360><c> to</c><00:05:07.440><c> worry</c>

00:05:07.670 --> 00:05:07.680 align:start position:0%
quite well and you do not have to worry
 

00:05:07.680 --> 00:05:09.749 align:start position:0%
quite well and you do not have to worry
about<00:05:07.840><c> the</c><00:05:08.000><c> size</c><00:05:08.240><c> of</c><00:05:08.320><c> the</c><00:05:08.479><c> file</c><00:05:09.120><c> because</c><00:05:09.440><c> it</c><00:05:09.600><c> is</c>

00:05:09.749 --> 00:05:09.759 align:start position:0%
about the size of the file because it is
 

00:05:09.759 --> 00:05:12.390 align:start position:0%
about the size of the file because it is
processing<00:05:10.160><c> one</c><00:05:10.320><c> record</c><00:05:10.720><c> at</c><00:05:10.880><c> a</c><00:05:10.960><c> time</c>

00:05:12.390 --> 00:05:12.400 align:start position:0%
processing one record at a time
 

00:05:12.400 --> 00:05:14.710 align:start position:0%
processing one record at a time
you<00:05:12.560><c> can</c><00:05:12.800><c> run</c><00:05:13.120><c> awk</c><00:05:13.440><c> either</c><00:05:14.080><c> directly</c><00:05:14.560><c> on</c><00:05:14.639><c> the</c>

00:05:14.710 --> 00:05:14.720 align:start position:0%
you can run awk either directly on the
 

00:05:14.720 --> 00:05:16.550 align:start position:0%
you can run awk either directly on the
command<00:05:15.120><c> line</c><00:05:15.360><c> using</c><00:05:15.680><c> a</c>

00:05:16.550 --> 00:05:16.560 align:start position:0%
command line using a
 

00:05:16.560 --> 00:05:19.029 align:start position:0%
command line using a
single<00:05:17.360><c> line</c><00:05:17.680><c> for</c><00:05:17.919><c> the</c>

00:05:19.029 --> 00:05:19.039 align:start position:0%
single line for the
 

00:05:19.039 --> 00:05:22.070 align:start position:0%
single line for the
script<00:05:19.759><c> or</c><00:05:20.160><c> you</c><00:05:20.320><c> could</c><00:05:20.479><c> keep</c><00:05:20.720><c> the</c><00:05:21.039><c> source</c><00:05:21.360><c> code</c>

00:05:22.070 --> 00:05:22.080 align:start position:0%
script or you could keep the source code
 

00:05:22.080 --> 00:05:24.230 align:start position:0%
script or you could keep the source code
for<00:05:22.240><c> the</c><00:05:22.400><c> script</c><00:05:22.800><c> in</c><00:05:22.960><c> a</c><00:05:23.039><c> separate</c><00:05:23.520><c> file</c><00:05:23.759><c> and</c>

00:05:24.230 --> 00:05:24.240 align:start position:0%
for the script in a separate file and
 

00:05:24.240 --> 00:05:25.909 align:start position:0%
for the script in a separate file and
call<00:05:24.479><c> that</c><00:05:24.720><c> file</c>

00:05:25.909 --> 00:05:25.919 align:start position:0%
call that file
 

00:05:25.919 --> 00:05:28.550 align:start position:0%
call that file
using<00:05:26.160><c> the</c><00:05:26.240><c> minus</c><00:05:26.639><c> f</c><00:05:26.960><c> option</c><00:05:27.759><c> for</c><00:05:27.919><c> the</c><00:05:28.160><c> awk</c>

00:05:28.550 --> 00:05:28.560 align:start position:0%
using the minus f option for the awk
 

00:05:28.560 --> 00:05:29.670 align:start position:0%
using the minus f option for the awk
executable

00:05:29.670 --> 00:05:29.680 align:start position:0%
executable
 

00:05:29.680 --> 00:05:32.469 align:start position:0%
executable
so<00:05:29.919><c> here</c><00:05:30.160><c> is</c><00:05:30.240><c> one</c><00:05:30.479><c> example</c><00:05:31.280><c> where</c><00:05:31.680><c> the</c><00:05:31.919><c> etc</c>

00:05:32.469 --> 00:05:32.479 align:start position:0%
so here is one example where the etc
 

00:05:32.479 --> 00:05:34.550 align:start position:0%
so here is one example where the etc
password<00:05:32.960><c> file</c><00:05:33.360><c> contains</c>

00:05:34.550 --> 00:05:34.560 align:start position:0%
password file contains
 

00:05:34.560 --> 00:05:37.430 align:start position:0%
password file contains
information<00:05:35.120><c> on</c><00:05:35.280><c> the</c><00:05:35.759><c> user</c><00:05:36.160><c> names</c><00:05:36.960><c> their</c><00:05:37.199><c> full</c>

00:05:37.430 --> 00:05:37.440 align:start position:0%
information on the user names their full
 

00:05:37.440 --> 00:05:39.590 align:start position:0%
information on the user names their full
names<00:05:37.759><c> the</c><00:05:38.160><c> home</c><00:05:38.400><c> directory</c><00:05:38.880><c> and</c>

00:05:39.590 --> 00:05:39.600 align:start position:0%
names the home directory and
 

00:05:39.600 --> 00:05:41.510 align:start position:0%
names the home directory and
such<00:05:39.840><c> other</c><00:05:40.160><c> information</c>

00:05:41.510 --> 00:05:41.520 align:start position:0%
such other information
 

00:05:41.520 --> 00:05:42.790 align:start position:0%
such other information
and<00:05:41.840><c> you</c><00:05:42.000><c> could</c>

00:05:42.790 --> 00:05:42.800 align:start position:0%
and you could
 

00:05:42.800 --> 00:05:43.830 align:start position:0%
and you could
see<00:05:43.039><c> that</c>

00:05:43.830 --> 00:05:43.840 align:start position:0%
see that
 

00:05:43.840 --> 00:05:45.590 align:start position:0%
see that
such<00:05:44.080><c> a</c><00:05:44.160><c> file</c><00:05:44.400><c> would</c><00:05:44.639><c> have</c><00:05:44.880><c> colon</c><00:05:45.360><c> as</c><00:05:45.520><c> the</c>

00:05:45.590 --> 00:05:45.600 align:start position:0%
such a file would have colon as the
 

00:05:45.600 --> 00:05:46.950 align:start position:0%
such a file would have colon as the
field<00:05:45.840><c> separator</c>

00:05:46.950 --> 00:05:46.960 align:start position:0%
field separator
 

00:05:46.960 --> 00:05:49.670 align:start position:0%
field separator
so<00:05:47.280><c> what</c><00:05:47.520><c> is</c><00:05:48.000><c> done</c><00:05:48.240><c> by</c><00:05:48.479><c> the</c>

00:05:49.670 --> 00:05:49.680 align:start position:0%
so what is done by the
 

00:05:49.680 --> 00:05:51.110 align:start position:0%
so what is done by the
one<00:05:49.840><c> line</c><00:05:50.080><c> command</c><00:05:50.400><c> that</c><00:05:50.560><c> is</c><00:05:50.720><c> there</c><00:05:50.960><c> in</c><00:05:51.039><c> the</c>

00:05:51.110 --> 00:05:51.120 align:start position:0%
one line command that is there in the
 

00:05:51.120 --> 00:05:54.310 align:start position:0%
one line command that is there in the
screen<00:05:51.680><c> is</c><00:05:52.000><c> to</c><00:05:52.240><c> print</c><00:05:52.639><c> the</c><00:05:52.880><c> user</c><00:05:53.280><c> names</c><00:05:54.080><c> which</c>

00:05:54.310 --> 00:05:54.320 align:start position:0%
screen is to print the user names which
 

00:05:54.320 --> 00:05:56.070 align:start position:0%
screen is to print the user names which
will<00:05:54.479><c> be</c><00:05:54.560><c> coming</c><00:05:54.800><c> as</c><00:05:54.960><c> a</c><00:05:55.039><c> first</c><00:05:55.360><c> field</c><00:05:55.600><c> of</c><00:05:55.759><c> every</c>

00:05:56.070 --> 00:05:56.080 align:start position:0%
will be coming as a first field of every
 

00:05:56.080 --> 00:05:58.710 align:start position:0%
will be coming as a first field of every
line<00:05:56.479><c> in</c><00:05:56.560><c> the</c><00:05:56.880><c> etc</c><00:05:57.280><c> password</c><00:05:57.759><c> file</c>

00:05:58.710 --> 00:05:58.720 align:start position:0%
line in the etc password file
 

00:05:58.720 --> 00:06:00.070 align:start position:0%
line in the etc password file
and<00:05:59.039><c> you</c><00:05:59.199><c> could</c><00:05:59.360><c> also</c><00:05:59.520><c> achieve</c><00:05:59.759><c> the</c><00:05:59.840><c> same</c>

00:06:00.070 --> 00:06:00.080 align:start position:0%
and you could also achieve the same
 

00:06:00.080 --> 00:06:01.590 align:start position:0%
and you could also achieve the same
thing<00:06:00.319><c> using</c><00:06:00.560><c> the</c><00:06:00.720><c> script</c><00:06:01.039><c> that</c><00:06:01.280><c> is</c><00:06:01.360><c> given</c>

00:06:01.590 --> 00:06:01.600 align:start position:0%
thing using the script that is given
 

00:06:01.600 --> 00:06:04.070 align:start position:0%
thing using the script that is given
below<00:06:02.400><c> where</c><00:06:02.639><c> we</c><00:06:02.800><c> are</c><00:06:02.960><c> explicitly</c><00:06:03.520><c> mentioning</c>

00:06:04.070 --> 00:06:04.080 align:start position:0%
below where we are explicitly mentioning
 

00:06:04.080 --> 00:06:06.469 align:start position:0%
below where we are explicitly mentioning
that<00:06:04.240><c> the</c><00:06:04.400><c> field</c><00:06:04.639><c> separator</c><00:06:05.199><c> is</c><00:06:05.440><c> colon</c><00:06:06.319><c> and</c>

00:06:06.469 --> 00:06:06.479 align:start position:0%
that the field separator is colon and
 

00:06:06.479 --> 00:06:09.270 align:start position:0%
that the field separator is colon and
then<00:06:06.720><c> asking</c><00:06:07.360><c> the</c><00:06:07.840><c> script</c><00:06:08.240><c> to</c><00:06:08.479><c> print</c><00:06:09.039><c> the</c>

00:06:09.270 --> 00:06:09.280 align:start position:0%
then asking the script to print the
 

00:06:09.280 --> 00:06:10.629 align:start position:0%
then asking the script to print the
first<00:06:09.680><c> field</c>

00:06:10.629 --> 00:06:10.639 align:start position:0%
first field
 

00:06:10.639 --> 00:06:12.629 align:start position:0%
first field
in<00:06:10.800><c> the</c><00:06:10.960><c> code</c><00:06:11.199><c> block</c><00:06:11.759><c> which</c><00:06:12.000><c> is</c><00:06:12.080><c> executed</c>

00:06:12.629 --> 00:06:12.639 align:start position:0%
in the code block which is executed
 

00:06:12.639 --> 00:06:14.230 align:start position:0%
in the code block which is executed
without<00:06:12.960><c> any</c><00:06:13.199><c> pattern</c><00:06:13.520><c> which</c><00:06:13.759><c> means</c><00:06:14.000><c> it</c><00:06:14.160><c> is</c>

00:06:14.230 --> 00:06:14.240 align:start position:0%
without any pattern which means it is
 

00:06:14.240 --> 00:06:17.270 align:start position:0%
without any pattern which means it is
executed<00:06:15.280><c> for</c><00:06:15.520><c> every</c><00:06:15.840><c> line</c><00:06:16.080><c> that</c><00:06:16.319><c> is</c><00:06:16.720><c> read</c>

00:06:17.270 --> 00:06:17.280 align:start position:0%
executed for every line that is read
 

00:06:17.280 --> 00:06:19.270 align:start position:0%
executed for every line that is read
from<00:06:17.520><c> the</c><00:06:18.080><c> command</c><00:06:18.479><c> line</c>

00:06:19.270 --> 00:06:19.280 align:start position:0%
from the command line
 

00:06:19.280 --> 00:06:20.870 align:start position:0%
from the command line
now<00:06:19.520><c> let</c><00:06:19.680><c> us</c><00:06:19.919><c> look</c><00:06:20.160><c> at</c>

00:06:20.870 --> 00:06:20.880 align:start position:0%
now let us look at
 

00:06:20.880 --> 00:06:22.390 align:start position:0%
now let us look at
some<00:06:21.280><c> examples</c>

00:06:22.390 --> 00:06:22.400 align:start position:0%
some examples
 

00:06:22.400 --> 00:06:24.309 align:start position:0%
some examples
so<00:06:22.639><c> that</c><00:06:22.800><c> you</c><00:06:22.960><c> understand</c><00:06:23.600><c> the</c>

00:06:24.309 --> 00:06:24.319 align:start position:0%
so that you understand the
 

00:06:24.319 --> 00:06:26.070 align:start position:0%
so that you understand the
processing<00:06:24.960><c> of</c>

00:06:26.070 --> 00:06:26.080 align:start position:0%
processing of
 

00:06:26.080 --> 00:06:28.150 align:start position:0%
processing of
input<00:06:26.479><c> files</c><00:06:26.800><c> using</c><00:06:27.199><c> awk</c>

00:06:28.150 --> 00:06:28.160 align:start position:0%
input files using awk
 

00:06:28.160 --> 00:06:30.070 align:start position:0%
input files using awk
so<00:06:28.319><c> i</c><00:06:28.400><c> have</c><00:06:28.560><c> kept</c><00:06:28.960><c> together</c><00:06:29.440><c> some</c><00:06:29.680><c> scripts</c>

00:06:30.070 --> 00:06:30.080 align:start position:0%
so i have kept together some scripts
 

00:06:30.080 --> 00:06:32.230 align:start position:0%
so i have kept together some scripts
which<00:06:30.240><c> i</c><00:06:30.319><c> would</c><00:06:30.479><c> be</c><00:06:30.639><c> sharing</c><00:06:30.880><c> with</c><00:06:31.120><c> you</c><00:06:31.840><c> on</c><00:06:32.080><c> the</c>

00:06:32.230 --> 00:06:32.240 align:start position:0%
which i would be sharing with you on the
 

00:06:32.240 --> 00:06:34.550 align:start position:0%
which i would be sharing with you on the
google<00:06:32.560><c> drive</c><00:06:32.960><c> for</c><00:06:33.120><c> all</c><00:06:33.280><c> the</c><00:06:33.440><c> students</c>

00:06:34.550 --> 00:06:34.560 align:start position:0%
google drive for all the students
 

00:06:34.560 --> 00:06:36.469 align:start position:0%
google drive for all the students
and<00:06:34.880><c> you</c><00:06:35.039><c> could</c><00:06:35.199><c> modify</c><00:06:35.600><c> these</c><00:06:35.840><c> scripts</c><00:06:36.160><c> for</c>

00:06:36.469 --> 00:06:36.479 align:start position:0%
and you could modify these scripts for
 

00:06:36.479 --> 00:06:37.909 align:start position:0%
and you could modify these scripts for
your<00:06:36.800><c> purpose</c>

00:06:37.909 --> 00:06:37.919 align:start position:0%
your purpose
 

00:06:37.919 --> 00:06:39.749 align:start position:0%
your purpose
and<00:06:38.080><c> these</c><00:06:38.319><c> illustrate</c><00:06:38.800><c> various</c><00:06:39.199><c> features</c><00:06:39.600><c> of</c>

00:06:39.749 --> 00:06:39.759 align:start position:0%
and these illustrate various features of
 

00:06:39.759 --> 00:06:40.710 align:start position:0%
and these illustrate various features of
awk

00:06:40.710 --> 00:06:40.720 align:start position:0%
awk
 

00:06:40.720 --> 00:06:42.790 align:start position:0%
awk
as<00:06:40.960><c> covered</c><00:06:41.280><c> in</c><00:06:41.440><c> this</c><00:06:41.520><c> particular</c><00:06:41.919><c> lecture</c><00:06:42.639><c> so</c>

00:06:42.790 --> 00:06:42.800 align:start position:0%
as covered in this particular lecture so
 

00:06:42.800 --> 00:06:47.110 align:start position:0%
as covered in this particular lecture so
let<00:06:42.960><c> us</c><00:06:43.120><c> look</c><00:06:43.280><c> at</c><00:06:43.360><c> the</c><00:06:43.520><c> first</c><00:06:43.840><c> script</c>

00:06:47.110 --> 00:06:47.120 align:start position:0%
 
 

00:06:47.120 --> 00:06:50.950 align:start position:0%
 
so<00:06:47.360><c> the</c><00:06:47.520><c> first</c><00:06:47.919><c> example</c><00:06:48.400><c> is</c><00:06:48.720><c> block</c><00:06:49.199><c> example</c>

00:06:50.950 --> 00:06:50.960 align:start position:0%
so the first example is block example
 

00:06:50.960 --> 00:06:52.550 align:start position:0%
so the first example is block example
which<00:06:51.280><c> is</c><00:06:51.440><c> very</c><00:06:51.680><c> simple</c>

00:06:52.550 --> 00:06:52.560 align:start position:0%
which is very simple
 

00:06:52.560 --> 00:06:54.469 align:start position:0%
which is very simple
it<00:06:52.800><c> just</c><00:06:52.960><c> simply</c>

00:06:54.469 --> 00:06:54.479 align:start position:0%
it just simply
 

00:06:54.479 --> 00:06:55.909 align:start position:0%
it just simply
does<00:06:54.880><c> one</c>

00:06:55.909 --> 00:06:55.919 align:start position:0%
does one
 

00:06:55.919 --> 00:06:57.589 align:start position:0%
does one
print<00:06:56.479><c> statement</c>

00:06:57.589 --> 00:06:57.599 align:start position:0%
print statement
 

00:06:57.599 --> 00:06:59.830 align:start position:0%
print statement
to<00:06:57.840><c> illustrate</c><00:06:58.479><c> how</c><00:06:58.639><c> many</c><00:06:58.880><c> times</c><00:06:59.280><c> each</c><00:06:59.520><c> code</c>

00:06:59.830 --> 00:06:59.840 align:start position:0%
to illustrate how many times each code
 

00:06:59.840 --> 00:07:01.749 align:start position:0%
to illustrate how many times each code
block<00:07:00.400><c> is</c><00:07:00.560><c> being</c><00:07:00.800><c> processed</c>

00:07:01.749 --> 00:07:01.759 align:start position:0%
block is being processed
 

00:07:01.759 --> 00:07:03.350 align:start position:0%
block is being processed
so<00:07:02.000><c> you</c><00:07:02.160><c> see</c><00:07:02.319><c> there</c><00:07:02.479><c> are</c><00:07:02.639><c> three</c><00:07:02.880><c> code</c><00:07:03.120><c> blocks</c>

00:07:03.350 --> 00:07:03.360 align:start position:0%
so you see there are three code blocks
 

00:07:03.360 --> 00:07:04.550 align:start position:0%
so you see there are three code blocks
here

00:07:04.550 --> 00:07:04.560 align:start position:0%
here
 

00:07:04.560 --> 00:07:06.550 align:start position:0%
here
this<00:07:04.800><c> is</c><00:07:04.880><c> a</c><00:07:05.039><c> pattern</c>

00:07:06.550 --> 00:07:06.560 align:start position:0%
this is a pattern
 

00:07:06.560 --> 00:07:09.430 align:start position:0%
this is a pattern
and<00:07:07.360><c> this</c><00:07:07.840><c> is</c><00:07:08.080><c> the</c><00:07:08.319><c> action</c>

00:07:09.430 --> 00:07:09.440 align:start position:0%
and this is the action
 

00:07:09.440 --> 00:07:11.029 align:start position:0%
and this is the action
and<00:07:09.680><c> this</c><00:07:09.840><c> combination</c><00:07:10.400><c> of</c><00:07:10.479><c> pattern</c><00:07:10.880><c> and</c>

00:07:11.029 --> 00:07:11.039 align:start position:0%
and this combination of pattern and
 

00:07:11.039 --> 00:07:13.589 align:start position:0%
and this combination of pattern and
action<00:07:11.680><c> are</c><00:07:11.840><c> coming</c><00:07:12.160><c> three</c><00:07:12.400><c> times</c>

00:07:13.589 --> 00:07:13.599 align:start position:0%
action are coming three times
 

00:07:13.599 --> 00:07:15.830 align:start position:0%
action are coming three times
two<00:07:13.840><c> times</c><00:07:14.080><c> it</c><00:07:14.240><c> is</c><00:07:14.319><c> coming</c><00:07:14.560><c> with</c><00:07:14.720><c> a</c><00:07:14.880><c> keyword</c>

00:07:15.830 --> 00:07:15.840 align:start position:0%
two times it is coming with a keyword
 

00:07:15.840 --> 00:07:17.670 align:start position:0%
two times it is coming with a keyword
once<00:07:16.080><c> with</c><00:07:16.400><c> begin</c><00:07:16.720><c> keyword</c>

00:07:17.670 --> 00:07:17.680 align:start position:0%
once with begin keyword
 

00:07:17.680 --> 00:07:20.390 align:start position:0%
once with begin keyword
once<00:07:17.919><c> with</c><00:07:18.160><c> the</c><00:07:18.319><c> end</c><00:07:18.560><c> keyword</c><00:07:19.520><c> and</c><00:07:19.599><c> then</c><00:07:20.240><c> there</c>

00:07:20.390 --> 00:07:20.400 align:start position:0%
once with the end keyword and then there
 

00:07:20.400 --> 00:07:22.710 align:start position:0%
once with the end keyword and then there
is<00:07:20.720><c> another</c><00:07:21.120><c> action</c>

00:07:22.710 --> 00:07:22.720 align:start position:0%
is another action
 

00:07:22.720 --> 00:07:25.029 align:start position:0%
is another action
code<00:07:22.960><c> block</c><00:07:23.199><c> without</c><00:07:23.599><c> any</c><00:07:24.160><c> pattern</c><00:07:24.639><c> in</c><00:07:24.800><c> front</c>

00:07:25.029 --> 00:07:25.039 align:start position:0%
code block without any pattern in front
 

00:07:25.039 --> 00:07:26.870 align:start position:0%
code block without any pattern in front
of<00:07:25.120><c> the</c><00:07:25.280><c> code</c><00:07:25.520><c> block</c><00:07:26.080><c> which</c><00:07:26.319><c> means</c><00:07:26.560><c> that</c><00:07:26.639><c> this</c>

00:07:26.870 --> 00:07:26.880 align:start position:0%
of the code block which means that this
 

00:07:26.880 --> 00:07:29.670 align:start position:0%
of the code block which means that this
will<00:07:27.039><c> be</c><00:07:27.680><c> processed</c><00:07:28.160><c> for</c><00:07:28.400><c> every</c><00:07:28.800><c> line</c><00:07:29.360><c> in</c><00:07:29.440><c> the</c>

00:07:29.670 --> 00:07:29.680 align:start position:0%
will be processed for every line in the
 

00:07:29.680 --> 00:07:30.950 align:start position:0%
will be processed for every line in the
input<00:07:29.919><c> stream</c>

00:07:30.950 --> 00:07:30.960 align:start position:0%
input stream
 

00:07:30.960 --> 00:07:33.830 align:start position:0%
input stream
so<00:07:31.120><c> let</c><00:07:31.280><c> us</c><00:07:31.440><c> run</c><00:07:31.680><c> this</c><00:07:32.080><c> and</c><00:07:32.479><c> the</c><00:07:33.120><c> file</c><00:07:33.520><c> over</c>

00:07:33.830 --> 00:07:33.840 align:start position:0%
so let us run this and the file over
 

00:07:33.840 --> 00:07:35.909 align:start position:0%
so let us run this and the file over
which<00:07:34.000><c> we</c><00:07:34.160><c> will</c><00:07:34.319><c> be</c><00:07:34.479><c> running</c><00:07:34.720><c> this</c><00:07:35.039><c> code</c>

00:07:35.909 --> 00:07:35.919 align:start position:0%
which we will be running this code
 

00:07:35.919 --> 00:07:37.749 align:start position:0%
which we will be running this code
is<00:07:36.240><c> also</c><00:07:36.639><c> available</c>

00:07:37.749 --> 00:07:37.759 align:start position:0%
is also available
 

00:07:37.759 --> 00:07:39.749 align:start position:0%
is also available
so<00:07:38.000><c> it</c><00:07:38.160><c> is</c><00:07:38.240><c> the</c><00:07:38.400><c> input</c><00:07:38.720><c> file</c><00:07:38.960><c> all</c><00:07:39.199><c> dot</c><00:07:39.440><c> input</c>

00:07:39.749 --> 00:07:39.759 align:start position:0%
so it is the input file all dot input
 

00:07:39.759 --> 00:07:41.350 align:start position:0%
so it is the input file all dot input
files<00:07:40.080><c> are</c><00:07:40.240><c> meant</c><00:07:40.479><c> for</c>

00:07:41.350 --> 00:07:41.360 align:start position:0%
files are meant for
 

00:07:41.360 --> 00:07:43.589 align:start position:0%
files are meant for
providing<00:07:42.240><c> some</c><00:07:42.479><c> test</c><00:07:42.800><c> input</c><00:07:43.120><c> for</c><00:07:43.280><c> those</c>

00:07:43.589 --> 00:07:43.599 align:start position:0%
providing some test input for those
 

00:07:43.599 --> 00:07:45.029 align:start position:0%
providing some test input for those
respective<00:07:44.080><c> scripts</c>

00:07:45.029 --> 00:07:45.039 align:start position:0%
respective scripts
 

00:07:45.039 --> 00:07:47.749 align:start position:0%
respective scripts
so<00:07:45.440><c> it</c><00:07:45.680><c> is</c><00:07:45.759><c> a</c><00:07:45.840><c> very</c><00:07:46.080><c> simple</c><00:07:46.879><c> input</c><00:07:47.199><c> file</c><00:07:47.440><c> which</c>

00:07:47.749 --> 00:07:47.759 align:start position:0%
so it is a very simple input file which
 

00:07:47.759 --> 00:07:49.749 align:start position:0%
so it is a very simple input file which
i<00:07:47.919><c> have</c><00:07:48.080><c> already</c><00:07:48.560><c> kept</c><00:07:48.879><c> the</c><00:07:49.039><c> line</c><00:07:49.280><c> numbers</c><00:07:49.599><c> for</c>

00:07:49.749 --> 00:07:49.759 align:start position:0%
i have already kept the line numbers for
 

00:07:49.759 --> 00:07:51.189 align:start position:0%
i have already kept the line numbers for
your

00:07:51.189 --> 00:07:51.199 align:start position:0%
your
 

00:07:51.199 --> 00:07:52.469 align:start position:0%
your
reference<00:07:51.680><c> and</c><00:07:51.840><c> you</c><00:07:51.919><c> can</c><00:07:52.000><c> see</c><00:07:52.160><c> that</c><00:07:52.240><c> there</c><00:07:52.400><c> are</c>

00:07:52.469 --> 00:07:52.479 align:start position:0%
reference and you can see that there are
 

00:07:52.479 --> 00:07:54.309 align:start position:0%
reference and you can see that there are
three<00:07:52.720><c> lines</c><00:07:53.039><c> which</c><00:07:53.199><c> means</c><00:07:53.440><c> that</c><00:07:53.599><c> when</c><00:07:53.840><c> i</c><00:07:53.919><c> run</c>

00:07:54.309 --> 00:07:54.319 align:start position:0%
three lines which means that when i run
 

00:07:54.319 --> 00:07:56.950 align:start position:0%
three lines which means that when i run
the<00:07:54.479><c> awk</c><00:07:54.800><c> file</c><00:07:55.599><c> on</c><00:07:55.759><c> this</c><00:07:55.919><c> particular</c><00:07:56.400><c> input</c>

00:07:56.950 --> 00:07:56.960 align:start position:0%
the awk file on this particular input
 

00:07:56.960 --> 00:07:59.029 align:start position:0%
the awk file on this particular input
how<00:07:57.120><c> many</c><00:07:57.440><c> times</c><00:07:57.759><c> each</c><00:07:58.080><c> code</c><00:07:58.319><c> block</c><00:07:58.560><c> will</c><00:07:58.720><c> run</c>

00:07:59.029 --> 00:07:59.039 align:start position:0%
how many times each code block will run
 

00:07:59.039 --> 00:08:02.230 align:start position:0%
how many times each code block will run
will<00:07:59.280><c> actually</c><00:07:59.520><c> illustrate</c><00:08:00.000><c> how</c><00:08:00.240><c> awk</c><00:08:00.479><c> works</c>

00:08:02.230 --> 00:08:02.240 align:start position:0%
will actually illustrate how awk works
 

00:08:02.240 --> 00:08:05.430 align:start position:0%
will actually illustrate how awk works
i<00:08:02.400><c> have</c><00:08:02.560><c> already</c><00:08:02.960><c> indicated</c><00:08:03.840><c> the</c><00:08:04.160><c> executable</c>

00:08:05.430 --> 00:08:05.440 align:start position:0%
i have already indicated the executable
 

00:08:05.440 --> 00:08:06.950 align:start position:0%
i have already indicated the executable
which<00:08:05.680><c> is</c><00:08:05.759><c> the</c><00:08:05.919><c> interpreter</c><00:08:06.400><c> for</c><00:08:06.560><c> the</c><00:08:06.720><c> aux</c>

00:08:06.950 --> 00:08:06.960 align:start position:0%
which is the interpreter for the aux
 

00:08:06.960 --> 00:08:11.270 align:start position:0%
which is the interpreter for the aux
script<00:08:07.599><c> as</c><00:08:08.000><c> g</c><00:08:08.240><c> awk</c><00:08:08.879><c> so</c><00:08:09.360><c> i</c><00:08:09.520><c> can</c><00:08:09.759><c> ask</c><00:08:10.160><c> which</c><00:08:10.400><c> is</c>

00:08:11.270 --> 00:08:11.280 align:start position:0%
script as g awk so i can ask which is
 

00:08:11.280 --> 00:08:14.869 align:start position:0%
script as g awk so i can ask which is
awk<00:08:12.160><c> or</c>

00:08:14.869 --> 00:08:14.879 align:start position:0%
 
 

00:08:14.879 --> 00:08:18.070 align:start position:0%
 
okay<00:08:15.520><c> and</c><00:08:16.160><c> i</c><00:08:16.240><c> can</c><00:08:16.479><c> also</c>

00:08:18.070 --> 00:08:18.080 align:start position:0%
okay and i can also
 

00:08:18.080 --> 00:08:19.990 align:start position:0%
okay and i can also
look<00:08:18.319><c> at</c><00:08:18.479><c> what</c><00:08:18.720><c> is</c><00:08:18.879><c> that</c><00:08:19.199><c> arc</c><00:08:19.520><c> and</c><00:08:19.680><c> you</c><00:08:19.759><c> can</c><00:08:19.919><c> see</c>

00:08:19.990 --> 00:08:20.000 align:start position:0%
look at what is that arc and you can see
 

00:08:20.000 --> 00:08:21.670 align:start position:0%
look at what is that arc and you can see
it's<00:08:20.240><c> a</c><00:08:20.319><c> symbolic</c><00:08:20.879><c> link</c>

00:08:21.670 --> 00:08:21.680 align:start position:0%
it's a symbolic link
 

00:08:21.680 --> 00:08:29.189 align:start position:0%
it's a symbolic link
and

00:08:29.189 --> 00:08:29.199 align:start position:0%
 
 

00:08:29.199 --> 00:08:30.869 align:start position:0%
 
and<00:08:29.360><c> you</c><00:08:29.520><c> see</c><00:08:29.680><c> that</c><00:08:29.840><c> ultimately</c><00:08:30.400><c> it</c><00:08:30.479><c> is</c><00:08:30.639><c> being</c>

00:08:30.869 --> 00:08:30.879 align:start position:0%
and you see that ultimately it is being
 

00:08:30.879 --> 00:08:31.909 align:start position:0%
and you see that ultimately it is being
pointing

00:08:31.909 --> 00:08:31.919 align:start position:0%
pointing
 

00:08:31.919 --> 00:08:34.870 align:start position:0%
pointing
uh<00:08:32.320><c> to</c><00:08:32.640><c> the</c><00:08:32.880><c> g</c><00:08:33.360><c> only</c><00:08:33.760><c> so</c><00:08:33.919><c> i</c><00:08:34.000><c> have</c><00:08:34.159><c> kept</c><00:08:34.479><c> that</c><00:08:34.719><c> as</c>

00:08:34.870 --> 00:08:34.880 align:start position:0%
uh to the g only so i have kept that as
 

00:08:34.880 --> 00:08:36.790 align:start position:0%
uh to the g only so i have kept that as
interpreter<00:08:35.440><c> and</c><00:08:35.519><c> minus</c><00:08:35.919><c> f</c><00:08:36.159><c> option</c><00:08:36.479><c> is</c><00:08:36.640><c> to</c>

00:08:36.790 --> 00:08:36.800 align:start position:0%
interpreter and minus f option is to
 

00:08:36.800 --> 00:08:39.350 align:start position:0%
interpreter and minus f option is to
tell<00:08:37.039><c> that</c><00:08:37.760><c> the</c><00:08:37.919><c> script</c><00:08:38.240><c> is</c><00:08:38.399><c> coming</c><00:08:38.959><c> from</c><00:08:39.200><c> a</c>

00:08:39.350 --> 00:08:39.360 align:start position:0%
tell that the script is coming from a
 

00:08:39.360 --> 00:08:41.829 align:start position:0%
tell that the script is coming from a
file

00:08:41.829 --> 00:08:41.839 align:start position:0%
file
 

00:08:41.839 --> 00:08:45.430 align:start position:0%
file
so<00:08:42.159><c> what</c><00:08:42.320><c> we</c><00:08:42.479><c> do</c><00:08:42.640><c> now</c><00:08:43.039><c> is</c><00:08:43.440><c> to</c><00:08:43.760><c> execute</c><00:08:44.399><c> the</c>

00:08:45.430 --> 00:08:45.440 align:start position:0%
so what we do now is to execute the
 

00:08:45.440 --> 00:08:47.269 align:start position:0%
so what we do now is to execute the
awk

00:08:47.269 --> 00:08:47.279 align:start position:0%
awk
 

00:08:47.279 --> 00:08:48.870 align:start position:0%
awk
file<00:08:48.000><c> and</c>

00:08:48.870 --> 00:08:48.880 align:start position:0%
file and
 

00:08:48.880 --> 00:08:51.509 align:start position:0%
file and
we<00:08:49.040><c> have</c><00:08:49.200><c> to</c><00:08:49.360><c> follow</c><00:08:49.680><c> the</c><00:08:49.920><c> script</c><00:08:50.320><c> with</c><00:08:50.640><c> the</c>

00:08:51.509 --> 00:08:51.519 align:start position:0%
we have to follow the script with the
 

00:08:51.519 --> 00:08:53.350 align:start position:0%
we have to follow the script with the
file<00:08:51.760><c> in</c><00:08:51.920><c> which</c><00:08:52.240><c> the</c>

00:08:53.350 --> 00:08:53.360 align:start position:0%
file in which the
 

00:08:53.360 --> 00:08:54.630 align:start position:0%
file in which the
example

00:08:54.630 --> 00:08:54.640 align:start position:0%
example
 

00:08:54.640 --> 00:08:57.829 align:start position:0%
example
input<00:08:54.959><c> is</c><00:08:55.120><c> coming</c>

00:08:57.829 --> 00:08:57.839 align:start position:0%
 
 

00:08:57.839 --> 00:09:00.389 align:start position:0%
 
and<00:08:58.000><c> you</c><00:08:58.160><c> see</c><00:08:58.399><c> that</c><00:08:58.800><c> the</c><00:08:59.200><c> begin</c><00:08:59.680><c> block</c><00:09:00.240><c> has</c>

00:09:00.389 --> 00:09:00.399 align:start position:0%
and you see that the begin block has
 

00:09:00.399 --> 00:09:02.310 align:start position:0%
and you see that the begin block has
been<00:09:00.560><c> executed</c><00:09:01.200><c> once</c>

00:09:02.310 --> 00:09:02.320 align:start position:0%
been executed once
 

00:09:02.320 --> 00:09:03.670 align:start position:0%
been executed once
and<00:09:02.480><c> it</c><00:09:02.640><c> is</c><00:09:02.720><c> coming</c><00:09:02.959><c> in</c><00:09:03.040><c> the</c><00:09:03.200><c> beginning</c><00:09:03.519><c> which</c>

00:09:03.670 --> 00:09:03.680 align:start position:0%
and it is coming in the beginning which
 

00:09:03.680 --> 00:09:05.829 align:start position:0%
and it is coming in the beginning which
means<00:09:03.920><c> that</c>

00:09:05.829 --> 00:09:05.839 align:start position:0%
means that
 

00:09:05.839 --> 00:09:08.389 align:start position:0%
means that
the<00:09:06.000><c> begin</c><00:09:06.320><c> block</c><00:09:06.560><c> is</c><00:09:06.640><c> executed</c><00:09:07.200><c> before</c><00:09:07.920><c> any</c>

00:09:08.389 --> 00:09:08.399 align:start position:0%
the begin block is executed before any
 

00:09:08.399 --> 00:09:10.630 align:start position:0%
the begin block is executed before any
line<00:09:08.880><c> from</c><00:09:09.120><c> the</c><00:09:09.279><c> file</c><00:09:09.600><c> is</c><00:09:09.760><c> read</c>

00:09:10.630 --> 00:09:10.640 align:start position:0%
line from the file is read
 

00:09:10.640 --> 00:09:11.910 align:start position:0%
line from the file is read
and<00:09:10.800><c> then</c><00:09:10.959><c> there</c><00:09:11.120><c> are</c><00:09:11.200><c> three</c><00:09:11.440><c> lines</c><00:09:11.680><c> that</c><00:09:11.839><c> are</c>

00:09:11.910 --> 00:09:11.920 align:start position:0%
and then there are three lines that are
 

00:09:11.920 --> 00:09:13.910 align:start position:0%
and then there are three lines that are
being<00:09:12.160><c> read</c><00:09:12.399><c> so</c><00:09:12.560><c> for</c><00:09:12.800><c> each</c><00:09:13.040><c> of</c><00:09:13.120><c> those</c><00:09:13.440><c> lines</c>

00:09:13.910 --> 00:09:13.920 align:start position:0%
being read so for each of those lines
 

00:09:13.920 --> 00:09:16.310 align:start position:0%
being read so for each of those lines
the<00:09:14.320><c> default</c><00:09:14.800><c> action</c><00:09:15.360><c> without</c><00:09:15.760><c> the</c><00:09:15.920><c> pattern</c>

00:09:16.310 --> 00:09:16.320 align:start position:0%
the default action without the pattern
 

00:09:16.320 --> 00:09:18.710 align:start position:0%
the default action without the pattern
in<00:09:16.399><c> front</c><00:09:16.640><c> of</c><00:09:16.720><c> the</c><00:09:16.880><c> code</c><00:09:17.200><c> block</c><00:09:17.440><c> is</c><00:09:17.600><c> processed</c>

00:09:18.710 --> 00:09:18.720 align:start position:0%
in front of the code block is processed
 

00:09:18.720 --> 00:09:21.990 align:start position:0%
in front of the code block is processed
once<00:09:19.040><c> per</c><00:09:19.279><c> each</c><00:09:19.839><c> line</c><00:09:20.640><c> and</c><00:09:20.800><c> then</c><00:09:21.279><c> once</c><00:09:21.600><c> the</c>

00:09:21.990 --> 00:09:22.000 align:start position:0%
once per each line and then once the
 

00:09:22.000 --> 00:09:23.750 align:start position:0%
once per each line and then once the
file<00:09:22.320><c> has</c><00:09:22.399><c> been</c><00:09:22.560><c> read</c><00:09:22.800><c> completely</c><00:09:23.360><c> then</c><00:09:23.519><c> the</c>

00:09:23.750 --> 00:09:23.760 align:start position:0%
file has been read completely then the
 

00:09:23.760 --> 00:09:25.590 align:start position:0%
file has been read completely then the
end<00:09:24.000><c> block</c><00:09:24.240><c> is</c><00:09:24.480><c> processed</c><00:09:25.040><c> so</c><00:09:25.200><c> this</c><00:09:25.440><c> is</c><00:09:25.519><c> the</c>

00:09:25.590 --> 00:09:25.600 align:start position:0%
end block is processed so this is the
 

00:09:25.600 --> 00:09:28.949 align:start position:0%
end block is processed so this is the
sequence<00:09:26.480><c> the</c><00:09:26.640><c> begin</c><00:09:27.040><c> once</c><00:09:27.600><c> and</c><00:09:27.760><c> then</c><00:09:28.399><c> as</c><00:09:28.640><c> many</c>

00:09:28.949 --> 00:09:28.959 align:start position:0%
sequence the begin once and then as many
 

00:09:28.959 --> 00:09:32.150 align:start position:0%
sequence the begin once and then as many
times<00:09:29.279><c> as</c><00:09:29.600><c> the</c><00:09:30.080><c> lines</c><00:09:30.399><c> of</c><00:09:30.560><c> the</c><00:09:30.800><c> input</c><00:09:31.680><c> the</c><00:09:31.839><c> code</c>

00:09:32.150 --> 00:09:32.160 align:start position:0%
times as the lines of the input the code
 

00:09:32.160 --> 00:09:33.910 align:start position:0%
times as the lines of the input the code
block<00:09:32.560><c> without</c><00:09:33.040><c> any</c><00:09:33.279><c> pattern</c><00:09:33.600><c> will</c><00:09:33.760><c> be</c>

00:09:33.910 --> 00:09:33.920 align:start position:0%
block without any pattern will be
 

00:09:33.920 --> 00:09:35.509 align:start position:0%
block without any pattern will be
processed<00:09:34.399><c> after</c><00:09:34.560><c> that</c><00:09:34.720><c> the</c><00:09:34.959><c> end</c><00:09:35.120><c> block</c><00:09:35.440><c> will</c>

00:09:35.509 --> 00:09:35.519 align:start position:0%
processed after that the end block will
 

00:09:35.519 --> 00:09:38.389 align:start position:0%
processed after that the end block will
be<00:09:35.680><c> processed</c><00:09:36.560><c> now</c><00:09:36.720><c> let</c><00:09:36.959><c> us</c><00:09:37.120><c> test</c><00:09:37.440><c> this</c><00:09:37.760><c> by</c>

00:09:38.389 --> 00:09:38.399 align:start position:0%
be processed now let us test this by
 

00:09:38.399 --> 00:09:40.230 align:start position:0%
be processed now let us test this by
doing<00:09:39.040><c> the</c><00:09:39.200><c> same</c><00:09:39.440><c> thing</c><00:09:39.680><c> in</c><00:09:39.760><c> a</c><00:09:39.920><c> slightly</c>

00:09:40.230 --> 00:09:40.240 align:start position:0%
doing the same thing in a slightly
 

00:09:40.240 --> 00:09:43.269 align:start position:0%
doing the same thing in a slightly
different<00:09:40.560><c> manner</c>

00:09:43.269 --> 00:09:43.279 align:start position:0%
 
 

00:09:43.279 --> 00:09:44.710 align:start position:0%
 
so<00:09:43.440><c> i</c><00:09:43.600><c> could</c><00:09:43.839><c> pipe</c>

00:09:44.710 --> 00:09:44.720 align:start position:0%
so i could pipe
 

00:09:44.720 --> 00:09:45.670 align:start position:0%
so i could pipe
the

00:09:45.670 --> 00:09:45.680 align:start position:0%
the
 

00:09:45.680 --> 00:09:47.509 align:start position:0%
the
input

00:09:47.509 --> 00:09:47.519 align:start position:0%
input
 

00:09:47.519 --> 00:09:52.150 align:start position:0%
input
also<00:09:48.160><c> using</c><00:09:48.720><c> this</c>

00:09:52.150 --> 00:09:52.160 align:start position:0%
 
 

00:09:52.160 --> 00:09:54.870 align:start position:0%
 
so<00:09:52.399><c> it</c><00:09:52.560><c> would</c><00:09:52.720><c> have</c><00:09:52.959><c> exactly</c><00:09:53.360><c> the</c><00:09:53.519><c> same</c>

00:09:54.870 --> 00:09:54.880 align:start position:0%
so it would have exactly the same
 

00:09:54.880 --> 00:09:55.910 align:start position:0%
so it would have exactly the same
outcome

00:09:55.910 --> 00:09:55.920 align:start position:0%
outcome
 

00:09:55.920 --> 00:09:58.710 align:start position:0%
outcome
now<00:09:56.160><c> i</c><00:09:56.320><c> will</c><00:09:56.480><c> go</c><00:09:56.800><c> ahead</c>

00:09:58.710 --> 00:09:58.720 align:start position:0%
now i will go ahead
 

00:09:58.720 --> 00:10:01.670 align:start position:0%
now i will go ahead
now<00:09:58.880><c> i</c><00:09:59.040><c> will</c><00:09:59.200><c> go</c><00:09:59.440><c> ahead</c><00:09:59.920><c> and</c><00:10:00.480><c> edit</c><00:10:00.880><c> the</c><00:10:01.279><c> input</c>

00:10:01.670 --> 00:10:01.680 align:start position:0%
now i will go ahead and edit the input
 

00:10:01.680 --> 00:10:02.790 align:start position:0%
now i will go ahead and edit the input
file<00:10:02.079><c> to</c>

00:10:02.790 --> 00:10:02.800 align:start position:0%
file to
 

00:10:02.800 --> 00:10:06.150 align:start position:0%
file to
add<00:10:03.040><c> one</c><00:10:03.279><c> more</c><00:10:03.519><c> line</c>

00:10:06.150 --> 00:10:06.160 align:start position:0%
 
 

00:10:06.160 --> 00:10:12.710 align:start position:0%
 
and<00:10:06.320><c> you</c><00:10:06.480><c> should</c><00:10:06.640><c> see</c><00:10:06.800><c> what</c><00:10:07.040><c> will</c><00:10:07.200><c> happen</c>

00:10:12.710 --> 00:10:12.720 align:start position:0%
 
 

00:10:12.720 --> 00:10:15.269 align:start position:0%
 
so<00:10:12.880><c> there</c><00:10:13.120><c> are</c><00:10:13.200><c> four</c><00:10:13.440><c> lines</c><00:10:13.920><c> so</c><00:10:14.480><c> you</c><00:10:14.640><c> could</c><00:10:14.880><c> see</c>

00:10:15.269 --> 00:10:15.279 align:start position:0%
so there are four lines so you could see
 

00:10:15.279 --> 00:10:16.389 align:start position:0%
so there are four lines so you could see
that

00:10:16.389 --> 00:10:16.399 align:start position:0%
that
 

00:10:16.399 --> 00:10:18.710 align:start position:0%
that
we<00:10:16.640><c> now</c><00:10:16.880><c> expect</c><00:10:17.360><c> the</c><00:10:17.600><c> default</c><00:10:18.079><c> block</c><00:10:18.320><c> to</c><00:10:18.480><c> be</c>

00:10:18.710 --> 00:10:18.720 align:start position:0%
we now expect the default block to be
 

00:10:18.720 --> 00:10:20.389 align:start position:0%
we now expect the default block to be
processed<00:10:19.200><c> four</c><00:10:19.440><c> times</c><00:10:19.760><c> because</c><00:10:20.000><c> there</c><00:10:20.240><c> are</c>

00:10:20.389 --> 00:10:20.399 align:start position:0%
processed four times because there are
 

00:10:20.399 --> 00:10:22.230 align:start position:0%
processed four times because there are
four<00:10:20.640><c> lines</c><00:10:20.959><c> so</c><00:10:21.120><c> for</c><00:10:21.279><c> each</c><00:10:21.600><c> line</c><00:10:21.760><c> it</c><00:10:21.920><c> is</c><00:10:22.000><c> being</c>

00:10:22.230 --> 00:10:22.240 align:start position:0%
four lines so for each line it is being
 

00:10:22.240 --> 00:10:23.430 align:start position:0%
four lines so for each line it is being
processed

00:10:23.430 --> 00:10:23.440 align:start position:0%
processed
 

00:10:23.440 --> 00:10:29.750 align:start position:0%
processed
once

00:10:29.750 --> 00:10:29.760 align:start position:0%
 
 

00:10:29.760 --> 00:10:32.389 align:start position:0%
 
look<00:10:30.000><c> at</c><00:10:30.079><c> the</c><00:10:30.240><c> code</c><00:10:31.040><c> so</c><00:10:31.440><c> this</c><00:10:31.680><c> is</c><00:10:31.760><c> the</c>

00:10:32.389 --> 00:10:32.399 align:start position:0%
look at the code so this is the
 

00:10:32.399 --> 00:10:34.550 align:start position:0%
look at the code so this is the
default<00:10:32.880><c> block</c><00:10:33.279><c> which</c><00:10:33.519><c> is</c><00:10:33.680><c> processed</c><00:10:34.240><c> once</c>

00:10:34.550 --> 00:10:34.560 align:start position:0%
default block which is processed once
 

00:10:34.560 --> 00:10:37.509 align:start position:0%
default block which is processed once
per<00:10:34.800><c> line</c><00:10:35.519><c> that</c><00:10:35.680><c> has</c><00:10:35.839><c> been</c><00:10:36.079><c> read</c><00:10:36.800><c> and</c><00:10:37.120><c> before</c>

00:10:37.509 --> 00:10:37.519 align:start position:0%
per line that has been read and before
 

00:10:37.519 --> 00:10:39.350 align:start position:0%
per line that has been read and before
the<00:10:38.000><c> input</c><00:10:38.320><c> stream</c><00:10:38.640><c> is</c>

00:10:39.350 --> 00:10:39.360 align:start position:0%
the input stream is
 

00:10:39.360 --> 00:10:40.150 align:start position:0%
the input stream is
read

00:10:40.150 --> 00:10:40.160 align:start position:0%
read
 

00:10:40.160 --> 00:10:42.630 align:start position:0%
read
the<00:10:40.320><c> begin</c><00:10:40.640><c> block</c><00:10:40.880><c> will</c><00:10:41.040><c> be</c><00:10:41.600><c> executed</c><00:10:42.480><c> and</c>

00:10:42.630 --> 00:10:42.640 align:start position:0%
the begin block will be executed and
 

00:10:42.640 --> 00:10:44.230 align:start position:0%
the begin block will be executed and
after<00:10:42.959><c> the</c><00:10:43.200><c> input</c><00:10:43.519><c> stream</c><00:10:43.920><c> has</c><00:10:44.000><c> been</c>

00:10:44.230 --> 00:10:44.240 align:start position:0%
after the input stream has been
 

00:10:44.240 --> 00:10:46.710 align:start position:0%
after the input stream has been
completely<00:10:44.880><c> processed</c><00:10:45.680><c> then</c><00:10:45.920><c> the</c><00:10:46.160><c> end</c><00:10:46.399><c> block</c>

00:10:46.710 --> 00:10:46.720 align:start position:0%
completely processed then the end block
 

00:10:46.720 --> 00:10:49.590 align:start position:0%
completely processed then the end block
is<00:10:47.279><c> processed</c><00:10:48.240><c> now</c><00:10:48.480><c> in</c><00:10:48.640><c> any</c><00:10:48.880><c> script</c><00:10:49.279><c> you</c><00:10:49.440><c> can</c>

00:10:49.590 --> 00:10:49.600 align:start position:0%
is processed now in any script you can
 

00:10:49.600 --> 00:10:51.910 align:start position:0%
is processed now in any script you can
have<00:10:49.839><c> as</c><00:10:50.079><c> many</c><00:10:50.320><c> begins</c><00:10:50.800><c> and</c><00:10:51.040><c> ends</c><00:10:51.360><c> also</c><00:10:51.680><c> they</c>

00:10:51.910 --> 00:10:51.920 align:start position:0%
have as many begins and ends also they
 

00:10:51.920 --> 00:10:54.310 align:start position:0%
have as many begins and ends also they
will<00:10:52.079><c> all</c><00:10:52.240><c> work</c><00:10:52.480><c> as</c><00:10:52.720><c> if</c><00:10:53.279><c> you</c><00:10:53.519><c> have</c><00:10:53.760><c> just</c><00:10:54.000><c> given</c>

00:10:54.310 --> 00:10:54.320 align:start position:0%
will all work as if you have just given
 

00:10:54.320 --> 00:10:56.550 align:start position:0%
will all work as if you have just given
them<00:10:54.720><c> in</c><00:10:54.880><c> separate</c><00:10:55.360><c> parts</c><00:10:55.760><c> of</c><00:10:55.839><c> the</c><00:10:55.920><c> same</c><00:10:56.240><c> begin</c>

00:10:56.550 --> 00:10:56.560 align:start position:0%
them in separate parts of the same begin
 

00:10:56.560 --> 00:11:04.470 align:start position:0%
them in separate parts of the same begin
block<00:10:57.200><c> so</c><00:10:57.440><c> that</c><00:10:57.680><c> also</c><00:10:57.839><c> we</c><00:10:58.000><c> could</c><00:10:58.160><c> test</c><00:10:58.480><c> now</c>

00:11:04.470 --> 00:11:04.480 align:start position:0%
 
 

00:11:04.480 --> 00:11:05.509 align:start position:0%
 
so

00:11:05.509 --> 00:11:05.519 align:start position:0%
so
 

00:11:05.519 --> 00:11:06.550 align:start position:0%
so
i<00:11:05.760><c> would</c>

00:11:06.550 --> 00:11:06.560 align:start position:0%
i would
 

00:11:06.560 --> 00:11:10.310 align:start position:0%
i would
copy<00:11:06.880><c> the</c><00:11:07.040><c> begin</c><00:11:07.360><c> block</c><00:11:08.160><c> after</c><00:11:08.480><c> the</c><00:11:08.640><c> last</c><00:11:09.120><c> and</c>

00:11:10.310 --> 00:11:10.320 align:start position:0%
copy the begin block after the last and
 

00:11:10.320 --> 00:11:11.829 align:start position:0%
copy the begin block after the last and
i<00:11:10.640><c> say</c>

00:11:11.829 --> 00:11:11.839 align:start position:0%
i say
 

00:11:11.839 --> 00:11:13.030 align:start position:0%
i say
another

00:11:13.030 --> 00:11:13.040 align:start position:0%
another
 

00:11:13.040 --> 00:11:20.230 align:start position:0%
another
piece<00:11:13.519><c> of</c><00:11:14.000><c> code</c><00:11:14.480><c> for</c><00:11:14.800><c> the</c><00:11:15.440><c> begin</c><00:11:15.839><c> block</c>

00:11:20.230 --> 00:11:20.240 align:start position:0%
 
 

00:11:20.240 --> 00:11:22.470 align:start position:0%
 
okay<00:11:20.640><c> and</c><00:11:20.880><c> i</c><00:11:20.959><c> will</c><00:11:21.120><c> also</c><00:11:21.360><c> copy</c><00:11:21.680><c> the</c><00:11:21.839><c> end</c><00:11:22.079><c> block</c>

00:11:22.470 --> 00:11:22.480 align:start position:0%
okay and i will also copy the end block
 

00:11:22.480 --> 00:11:26.310 align:start position:0%
okay and i will also copy the end block
a<00:11:22.800><c> second</c><00:11:23.200><c> time</c>

00:11:26.310 --> 00:11:26.320 align:start position:0%
 
 

00:11:26.320 --> 00:11:36.150 align:start position:0%
 
and<00:11:26.480><c> i</c><00:11:26.640><c> will</c><00:11:26.800><c> put</c><00:11:26.959><c> it</c><00:11:27.120><c> in</c><00:11:27.360><c> beginning</c>

00:11:36.150 --> 00:11:36.160 align:start position:0%
 
 

00:11:36.160 --> 00:11:37.829 align:start position:0%
 
okay<00:11:36.399><c> so</c><00:11:36.560><c> we</c><00:11:36.640><c> now</c><00:11:36.800><c> have</c><00:11:37.040><c> two</c><00:11:37.279><c> end</c><00:11:37.440><c> blocks</c><00:11:37.760><c> and</c>

00:11:37.829 --> 00:11:37.839 align:start position:0%
okay so we now have two end blocks and
 

00:11:37.839 --> 00:11:40.310 align:start position:0%
okay so we now have two end blocks and
two<00:11:38.000><c> begin</c><00:11:38.320><c> blocks</c><00:11:38.720><c> and</c><00:11:38.880><c> one</c><00:11:39.600><c> code</c><00:11:39.920><c> block</c><00:11:40.079><c> so</c>

00:11:40.310 --> 00:11:40.320 align:start position:0%
two begin blocks and one code block so
 

00:11:40.320 --> 00:11:44.389 align:start position:0%
two begin blocks and one code block so
let<00:11:40.399><c> us</c><00:11:40.480><c> see</c><00:11:40.640><c> what</c><00:11:40.880><c> would</c><00:11:41.040><c> happen</c><00:11:41.279><c> with</c><00:11:41.519><c> this</c>

00:11:44.389 --> 00:11:44.399 align:start position:0%
 
 

00:11:44.399 --> 00:11:46.870 align:start position:0%
 
so<00:11:44.640><c> you</c><00:11:44.800><c> see</c><00:11:45.040><c> that</c><00:11:45.760><c> the</c><00:11:45.920><c> begin</c><00:11:46.240><c> block</c><00:11:46.560><c> has</c><00:11:46.720><c> been</c>

00:11:46.870 --> 00:11:46.880 align:start position:0%
so you see that the begin block has been
 

00:11:46.880 --> 00:11:49.750 align:start position:0%
so you see that the begin block has been
processed<00:11:47.839><c> so</c><00:11:48.000><c> you</c><00:11:48.160><c> have</c><00:11:48.480><c> seen</c><00:11:48.720><c> the</c><00:11:49.279><c> one</c><00:11:49.519><c> which</c>

00:11:49.750 --> 00:11:49.760 align:start position:0%
processed so you have seen the one which
 

00:11:49.760 --> 00:11:51.590 align:start position:0%
processed so you have seen the one which
is<00:11:49.920><c> there</c><00:11:50.160><c> in</c><00:11:50.240><c> the</c><00:11:50.399><c> front</c><00:11:50.880><c> and</c><00:11:50.959><c> then</c><00:11:51.200><c> later</c><00:11:51.519><c> the</c>

00:11:51.590 --> 00:11:51.600 align:start position:0%
is there in the front and then later the
 

00:11:51.600 --> 00:11:54.069 align:start position:0%
is there in the front and then later the
second<00:11:51.920><c> part</c><00:11:52.160><c> of</c><00:11:52.240><c> that</c><00:11:52.959><c> and</c><00:11:53.040><c> then</c><00:11:53.279><c> the</c><00:11:53.680><c> default</c>

00:11:54.069 --> 00:11:54.079 align:start position:0%
second part of that and then the default
 

00:11:54.079 --> 00:11:55.910 align:start position:0%
second part of that and then the default
action<00:11:54.399><c> block</c><00:11:54.639><c> is</c><00:11:54.720><c> processed</c><00:11:55.279><c> four</c><00:11:55.600><c> times</c>

00:11:55.910 --> 00:11:55.920 align:start position:0%
action block is processed four times
 

00:11:55.920 --> 00:11:57.910 align:start position:0%
action block is processed four times
once<00:11:56.240><c> per</c><00:11:56.480><c> each</c><00:11:56.720><c> line</c>

00:11:57.910 --> 00:11:57.920 align:start position:0%
once per each line
 

00:11:57.920 --> 00:11:59.509 align:start position:0%
once per each line
end<00:11:58.160><c> block</c><00:11:58.399><c> which</c><00:11:58.639><c> came</c><00:11:58.880><c> at</c><00:11:58.959><c> the</c><00:11:59.040><c> beginning</c><00:11:59.440><c> of</c>

00:11:59.509 --> 00:11:59.519 align:start position:0%
end block which came at the beginning of
 

00:11:59.519 --> 00:12:01.269 align:start position:0%
end block which came at the beginning of
the<00:11:59.600><c> script</c><00:12:00.079><c> has</c><00:12:00.240><c> been</c><00:12:00.480><c> processed</c><00:12:00.880><c> after</c><00:12:01.120><c> that</c>

00:12:01.269 --> 00:12:01.279 align:start position:0%
the script has been processed after that
 

00:12:01.279 --> 00:12:04.310 align:start position:0%
the script has been processed after that
the<00:12:01.440><c> last</c><00:12:01.760><c> one</c><00:12:02.079><c> so</c><00:12:02.320><c> the</c><00:12:02.720><c> end</c><00:12:03.040><c> blocks</c><00:12:04.000><c> are</c>

00:12:04.310 --> 00:12:04.320 align:start position:0%
the last one so the end blocks are
 

00:12:04.320 --> 00:12:06.870 align:start position:0%
the last one so the end blocks are
processed<00:12:04.880><c> in</c><00:12:04.959><c> the</c><00:12:05.120><c> same</c><00:12:05.440><c> sequence</c><00:12:06.399><c> that</c><00:12:06.720><c> we</c>

00:12:06.870 --> 00:12:06.880 align:start position:0%
processed in the same sequence that we
 

00:12:06.880 --> 00:12:09.590 align:start position:0%
processed in the same sequence that we
have<00:12:07.120><c> given</c><00:12:07.600><c> in</c><00:12:07.760><c> the</c><00:12:08.000><c> file</c><00:12:08.800><c> so</c><00:12:09.200><c> this</c><00:12:09.360><c> is</c><00:12:09.519><c> the</c>

00:12:09.590 --> 00:12:09.600 align:start position:0%
have given in the file so this is the
 

00:12:09.600 --> 00:12:12.310 align:start position:0%
have given in the file so this is the
first<00:12:09.920><c> statement</c><00:12:10.639><c> which</c><00:12:10.880><c> has</c><00:12:11.040><c> been</c><00:12:11.680><c> processed</c>

00:12:12.310 --> 00:12:12.320 align:start position:0%
first statement which has been processed
 

00:12:12.320 --> 00:12:14.310 align:start position:0%
first statement which has been processed
and<00:12:12.480><c> then</c><00:12:12.639><c> this</c><00:12:12.880><c> statement</c><00:12:13.360><c> so</c>

00:12:14.310 --> 00:12:14.320 align:start position:0%
and then this statement so
 

00:12:14.320 --> 00:12:16.790 align:start position:0%
and then this statement so
the<00:12:14.639><c> multiple</c><00:12:15.360><c> begin</c><00:12:15.680><c> blocks</c><00:12:16.000><c> and</c><00:12:16.160><c> multiple</c>

00:12:16.790 --> 00:12:16.800 align:start position:0%
the multiple begin blocks and multiple
 

00:12:16.800 --> 00:12:18.470 align:start position:0%
the multiple begin blocks and multiple
end<00:12:16.959><c> blocks</c><00:12:17.279><c> are</c><00:12:17.440><c> interpreted</c><00:12:18.000><c> as</c><00:12:18.240><c> if</c><00:12:18.399><c> they</c>

00:12:18.470 --> 00:12:18.480 align:start position:0%
end blocks are interpreted as if they
 

00:12:18.480 --> 00:12:20.150 align:start position:0%
end blocks are interpreted as if they
are<00:12:18.880><c> portions</c><00:12:19.360><c> of</c>

00:12:20.150 --> 00:12:20.160 align:start position:0%
are portions of
 

00:12:20.160 --> 00:12:21.910 align:start position:0%
are portions of
the<00:12:20.399><c> same</c><00:12:20.639><c> set</c><00:12:20.880><c> of</c><00:12:20.959><c> actions</c><00:12:21.360><c> that</c><00:12:21.519><c> have</c><00:12:21.600><c> to</c><00:12:21.760><c> be</c>

00:12:21.910 --> 00:12:21.920 align:start position:0%
the same set of actions that have to be
 

00:12:21.920 --> 00:12:25.350 align:start position:0%
the same set of actions that have to be
taken<00:12:22.480><c> at</c><00:12:22.800><c> the</c><00:12:22.959><c> beginning</c><00:12:24.000><c> and</c><00:12:24.240><c> at</c><00:12:24.399><c> the</c><00:12:24.560><c> end</c><00:12:24.880><c> of</c>

00:12:25.350 --> 00:12:25.360 align:start position:0%
taken at the beginning and at the end of
 

00:12:25.360 --> 00:12:28.310 align:start position:0%
taken at the beginning and at the end of
processing<00:12:25.839><c> the</c><00:12:26.000><c> input</c><00:12:26.320><c> stream</c><00:12:26.720><c> respectively</c>

00:12:28.310 --> 00:12:28.320 align:start position:0%
processing the input stream respectively
 

00:12:28.320 --> 00:12:30.389 align:start position:0%
processing the input stream respectively
now<00:12:28.480><c> what</c><00:12:28.720><c> about</c><00:12:29.120><c> the</c><00:12:29.519><c> line</c><00:12:29.760><c> that</c><00:12:30.000><c> is</c><00:12:30.079><c> being</c>

00:12:30.389 --> 00:12:30.399 align:start position:0%
now what about the line that is being
 

00:12:30.399 --> 00:12:35.829 align:start position:0%
now what about the line that is being
processed<00:12:30.959><c> so</c><00:12:31.120><c> we</c><00:12:31.200><c> could</c><00:12:31.440><c> also</c><00:12:31.680><c> look</c><00:12:31.839><c> at</c><00:12:32.079><c> that</c>

00:12:35.829 --> 00:12:35.839 align:start position:0%
 
 

00:12:35.839 --> 00:12:43.030 align:start position:0%
 
so<00:12:36.079><c> what</c><00:12:36.240><c> we</c><00:12:36.480><c> do</c><00:12:36.839><c> is</c><00:12:37.839><c> clean</c><00:12:38.160><c> it</c><00:12:38.320><c> up</c><00:12:38.480><c> a</c><00:12:38.560><c> bit</c>

00:12:43.030 --> 00:12:43.040 align:start position:0%
 
 

00:12:43.040 --> 00:12:46.870 align:start position:0%
 
and<00:12:43.360><c> this</c><00:12:43.680><c> line</c>

00:12:46.870 --> 00:12:46.880 align:start position:0%
 
 

00:12:46.880 --> 00:12:50.470 align:start position:0%
 
i<00:12:46.959><c> would</c><00:12:47.279><c> print</c><00:12:47.680><c> a</c><00:12:47.839><c> variable</c><00:12:48.320><c> called</c>

00:12:50.470 --> 00:12:50.480 align:start position:0%
i would print a variable called
 

00:12:50.480 --> 00:12:52.949 align:start position:0%
i would print a variable called
dollar<00:12:50.880><c> 0</c><00:12:51.200><c> which</c><00:12:51.680><c> represents</c><00:12:52.399><c> the</c><00:12:52.560><c> line</c><00:12:52.800><c> that</c>

00:12:52.949 --> 00:12:52.959 align:start position:0%
dollar 0 which represents the line that
 

00:12:52.959 --> 00:12:55.269 align:start position:0%
dollar 0 which represents the line that
is<00:12:53.040><c> being</c><00:12:53.279><c> processed</c><00:12:53.760><c> we</c><00:12:54.000><c> don't</c><00:12:54.320><c> need</c>

00:12:55.269 --> 00:12:55.279 align:start position:0%
is being processed we don't need
 

00:12:55.279 --> 00:12:56.470 align:start position:0%
is being processed we don't need
the

00:12:56.470 --> 00:12:56.480 align:start position:0%
the
 

00:12:56.480 --> 00:12:58.470 align:start position:0%
the
semicolons<00:12:57.200><c> at</c><00:12:57.360><c> the</c><00:12:57.440><c> end</c><00:12:57.680><c> of</c><00:12:57.839><c> every</c><00:12:58.079><c> statement</c>

00:12:58.470 --> 00:12:58.480 align:start position:0%
semicolons at the end of every statement
 

00:12:58.480 --> 00:12:59.910 align:start position:0%
semicolons at the end of every statement
unless<00:12:58.720><c> we</c><00:12:58.880><c> want</c><00:12:59.120><c> to</c><00:12:59.200><c> join</c><00:12:59.519><c> multiple</c>

00:12:59.910 --> 00:12:59.920 align:start position:0%
unless we want to join multiple
 

00:12:59.920 --> 00:13:01.990 align:start position:0%
unless we want to join multiple
statements<00:13:00.399><c> on</c><00:13:00.560><c> a</c><00:13:00.639><c> single</c><00:13:00.959><c> line</c>

00:13:01.990 --> 00:13:02.000 align:start position:0%
statements on a single line
 

00:13:02.000 --> 00:13:04.069 align:start position:0%
statements on a single line
and<00:13:02.639><c> here</c><00:13:02.800><c> you</c><00:13:02.959><c> would</c><00:13:03.200><c> see</c>

00:13:04.069 --> 00:13:04.079 align:start position:0%
and here you would see
 

00:13:04.079 --> 00:13:06.310 align:start position:0%
and here you would see
that<00:13:04.480><c> the</c><00:13:04.720><c> default</c><00:13:05.200><c> action</c><00:13:05.440><c> is</c><00:13:05.600><c> processed</c><00:13:06.079><c> for</c>

00:13:06.310 --> 00:13:06.320 align:start position:0%
that the default action is processed for
 

00:13:06.320 --> 00:13:07.750 align:start position:0%
that the default action is processed for
every<00:13:06.480><c> line</c><00:13:06.720><c> the</c><00:13:06.800><c> line</c><00:13:07.120><c> is</c><00:13:07.279><c> going</c><00:13:07.440><c> to</c><00:13:07.519><c> be</c>

00:13:07.750 --> 00:13:07.760 align:start position:0%
every line the line is going to be
 

00:13:07.760 --> 00:13:12.790 align:start position:0%
every line the line is going to be
printed

00:13:12.790 --> 00:13:12.800 align:start position:0%
 
 

00:13:12.800 --> 00:13:14.790 align:start position:0%
 
so<00:13:12.959><c> you</c><00:13:13.200><c> see</c><00:13:13.360><c> that</c><00:13:13.680><c> every</c><00:13:13.920><c> line</c><00:13:14.160><c> is</c><00:13:14.560><c> being</c>

00:13:14.790 --> 00:13:14.800 align:start position:0%
so you see that every line is being
 

00:13:14.800 --> 00:13:17.350 align:start position:0%
so you see that every line is being
printed<00:13:15.200><c> here</c><00:13:15.440><c> so</c><00:13:15.600><c> i</c><00:13:15.760><c> would</c>

00:13:17.350 --> 00:13:17.360 align:start position:0%
printed here so i would
 

00:13:17.360 --> 00:13:20.470 align:start position:0%
printed here so i would
show<00:13:17.519><c> you</c><00:13:18.079><c> the</c><00:13:18.639><c> input</c><00:13:19.279><c> as</c><00:13:19.440><c> well</c><00:13:19.760><c> so</c><00:13:19.920><c> for</c><00:13:20.160><c> every</c>

00:13:20.470 --> 00:13:20.480 align:start position:0%
show you the input as well so for every
 

00:13:20.480 --> 00:13:21.590 align:start position:0%
show you the input as well so for every
line

00:13:21.590 --> 00:13:21.600 align:start position:0%
line
 

00:13:21.600 --> 00:13:23.670 align:start position:0%
line
the<00:13:21.839><c> default</c><00:13:22.320><c> action</c><00:13:22.800><c> is</c>

00:13:23.670 --> 00:13:23.680 align:start position:0%
the default action is
 

00:13:23.680 --> 00:13:25.590 align:start position:0%
the default action is
being<00:13:24.000><c> processed</c>

00:13:25.590 --> 00:13:25.600 align:start position:0%
being processed
 

00:13:25.600 --> 00:13:27.670 align:start position:0%
being processed
and<00:13:25.760><c> that's</c><00:13:26.000><c> four</c><00:13:26.320><c> times</c><00:13:26.720><c> for</c><00:13:26.959><c> the</c><00:13:27.120><c> four</c><00:13:27.360><c> lines</c>

00:13:27.670 --> 00:13:27.680 align:start position:0%
and that's four times for the four lines
 

00:13:27.680 --> 00:13:29.750 align:start position:0%
and that's four times for the four lines
respectively<00:13:28.800><c> and</c><00:13:29.040><c> the</c>

00:13:29.750 --> 00:13:29.760 align:start position:0%
respectively and the
 

00:13:29.760 --> 00:13:32.550 align:start position:0%
respectively and the
begin<00:13:30.160><c> block</c><00:13:30.800><c> and</c><00:13:31.200><c> the</c><00:13:31.519><c> end</c><00:13:31.680><c> block</c><00:13:32.000><c> are</c><00:13:32.160><c> done</c>

00:13:32.550 --> 00:13:32.560 align:start position:0%
begin block and the end block are done
 

00:13:32.560 --> 00:13:35.509 align:start position:0%
begin block and the end block are done
just<00:13:32.959><c> once</c><00:13:33.760><c> so</c><00:13:34.079><c> this</c><00:13:34.320><c> is</c><00:13:34.480><c> the</c><00:13:34.639><c> model</c><00:13:35.120><c> of</c>

00:13:35.509 --> 00:13:35.519 align:start position:0%
just once so this is the model of
 

00:13:35.519 --> 00:13:38.389 align:start position:0%
just once so this is the model of
execution<00:13:36.160><c> of</c><00:13:36.720><c> awk</c><00:13:37.200><c> language</c><00:13:37.760><c> so</c><00:13:38.000><c> you</c><00:13:38.160><c> can</c>

00:13:38.389 --> 00:13:38.399 align:start position:0%
execution of awk language so you can
 

00:13:38.399 --> 00:13:39.430 align:start position:0%
execution of awk language so you can
imagine

00:13:39.430 --> 00:13:39.440 align:start position:0%
imagine
 

00:13:39.440 --> 00:13:41.590 align:start position:0%
imagine
how<00:13:39.600><c> we</c><00:13:39.760><c> can</c><00:13:39.920><c> put</c><00:13:40.240><c> to</c><00:13:40.480><c> use</c>

00:13:41.590 --> 00:13:41.600 align:start position:0%
how we can put to use
 

00:13:41.600 --> 00:13:44.150 align:start position:0%
how we can put to use
when<00:13:41.760><c> we</c><00:13:41.920><c> want</c><00:13:42.160><c> to</c><00:13:42.240><c> process</c><00:13:43.040><c> the</c>

00:13:44.150 --> 00:13:44.160 align:start position:0%
when we want to process the
 

00:13:44.160 --> 00:13:47.030 align:start position:0%
when we want to process the
records<00:13:44.639><c> or</c><00:13:44.800><c> lines</c><00:13:45.199><c> containing</c><00:13:45.839><c> fields</c>

00:13:47.030 --> 00:13:47.040 align:start position:0%
records or lines containing fields
 

00:13:47.040 --> 00:13:49.509 align:start position:0%
records or lines containing fields
so<00:13:47.279><c> we</c><00:13:47.440><c> just</c><00:13:47.680><c> came</c><00:13:47.920><c> across</c><00:13:48.480><c> one</c><00:13:48.880><c> variable</c>

00:13:49.509 --> 00:13:49.519 align:start position:0%
so we just came across one variable
 

00:13:49.519 --> 00:13:51.350 align:start position:0%
so we just came across one variable
dollar<00:13:49.920><c> zero</c><00:13:50.160><c> which</c><00:13:50.399><c> represent</c><00:13:50.880><c> the</c><00:13:51.040><c> entire</c>

00:13:51.350 --> 00:13:51.360 align:start position:0%
dollar zero which represent the entire
 

00:13:51.360 --> 00:13:52.949 align:start position:0%
dollar zero which represent the entire
line<00:13:51.760><c> or</c><00:13:51.920><c> the</c><00:13:52.079><c> record</c><00:13:52.480><c> that</c><00:13:52.639><c> is</c><00:13:52.720><c> being</c>

00:13:52.949 --> 00:13:52.959 align:start position:0%
line or the record that is being
 

00:13:52.959 --> 00:13:54.310 align:start position:0%
line or the record that is being
processed<00:13:53.360><c> right</c>

00:13:54.310 --> 00:13:54.320 align:start position:0%
processed right
 

00:13:54.320 --> 00:13:55.430 align:start position:0%
processed right
at<00:13:54.480><c> every</c>

00:13:55.430 --> 00:13:55.440 align:start position:0%
at every
 

00:13:55.440 --> 00:13:57.350 align:start position:0%
at every
execution<00:13:56.079><c> of</c><00:13:56.320><c> the</c>

00:13:57.350 --> 00:13:57.360 align:start position:0%
execution of the
 

00:13:57.360 --> 00:13:59.670 align:start position:0%
execution of the
action<00:13:57.680><c> block</c><00:13:58.399><c> so</c><00:13:58.639><c> what</c><00:13:58.800><c> are</c><00:13:58.959><c> the</c><00:13:59.120><c> other</c>

00:13:59.670 --> 00:13:59.680 align:start position:0%
action block so what are the other
 

00:13:59.680 --> 00:14:09.189 align:start position:0%
action block so what are the other
variables<00:14:00.240><c> let</c><00:14:00.399><c> us</c><00:14:00.480><c> have</c><00:14:00.720><c> a</c><00:14:00.800><c> look</c><00:14:00.959><c> at</c><00:14:01.120><c> them</c>

00:14:09.189 --> 00:14:09.199 align:start position:0%
 
 

00:14:09.199 --> 00:14:12.230 align:start position:0%
 
so<00:14:09.519><c> here</c><00:14:09.839><c> are</c><00:14:10.000><c> some</c><00:14:10.639><c> variables</c><00:14:11.199><c> that</c><00:14:11.440><c> are</c>

00:14:12.230 --> 00:14:12.240 align:start position:0%
so here are some variables that are
 

00:14:12.240 --> 00:14:14.710 align:start position:0%
so here are some variables that are
built<00:14:12.560><c> into</c><00:14:12.800><c> the</c><00:14:13.120><c> awk</c><00:14:13.600><c> language</c>

00:14:14.710 --> 00:14:14.720 align:start position:0%
built into the awk language
 

00:14:14.720 --> 00:14:17.509 align:start position:0%
built into the awk language
so<00:14:15.279><c> except</c><00:14:15.680><c> for</c><00:14:15.839><c> those</c><00:14:16.639><c> arguments</c><00:14:17.199><c> that</c><00:14:17.279><c> come</c>

00:14:17.509 --> 00:14:17.519 align:start position:0%
so except for those arguments that come
 

00:14:17.519 --> 00:14:20.710 align:start position:0%
so except for those arguments that come
with<00:14:17.760><c> minus</c><00:14:18.160><c> f</c><00:14:18.399><c> and</c><00:14:18.560><c> minus</c><00:14:19.040><c> v</c><00:14:19.279><c> options</c><00:14:20.160><c> minus</c><00:14:20.480><c> v</c>

00:14:20.710 --> 00:14:20.720 align:start position:0%
with minus f and minus v options minus v
 

00:14:20.720 --> 00:14:22.790 align:start position:0%
with minus f and minus v options minus v
for<00:14:20.959><c> the</c><00:14:21.040><c> variables</c><00:14:21.440><c> that</c><00:14:21.600><c> are</c><00:14:21.760><c> being</c><00:14:22.000><c> set</c><00:14:22.639><c> and</c>

00:14:22.790 --> 00:14:22.800 align:start position:0%
for the variables that are being set and
 

00:14:22.800 --> 00:14:24.710 align:start position:0%
for the variables that are being set and
minus<00:14:23.199><c> f</c><00:14:23.519><c> for</c><00:14:23.760><c> the</c>

00:14:24.710 --> 00:14:24.720 align:start position:0%
minus f for the
 

00:14:24.720 --> 00:14:26.710 align:start position:0%
minus f for the
file<00:14:25.040><c> name</c><00:14:25.600><c> where</c><00:14:25.920><c> the</c><00:14:26.000><c> script</c><00:14:26.320><c> has</c><00:14:26.480><c> to</c><00:14:26.560><c> be</c>

00:14:26.710 --> 00:14:26.720 align:start position:0%
file name where the script has to be
 

00:14:26.720 --> 00:14:28.790 align:start position:0%
file name where the script has to be
read<00:14:27.040><c> except</c><00:14:27.360><c> for</c><00:14:27.519><c> these</c><00:14:28.240><c> all</c><00:14:28.560><c> other</c>

00:14:28.790 --> 00:14:28.800 align:start position:0%
read except for these all other
 

00:14:28.800 --> 00:14:31.110 align:start position:0%
read except for these all other
arguments<00:14:29.279><c> applied</c><00:14:29.680><c> to</c><00:14:29.760><c> the</c><00:14:30.000><c> script</c><00:14:30.800><c> will</c><00:14:30.959><c> be</c>

00:14:31.110 --> 00:14:31.120 align:start position:0%
arguments applied to the script will be
 

00:14:31.120 --> 00:14:34.389 align:start position:0%
arguments applied to the script will be
available<00:14:32.079><c> uh</c><00:14:32.320><c> to</c><00:14:32.560><c> the</c><00:14:32.959><c> script</c><00:14:33.440><c> through</c><00:14:33.680><c> the</c>

00:14:34.389 --> 00:14:34.399 align:start position:0%
available uh to the script through the
 

00:14:34.399 --> 00:14:37.509 align:start position:0%
available uh to the script through the
variables<00:14:35.040><c> rxc</c><00:14:35.519><c> and</c><00:14:35.680><c> rgb</c><00:14:36.480><c> rxc</c><00:14:36.959><c> tells</c><00:14:37.199><c> you</c><00:14:37.360><c> the</c>

00:14:37.509 --> 00:14:37.519 align:start position:0%
variables rxc and rgb rxc tells you the
 

00:14:37.519 --> 00:14:39.590 align:start position:0%
variables rxc and rgb rxc tells you the
count<00:14:37.839><c> of</c><00:14:38.000><c> the</c><00:14:38.480><c> variables</c><00:14:38.959><c> that</c><00:14:39.120><c> are</c><00:14:39.199><c> passed</c>

00:14:39.590 --> 00:14:39.600 align:start position:0%
count of the variables that are passed
 

00:14:39.600 --> 00:14:41.030 align:start position:0%
count of the variables that are passed
on<00:14:39.760><c> the</c><00:14:40.160><c> shell</c>

00:14:41.030 --> 00:14:41.040 align:start position:0%
on the shell
 

00:14:41.040 --> 00:14:43.269 align:start position:0%
on the shell
in<00:14:41.120><c> the</c><00:14:41.279><c> command</c><00:14:41.600><c> line</c><00:14:42.079><c> rv</c><00:14:42.560><c> will</c><00:14:42.720><c> contain</c><00:14:43.199><c> a</c>

00:14:43.269 --> 00:14:43.279 align:start position:0%
in the command line rv will contain a
 

00:14:43.279 --> 00:14:45.750 align:start position:0%
in the command line rv will contain a
list<00:14:43.600><c> of</c><00:14:43.839><c> the</c><00:14:44.079><c> strings</c><00:14:44.480><c> passed</c><00:14:45.199><c> as</c><00:14:45.360><c> command</c>

00:14:45.750 --> 00:14:45.760 align:start position:0%
list of the strings passed as command
 

00:14:45.760 --> 00:14:47.829 align:start position:0%
list of the strings passed as command
and<00:14:46.000><c> arguments</c><00:14:46.880><c> and</c><00:14:47.040><c> you</c><00:14:47.199><c> can</c><00:14:47.360><c> access</c><00:14:47.680><c> them</c>

00:14:47.829 --> 00:14:47.839 align:start position:0%
and arguments and you can access them
 

00:14:47.839 --> 00:14:50.150 align:start position:0%
and arguments and you can access them
from<00:14:48.079><c> inside</c><00:14:48.320><c> the</c><00:14:48.480><c> script</c><00:14:49.279><c> now</c><00:14:49.600><c> all</c><00:14:49.839><c> the</c>

00:14:50.150 --> 00:14:50.160 align:start position:0%
from inside the script now all the
 

00:14:50.160 --> 00:14:51.990 align:start position:0%
from inside the script now all the
environment<00:14:50.720><c> variables</c><00:14:51.199><c> are</c><00:14:51.279><c> also</c><00:14:51.600><c> available</c>

00:14:51.990 --> 00:14:52.000 align:start position:0%
environment variables are also available
 

00:14:52.000 --> 00:14:54.230 align:start position:0%
environment variables are also available
to<00:14:52.160><c> the</c><00:14:52.320><c> aux</c><00:14:52.560><c> scripts</c><00:14:53.120><c> via</c>

00:14:54.230 --> 00:14:54.240 align:start position:0%
to the aux scripts via
 

00:14:54.240 --> 00:14:57.509 align:start position:0%
to the aux scripts via
the<00:14:54.480><c> array</c><00:14:55.199><c> nvrom</c><00:14:56.320><c> and</c><00:14:56.560><c> it's</c><00:14:56.720><c> an</c><00:14:56.880><c> associative</c>

00:14:57.509 --> 00:14:57.519 align:start position:0%
the array nvrom and it's an associative
 

00:14:57.519 --> 00:14:59.750 align:start position:0%
the array nvrom and it's an associative
array<00:14:57.760><c> that</c><00:14:57.839><c> means</c><00:14:58.079><c> it's</c><00:14:58.320><c> a</c><00:14:58.560><c> hash</c>

00:14:59.750 --> 00:14:59.760 align:start position:0%
array that means it's a hash
 

00:14:59.760 --> 00:15:02.310 align:start position:0%
array that means it's a hash
and<00:15:00.240><c> the</c><00:15:00.720><c> name</c><00:15:01.040><c> of</c><00:15:01.199><c> the</c><00:15:01.360><c> variable</c><00:15:02.000><c> would</c><00:15:02.160><c> be</c>

00:15:02.310 --> 00:15:02.320 align:start position:0%
and the name of the variable would be
 

00:15:02.320 --> 00:15:04.310 align:start position:0%
and the name of the variable would be
the<00:15:02.480><c> index</c><00:15:03.199><c> and</c><00:15:03.360><c> the</c><00:15:03.519><c> value</c><00:15:03.839><c> of</c><00:15:03.920><c> the</c><00:15:04.000><c> variable</c>

00:15:04.310 --> 00:15:04.320 align:start position:0%
the index and the value of the variable
 

00:15:04.320 --> 00:15:06.790 align:start position:0%
the index and the value of the variable
will<00:15:04.480><c> be</c><00:15:04.639><c> available</c><00:15:05.440><c> from</c><00:15:05.680><c> the</c><00:15:05.839><c> associative</c>

00:15:06.790 --> 00:15:06.800 align:start position:0%
will be available from the associative
 

00:15:06.800 --> 00:15:07.750 align:start position:0%
will be available from the associative
array

00:15:07.750 --> 00:15:07.760 align:start position:0%
array
 

00:15:07.760 --> 00:15:09.269 align:start position:0%
array
now<00:15:08.000><c> the</c><00:15:08.160><c> file</c><00:15:08.480><c> name</c><00:15:08.639><c> that</c><00:15:08.800><c> is</c><00:15:08.880><c> currently</c>

00:15:09.269 --> 00:15:09.279 align:start position:0%
now the file name that is currently
 

00:15:09.279 --> 00:15:11.189 align:start position:0%
now the file name that is currently
being<00:15:09.600><c> processed</c><00:15:10.079><c> is</c><00:15:10.240><c> available</c><00:15:10.800><c> using</c><00:15:11.120><c> the</c>

00:15:11.189 --> 00:15:11.199 align:start position:0%
being processed is available using the
 

00:15:11.199 --> 00:15:12.790 align:start position:0%
being processed is available using the
variable<00:15:11.519><c> file</c><00:15:11.760><c> name</c><00:15:12.000><c> which</c><00:15:12.240><c> means</c><00:15:12.399><c> that</c><00:15:12.639><c> if</c>

00:15:12.790 --> 00:15:12.800 align:start position:0%
variable file name which means that if
 

00:15:12.800 --> 00:15:14.949 align:start position:0%
variable file name which means that if
you<00:15:12.959><c> pass</c><00:15:13.279><c> on</c><00:15:13.680><c> multiple</c><00:15:14.160><c> file</c><00:15:14.399><c> names</c><00:15:14.720><c> on</c><00:15:14.800><c> the</c>

00:15:14.949 --> 00:15:14.959 align:start position:0%
you pass on multiple file names on the
 

00:15:14.959 --> 00:15:16.150 align:start position:0%
you pass on multiple file names on the
command<00:15:15.360><c> line</c>

00:15:16.150 --> 00:15:16.160 align:start position:0%
command line
 

00:15:16.160 --> 00:15:18.949 align:start position:0%
command line
then<00:15:16.880><c> each</c><00:15:17.279><c> time</c><00:15:17.519><c> the</c><00:15:17.920><c> execution</c><00:15:18.480><c> is</c><00:15:18.639><c> moving</c>

00:15:18.949 --> 00:15:18.959 align:start position:0%
then each time the execution is moving
 

00:15:18.959 --> 00:15:19.910 align:start position:0%
then each time the execution is moving
on

00:15:19.910 --> 00:15:19.920 align:start position:0%
on
 

00:15:19.920 --> 00:15:21.670 align:start position:0%
on
to<00:15:20.160><c> the</c><00:15:20.320><c> next</c><00:15:20.800><c> file</c>

00:15:21.670 --> 00:15:21.680 align:start position:0%
to the next file
 

00:15:21.680 --> 00:15:23.670 align:start position:0%
to the next file
then<00:15:21.920><c> the</c><00:15:22.160><c> variable</c><00:15:22.560><c> file</c><00:15:22.800><c> name</c><00:15:23.040><c> will</c><00:15:23.279><c> also</c><00:15:23.519><c> be</c>

00:15:23.670 --> 00:15:23.680 align:start position:0%
then the variable file name will also be
 

00:15:23.680 --> 00:15:24.710 align:start position:0%
then the variable file name will also be
reflecting

00:15:24.710 --> 00:15:24.720 align:start position:0%
reflecting
 

00:15:24.720 --> 00:15:26.150 align:start position:0%
reflecting
the<00:15:24.880><c> name</c><00:15:25.120><c> of</c><00:15:25.279><c> the</c><00:15:25.360><c> file</c><00:15:25.680><c> that</c><00:15:25.839><c> is</c><00:15:25.920><c> being</c>

00:15:26.150 --> 00:15:26.160 align:start position:0%
the name of the file that is being
 

00:15:26.160 --> 00:15:28.310 align:start position:0%
the name of the file that is being
processed

00:15:28.310 --> 00:15:28.320 align:start position:0%
processed
 

00:15:28.320 --> 00:15:30.790 align:start position:0%
processed
the<00:15:28.560><c> field</c><00:15:28.800><c> separator</c><00:15:29.759><c> the</c><00:15:29.920><c> number</c><00:15:30.160><c> of</c><00:15:30.320><c> fields</c>

00:15:30.790 --> 00:15:30.800 align:start position:0%
the field separator the number of fields
 

00:15:30.800 --> 00:15:33.430 align:start position:0%
the field separator the number of fields
in<00:15:30.959><c> the</c><00:15:31.040><c> current</c><00:15:31.360><c> record</c><00:15:31.759><c> as</c><00:15:32.000><c> split</c><00:15:32.399><c> by</c><00:15:32.720><c> the</c>

00:15:33.430 --> 00:15:33.440 align:start position:0%
in the current record as split by the
 

00:15:33.440 --> 00:15:35.590 align:start position:0%
in the current record as split by the
field<00:15:33.680><c> separator</c><00:15:34.320><c> on</c><00:15:34.399><c> that</c><00:15:34.639><c> record</c><00:15:35.040><c> how</c><00:15:35.199><c> many</c>

00:15:35.590 --> 00:15:35.600 align:start position:0%
field separator on that record how many
 

00:15:35.600 --> 00:15:38.150 align:start position:0%
field separator on that record how many
record<00:15:36.000><c> are</c><00:15:36.160><c> we</c><00:15:36.480><c> processing</c><00:15:37.120><c> currently</c>

00:15:38.150 --> 00:15:38.160 align:start position:0%
record are we processing currently
 

00:15:38.160 --> 00:15:40.550 align:start position:0%
record are we processing currently
and<00:15:38.240><c> then</c><00:15:38.480><c> what</c><00:15:38.720><c> is</c><00:15:38.800><c> a</c><00:15:39.279><c> output</c><00:15:39.680><c> format</c><00:15:40.240><c> to</c><00:15:40.399><c> be</c>

00:15:40.550 --> 00:15:40.560 align:start position:0%
and then what is a output format to be
 

00:15:40.560 --> 00:15:42.470 align:start position:0%
and then what is a output format to be
used<00:15:40.959><c> to</c><00:15:41.120><c> print</c><00:15:41.360><c> out</c><00:15:41.600><c> numbers</c><00:15:41.920><c> in</c><00:15:42.079><c> a</c><00:15:42.160><c> pretty</c>

00:15:42.470 --> 00:15:42.480 align:start position:0%
used to print out numbers in a pretty
 

00:15:42.480 --> 00:15:44.790 align:start position:0%
used to print out numbers in a pretty
manner<00:15:43.360><c> and</c><00:15:43.600><c> what</c><00:15:43.839><c> is</c><00:15:44.000><c> the</c><00:15:44.079><c> field</c><00:15:44.320><c> separator</c>

00:15:44.790 --> 00:15:44.800 align:start position:0%
manner and what is the field separator
 

00:15:44.800 --> 00:15:46.870 align:start position:0%
manner and what is the field separator
to<00:15:44.959><c> be</c><00:15:45.040><c> used</c><00:15:45.279><c> for</c><00:15:45.440><c> the</c><00:15:45.519><c> output</c><00:15:46.399><c> and</c><00:15:46.639><c> what</c>

00:15:46.870 --> 00:15:46.880 align:start position:0%
to be used for the output and what
 

00:15:46.880 --> 00:15:48.870 align:start position:0%
to be used for the output and what
should<00:15:47.040><c> be</c><00:15:47.120><c> the</c><00:15:47.199><c> record</c><00:15:47.519><c> separator</c><00:15:48.079><c> to</c><00:15:48.560><c> print</c>

00:15:48.870 --> 00:15:48.880 align:start position:0%
should be the record separator to print
 

00:15:48.880 --> 00:15:50.310 align:start position:0%
should be the record separator to print
the<00:15:49.040><c> output</c>

00:15:50.310 --> 00:15:50.320 align:start position:0%
the output
 

00:15:50.320 --> 00:15:53.269 align:start position:0%
the output
and<00:15:50.639><c> then</c><00:15:51.120><c> if</c><00:15:51.279><c> there</c><00:15:51.519><c> is</c><00:15:51.600><c> any</c><00:15:51.839><c> matching</c><00:15:52.560><c> of</c><00:15:53.040><c> the</c>

00:15:53.269 --> 00:15:53.279 align:start position:0%
and then if there is any matching of the
 

00:15:53.279 --> 00:15:55.189 align:start position:0%
and then if there is any matching of the
strings<00:15:53.680><c> done</c><00:15:54.079><c> then</c><00:15:54.480><c> what</c><00:15:54.639><c> was</c><00:15:54.800><c> the</c><00:15:54.880><c> length</c><00:15:55.120><c> of</c>

00:15:55.189 --> 00:15:55.199 align:start position:0%
strings done then what was the length of
 

00:15:55.199 --> 00:15:56.870 align:start position:0%
strings done then what was the length of
the<00:15:55.360><c> string</c><00:15:55.600><c> that</c><00:15:55.759><c> is</c><00:15:55.920><c> matched</c><00:15:56.399><c> what</c><00:15:56.639><c> is</c><00:15:56.720><c> the</c>

00:15:56.870 --> 00:15:56.880 align:start position:0%
the string that is matched what is the
 

00:15:56.880 --> 00:15:58.710 align:start position:0%
the string that is matched what is the
starting<00:15:57.279><c> point</c><00:15:58.000><c> what</c><00:15:58.160><c> is</c><00:15:58.240><c> the</c><00:15:58.399><c> starting</c>

00:15:58.710 --> 00:15:58.720 align:start position:0%
starting point what is the starting
 

00:15:58.720 --> 00:16:00.550 align:start position:0%
starting point what is the starting
position<00:15:59.120><c> of</c><00:15:59.199><c> that</c><00:15:59.440><c> particular</c><00:16:00.160><c> matched</c>

00:16:00.550 --> 00:16:00.560 align:start position:0%
position of that particular matched
 

00:16:00.560 --> 00:16:01.590 align:start position:0%
position of that particular matched
string

00:16:01.590 --> 00:16:01.600 align:start position:0%
string
 

00:16:01.600 --> 00:16:03.829 align:start position:0%
string
and<00:16:01.839><c> then</c><00:16:02.079><c> what</c><00:16:02.240><c> is</c><00:16:02.399><c> the</c><00:16:02.480><c> separator</c><00:16:03.440><c> to</c><00:16:03.600><c> be</c>

00:16:03.829 --> 00:16:03.839 align:start position:0%
and then what is the separator to be
 

00:16:03.839 --> 00:16:05.269 align:start position:0%
and then what is the separator to be
used<00:16:04.240><c> for</c>

00:16:05.269 --> 00:16:05.279 align:start position:0%
used for
 

00:16:05.279 --> 00:16:07.030 align:start position:0%
used for
the<00:16:05.600><c> subscripts</c><00:16:06.079><c> of</c><00:16:06.160><c> the</c><00:16:06.320><c> arrays</c><00:16:06.720><c> all</c><00:16:06.880><c> these</c>

00:16:07.030 --> 00:16:07.040 align:start position:0%
the subscripts of the arrays all these
 

00:16:07.040 --> 00:16:08.550 align:start position:0%
the subscripts of the arrays all these
can<00:16:07.199><c> be</c><00:16:07.360><c> customized</c>

00:16:08.550 --> 00:16:08.560 align:start position:0%
can be customized
 

00:16:08.560 --> 00:16:10.790 align:start position:0%
can be customized
using<00:16:08.880><c> built-in</c><00:16:09.199><c> variables</c><00:16:09.680><c> of</c><00:16:09.920><c> awk</c>

00:16:10.790 --> 00:16:10.800 align:start position:0%
using built-in variables of awk
 

00:16:10.800 --> 00:16:12.790 align:start position:0%
using built-in variables of awk
and<00:16:11.120><c> the</c><00:16:11.360><c> entire</c><00:16:11.680><c> record</c><00:16:12.079><c> as</c><00:16:12.240><c> we</c><00:16:12.399><c> have</c><00:16:12.560><c> just</c>

00:16:12.790 --> 00:16:12.800 align:start position:0%
and the entire record as we have just
 

00:16:12.800 --> 00:16:15.509 align:start position:0%
and the entire record as we have just
now<00:16:12.959><c> seen</c><00:16:13.279><c> is</c><00:16:13.519><c> available</c><00:16:14.079><c> as</c><00:16:14.320><c> a</c><00:16:14.399><c> dollar</c><00:16:14.800><c> zero</c>

00:16:15.509 --> 00:16:15.519 align:start position:0%
now seen is available as a dollar zero
 

00:16:15.519 --> 00:16:16.629 align:start position:0%
now seen is available as a dollar zero
and<00:16:15.680><c> then</c>

00:16:16.629 --> 00:16:16.639 align:start position:0%
and then
 

00:16:16.639 --> 00:16:18.389 align:start position:0%
and then
the<00:16:16.800><c> fields</c><00:16:17.040><c> are</c><00:16:17.199><c> available</c><00:16:17.600><c> as</c><00:16:17.839><c> dollar</c><00:16:18.160><c> one</c>

00:16:18.389 --> 00:16:18.399 align:start position:0%
the fields are available as dollar one
 

00:16:18.399 --> 00:16:20.470 align:start position:0%
the fields are available as dollar one
dollar<00:16:18.720><c> two</c><00:16:18.880><c> etcetera</c><00:16:19.279><c> so</c><00:16:19.519><c> dollar</c><00:16:19.920><c> ten</c><00:16:20.240><c> would</c>

00:16:20.470 --> 00:16:20.480 align:start position:0%
dollar two etcetera so dollar ten would
 

00:16:20.480 --> 00:16:22.389 align:start position:0%
dollar two etcetera so dollar ten would
refer<00:16:20.800><c> to</c><00:16:20.959><c> the</c><00:16:21.120><c> 10th</c><00:16:21.600><c> field</c>

00:16:22.389 --> 00:16:22.399 align:start position:0%
refer to the 10th field
 

00:16:22.399 --> 00:16:23.590 align:start position:0%
refer to the 10th field
in<00:16:22.560><c> the</c>

00:16:23.590 --> 00:16:23.600 align:start position:0%
in the
 

00:16:23.600 --> 00:16:25.430 align:start position:0%
in the
current<00:16:23.920><c> record</c><00:16:24.320><c> that</c><00:16:24.480><c> is</c><00:16:24.560><c> being</c><00:16:24.959><c> processed</c>

00:16:25.430 --> 00:16:25.440 align:start position:0%
current record that is being processed
 

00:16:25.440 --> 00:16:27.110 align:start position:0%
current record that is being processed
so<00:16:25.600><c> these</c><00:16:25.759><c> are</c><00:16:25.839><c> the</c><00:16:26.000><c> only</c><00:16:26.320><c> two</c>

00:16:27.110 --> 00:16:27.120 align:start position:0%
so these are the only two
 

00:16:27.120 --> 00:16:28.870 align:start position:0%
so these are the only two
variables<00:16:27.519><c> that</c><00:16:27.680><c> have</c><00:16:27.920><c> dollar</c><00:16:28.639><c> other</c>

00:16:28.870 --> 00:16:28.880 align:start position:0%
variables that have dollar other
 

00:16:28.880 --> 00:16:30.629 align:start position:0%
variables that have dollar other
variables<00:16:29.360><c> will</c><00:16:29.600><c> not</c><00:16:29.759><c> have</c><00:16:29.920><c> dollar</c><00:16:30.320><c> in</c><00:16:30.399><c> front</c>

00:16:30.629 --> 00:16:30.639 align:start position:0%
variables will not have dollar in front
 

00:16:30.639 --> 00:16:33.829 align:start position:0%
variables will not have dollar in front
of<00:16:30.720><c> their</c><00:16:30.959><c> name</c><00:16:31.680><c> so</c><00:16:31.920><c> here</c><00:16:32.160><c> is</c><00:16:32.560><c> a</c><00:16:33.040><c> way</c><00:16:33.279><c> by</c><00:16:33.440><c> which</c>

00:16:33.829 --> 00:16:33.839 align:start position:0%
of their name so here is a way by which
 

00:16:33.839 --> 00:16:34.949 align:start position:0%
of their name so here is a way by which
the

00:16:34.949 --> 00:16:34.959 align:start position:0%
the
 

00:16:34.959 --> 00:16:36.550 align:start position:0%
the
execution<00:16:35.519><c> of</c><00:16:35.680><c> aux</c><00:16:35.920><c> scripts</c><00:16:36.240><c> will</c><00:16:36.399><c> be</c>

00:16:36.550 --> 00:16:36.560 align:start position:0%
execution of aux scripts will be
 

00:16:36.560 --> 00:16:37.670 align:start position:0%
execution of aux scripts will be
happening

00:16:37.670 --> 00:16:37.680 align:start position:0%
happening
 

00:16:37.680 --> 00:16:40.710 align:start position:0%
happening
so<00:16:38.079><c> every</c><00:16:38.480><c> block</c><00:16:39.279><c> would</c><00:16:39.600><c> have</c><00:16:39.920><c> a</c><00:16:40.079><c> pattern</c><00:16:40.560><c> and</c>

00:16:40.710 --> 00:16:40.720 align:start position:0%
so every block would have a pattern and
 

00:16:40.720 --> 00:16:42.710 align:start position:0%
so every block would have a pattern and
then<00:16:40.959><c> a</c><00:16:41.040><c> procedure</c><00:16:41.600><c> procedure</c><00:16:42.079><c> containing</c>

00:16:42.710 --> 00:16:42.720 align:start position:0%
then a procedure procedure containing
 

00:16:42.720 --> 00:16:46.710 align:start position:0%
then a procedure procedure containing
the<00:16:42.959><c> code</c><00:16:43.759><c> and</c><00:16:44.480><c> enclosed</c><00:16:45.040><c> by</c><00:16:45.279><c> the</c><00:16:45.519><c> braces</c><00:16:46.480><c> the</c>

00:16:46.710 --> 00:16:46.720 align:start position:0%
the code and enclosed by the braces the
 

00:16:46.720 --> 00:16:48.150 align:start position:0%
the code and enclosed by the braces the
pattern<00:16:47.120><c> can</c><00:16:47.279><c> be</c>

00:16:48.150 --> 00:16:48.160 align:start position:0%
pattern can be
 

00:16:48.160 --> 00:16:50.550 align:start position:0%
pattern can be
keywords<00:16:48.639><c> like</c><00:16:48.959><c> begin</c><00:16:49.440><c> or</c><00:16:49.680><c> end</c><00:16:50.079><c> as</c><00:16:50.240><c> we</c><00:16:50.399><c> have</c>

00:16:50.550 --> 00:16:50.560 align:start position:0%
keywords like begin or end as we have
 

00:16:50.560 --> 00:16:52.710 align:start position:0%
keywords like begin or end as we have
seen<00:16:50.800><c> just</c><00:16:51.040><c> now</c><00:16:51.519><c> it</c><00:16:51.680><c> could</c><00:16:51.839><c> be</c><00:16:52.079><c> any</c><00:16:52.320><c> general</c>

00:16:52.710 --> 00:16:52.720 align:start position:0%
seen just now it could be any general
 

00:16:52.720 --> 00:16:53.829 align:start position:0%
seen just now it could be any general
expression

00:16:53.829 --> 00:16:53.839 align:start position:0%
expression
 

00:16:53.839 --> 00:16:55.430 align:start position:0%
expression
or<00:16:54.079><c> it</c><00:16:54.160><c> could</c><00:16:54.320><c> be</c><00:16:54.399><c> a</c><00:16:54.480><c> regular</c><00:16:54.800><c> expression</c><00:16:55.360><c> it</c>

00:16:55.430 --> 00:16:55.440 align:start position:0%
or it could be a regular expression it
 

00:16:55.440 --> 00:16:57.670 align:start position:0%
or it could be a regular expression it
could<00:16:55.600><c> be</c><00:16:55.759><c> a</c><00:16:55.920><c> relational</c><00:16:56.399><c> expression</c><00:16:57.279><c> or</c><00:16:57.519><c> it</c>

00:16:57.670 --> 00:16:57.680 align:start position:0%
could be a relational expression or it
 

00:16:57.680 --> 00:16:59.110 align:start position:0%
could be a relational expression or it
could<00:16:57.839><c> even</c><00:16:58.079><c> be</c><00:16:58.240><c> a</c><00:16:58.320><c> pattern</c><00:16:58.639><c> matching</c>

00:16:59.110 --> 00:16:59.120 align:start position:0%
could even be a pattern matching
 

00:16:59.120 --> 00:17:00.230 align:start position:0%
could even be a pattern matching
expression

00:17:00.230 --> 00:17:00.240 align:start position:0%
expression
 

00:17:00.240 --> 00:17:02.949 align:start position:0%
expression
and<00:17:00.560><c> one</c><00:17:00.720><c> can</c><00:17:00.959><c> also</c><00:17:01.199><c> give</c><00:17:01.440><c> a</c><00:17:01.600><c> range</c>

00:17:02.949 --> 00:17:02.959 align:start position:0%
and one can also give a range
 

00:17:02.959 --> 00:17:05.510 align:start position:0%
and one can also give a range
of<00:17:03.279><c> the</c><00:17:03.759><c> records</c><00:17:04.240><c> to</c><00:17:04.319><c> be</c><00:17:04.480><c> processed</c><00:17:05.120><c> using</c><00:17:05.439><c> a</c>

00:17:05.510 --> 00:17:05.520 align:start position:0%
of the records to be processed using a
 

00:17:05.520 --> 00:17:06.870 align:start position:0%
of the records to be processed using a
comma

00:17:06.870 --> 00:17:06.880 align:start position:0%
comma
 

00:17:06.880 --> 00:17:09.189 align:start position:0%
comma
and<00:17:07.039><c> the</c><00:17:07.199><c> procedure</c><00:17:07.839><c> is</c><00:17:08.000><c> like</c><00:17:08.240><c> any</c><00:17:08.480><c> code</c><00:17:08.720><c> block</c>

00:17:09.189 --> 00:17:09.199 align:start position:0%
and the procedure is like any code block
 

00:17:09.199 --> 00:17:10.710 align:start position:0%
and the procedure is like any code block
you<00:17:09.360><c> could</c><00:17:09.600><c> have</c><00:17:09.839><c> things</c><00:17:10.160><c> like</c><00:17:10.319><c> variable</c>

00:17:10.710 --> 00:17:10.720 align:start position:0%
you could have things like variable
 

00:17:10.720 --> 00:17:12.549 align:start position:0%
you could have things like variable
assignment<00:17:11.360><c> array</c><00:17:11.679><c> assignments</c><00:17:12.240><c> input</c>

00:17:12.549 --> 00:17:12.559 align:start position:0%
assignment array assignments input
 

00:17:12.559 --> 00:17:15.750 align:start position:0%
assignment array assignments input
output<00:17:12.880><c> commands</c><00:17:13.839><c> and</c><00:17:14.160><c> built</c><00:17:14.400><c> in</c><00:17:14.799><c> functions</c>

00:17:15.750 --> 00:17:15.760 align:start position:0%
output commands and built in functions
 

00:17:15.760 --> 00:17:17.189 align:start position:0%
output commands and built in functions
including<00:17:16.079><c> mathematical</c><00:17:16.640><c> functions</c><00:17:17.120><c> and</c>

00:17:17.189 --> 00:17:17.199 align:start position:0%
including mathematical functions and
 

00:17:17.199 --> 00:17:18.710 align:start position:0%
including mathematical functions and
then<00:17:17.439><c> user</c><00:17:17.679><c> defined</c><00:17:18.000><c> functions</c><00:17:18.400><c> which</c><00:17:18.640><c> you</c>

00:17:18.710 --> 00:17:18.720 align:start position:0%
then user defined functions which you
 

00:17:18.720 --> 00:17:20.870 align:start position:0%
then user defined functions which you
can<00:17:18.959><c> write</c><00:17:19.679><c> and</c><00:17:19.839><c> even</c><00:17:20.079><c> keep</c><00:17:20.319><c> in</c><00:17:20.400><c> a</c><00:17:20.480><c> separate</c>

00:17:20.870 --> 00:17:20.880 align:start position:0%
can write and even keep in a separate
 

00:17:20.880 --> 00:17:22.949 align:start position:0%
can write and even keep in a separate
file<00:17:21.120><c> as</c><00:17:21.199><c> a</c><00:17:21.280><c> library</c><00:17:22.000><c> and</c><00:17:22.079><c> then</c><00:17:22.319><c> control</c><00:17:22.720><c> loops</c>

00:17:22.949 --> 00:17:22.959 align:start position:0%
file as a library and then control loops
 

00:17:22.959 --> 00:17:25.669 align:start position:0%
file as a library and then control loops
like<00:17:23.199><c> you</c><00:17:23.280><c> know</c><00:17:23.520><c> for</c><00:17:23.760><c> loop</c><00:17:24.319><c> while</c><00:17:24.640><c> loop</c>

00:17:25.669 --> 00:17:25.679 align:start position:0%
like you know for loop while loop
 

00:17:25.679 --> 00:17:27.510 align:start position:0%
like you know for loop while loop
if<00:17:25.919><c> loop</c><00:17:26.160><c> and</c><00:17:26.319><c> so</c><00:17:26.480><c> on</c><00:17:26.799><c> so</c>

00:17:27.510 --> 00:17:27.520 align:start position:0%
if loop and so on so
 

00:17:27.520 --> 00:17:29.190 align:start position:0%
if loop and so on so
the<00:17:27.760><c> entire</c>

00:17:29.190 --> 00:17:29.200 align:start position:0%
the entire
 

00:17:29.200 --> 00:17:30.870 align:start position:0%
the entire
programming<00:17:29.679><c> environment</c><00:17:30.320><c> is</c><00:17:30.400><c> available</c>

00:17:30.870 --> 00:17:30.880 align:start position:0%
programming environment is available
 

00:17:30.880 --> 00:17:33.270 align:start position:0%
programming environment is available
that<00:17:31.120><c> you</c><00:17:31.200><c> can</c><00:17:31.440><c> use</c><00:17:31.840><c> in</c><00:17:31.919><c> the</c><00:17:32.080><c> procedure</c><00:17:33.120><c> and</c>

00:17:33.270 --> 00:17:33.280 align:start position:0%
that you can use in the procedure and
 

00:17:33.280 --> 00:17:34.390 align:start position:0%
that you can use in the procedure and
then<00:17:33.520><c> this</c>

00:17:34.390 --> 00:17:34.400 align:start position:0%
then this
 

00:17:34.400 --> 00:17:36.470 align:start position:0%
then this
procedure<00:17:34.960><c> will</c><00:17:35.120><c> be</c><00:17:35.280><c> applied</c><00:17:35.679><c> to</c>

00:17:36.470 --> 00:17:36.480 align:start position:0%
procedure will be applied to
 

00:17:36.480 --> 00:17:38.549 align:start position:0%
procedure will be applied to
all<00:17:36.720><c> those</c><00:17:37.039><c> records</c><00:17:37.600><c> which</c><00:17:38.080><c> match</c><00:17:38.400><c> the</c>

00:17:38.549 --> 00:17:38.559 align:start position:0%
all those records which match the
 

00:17:38.559 --> 00:17:40.070 align:start position:0%
all those records which match the
particular<00:17:39.120><c> pattern</c><00:17:39.440><c> that</c><00:17:39.600><c> you</c><00:17:39.679><c> are</c><00:17:39.760><c> giving</c>

00:17:40.070 --> 00:17:40.080 align:start position:0%
particular pattern that you are giving
 

00:17:40.080 --> 00:17:41.590 align:start position:0%
particular pattern that you are giving
in<00:17:40.160><c> the</c><00:17:40.320><c> front</c><00:17:40.799><c> and</c><00:17:40.960><c> this</c><00:17:41.120><c> pattern</c><00:17:41.440><c> is</c>

00:17:41.590 --> 00:17:41.600 align:start position:0%
in the front and this pattern is
 

00:17:41.600 --> 00:17:42.950 align:start position:0%
in the front and this pattern is
optional<00:17:41.919><c> which</c><00:17:42.080><c> means</c><00:17:42.320><c> that</c><00:17:42.480><c> if</c><00:17:42.559><c> you</c><00:17:42.720><c> don't</c>

00:17:42.950 --> 00:17:42.960 align:start position:0%
optional which means that if you don't
 

00:17:42.960 --> 00:17:45.590 align:start position:0%
optional which means that if you don't
give<00:17:43.600><c> then</c><00:17:43.919><c> the</c><00:17:44.240><c> code</c><00:17:44.559><c> block</c>

00:17:45.590 --> 00:17:45.600 align:start position:0%
give then the code block
 

00:17:45.600 --> 00:17:47.270 align:start position:0%
give then the code block
will<00:17:45.760><c> be</c><00:17:45.919><c> called</c><00:17:46.160><c> as</c><00:17:46.240><c> a</c><00:17:46.320><c> default</c><00:17:46.799><c> block</c><00:17:47.039><c> and</c><00:17:47.120><c> it</c>

00:17:47.270 --> 00:17:47.280 align:start position:0%
will be called as a default block and it
 

00:17:47.280 --> 00:17:48.630 align:start position:0%
will be called as a default block and it
will<00:17:47.360><c> be</c><00:17:47.520><c> applied</c><00:17:47.919><c> to</c>

00:17:48.630 --> 00:17:48.640 align:start position:0%
will be applied to
 

00:17:48.640 --> 00:17:50.070 align:start position:0%
will be applied to
every<00:17:49.039><c> line</c>

00:17:50.070 --> 00:17:50.080 align:start position:0%
every line
 

00:17:50.080 --> 00:17:52.390 align:start position:0%
every line
in<00:17:50.240><c> the</c><00:17:50.400><c> input</c><00:17:50.720><c> string</c><00:17:51.200><c> and</c><00:17:51.440><c> if</c><00:17:51.600><c> you</c><00:17:51.679><c> have</c>

00:17:52.390 --> 00:17:52.400 align:start position:0%
in the input string and if you have
 

00:17:52.400 --> 00:17:54.150 align:start position:0%
in the input string and if you have
more<00:17:52.559><c> than</c><00:17:52.799><c> one</c><00:17:52.960><c> such</c><00:17:53.200><c> block</c><00:17:53.600><c> then</c><00:17:53.840><c> all</c><00:17:54.080><c> of</c>

00:17:54.150 --> 00:17:54.160 align:start position:0%
more than one such block then all of
 

00:17:54.160 --> 00:17:56.230 align:start position:0%
more than one such block then all of
them<00:17:54.320><c> will</c><00:17:54.480><c> be</c><00:17:55.039><c> applied</c><00:17:55.520><c> in</c><00:17:55.679><c> the</c><00:17:55.760><c> sequence</c>

00:17:56.230 --> 00:17:56.240 align:start position:0%
them will be applied in the sequence
 

00:17:56.240 --> 00:18:00.310 align:start position:0%
them will be applied in the sequence
they<00:17:56.400><c> appear</c><00:17:56.720><c> in</c><00:17:56.799><c> the</c><00:17:56.960><c> script</c><00:17:57.360><c> file</c>

00:18:00.310 --> 00:18:00.320 align:start position:0%
they appear in the script file
 

00:18:00.320 --> 00:18:02.950 align:start position:0%
they appear in the script file
of<00:18:00.880><c> what</c><00:18:01.039><c> we</c><00:18:01.200><c> have</c><00:18:01.600><c> seen</c><00:18:01.919><c> for</c><00:18:02.080><c> the</c><00:18:02.240><c> blocks</c><00:18:02.559><c> are</c>

00:18:02.950 --> 00:18:02.960 align:start position:0%
of what we have seen for the blocks are
 

00:18:02.960 --> 00:18:05.590 align:start position:0%
of what we have seen for the blocks are
repeated<00:18:03.520><c> here</c><00:18:04.240><c> for</c><00:18:04.480><c> you</c><00:18:04.720><c> to</c>

00:18:05.590 --> 00:18:05.600 align:start position:0%
repeated here for you to
 

00:18:05.600 --> 00:18:07.990 align:start position:0%
repeated here for you to
remember<00:18:06.160><c> so</c><00:18:06.320><c> the</c><00:18:06.480><c> begin</c><00:18:07.039><c> the</c><00:18:07.200><c> begin</c><00:18:07.520><c> block</c>

00:18:07.990 --> 00:18:08.000 align:start position:0%
remember so the begin the begin block
 

00:18:08.000 --> 00:18:10.630 align:start position:0%
remember so the begin the begin block
would<00:18:08.160><c> be</c><00:18:08.320><c> executed</c><00:18:09.120><c> once</c><00:18:09.840><c> before</c><00:18:10.160><c> the</c><00:18:10.320><c> files</c>

00:18:10.630 --> 00:18:10.640 align:start position:0%
would be executed once before the files
 

00:18:10.640 --> 00:18:12.950 align:start position:0%
would be executed once before the files
are<00:18:10.799><c> read</c><00:18:11.440><c> the</c><00:18:11.600><c> end</c><00:18:11.840><c> block</c><00:18:12.160><c> will</c><00:18:12.320><c> be</c><00:18:12.400><c> executed</c>

00:18:12.950 --> 00:18:12.960 align:start position:0%
are read the end block will be executed
 

00:18:12.960 --> 00:18:15.029 align:start position:0%
are read the end block will be executed
once<00:18:13.360><c> after</c><00:18:13.600><c> the</c><00:18:13.760><c> files</c><00:18:14.080><c> are</c><00:18:14.240><c> read</c><00:18:14.559><c> and</c><00:18:14.720><c> both</c>

00:18:15.029 --> 00:18:15.039 align:start position:0%
once after the files are read and both
 

00:18:15.039 --> 00:18:17.350 align:start position:0%
once after the files are read and both
of<00:18:15.120><c> these</c><00:18:15.520><c> can</c><00:18:15.760><c> come</c><00:18:16.080><c> anywhere</c><00:18:16.480><c> in</c><00:18:16.559><c> the</c><00:18:16.640><c> script</c>

00:18:17.350 --> 00:18:17.360 align:start position:0%
of these can come anywhere in the script
 

00:18:17.360 --> 00:18:19.029 align:start position:0%
of these can come anywhere in the script
they<00:18:17.520><c> can</c><00:18:17.679><c> come</c><00:18:17.919><c> multiple</c><00:18:18.400><c> times</c><00:18:18.799><c> and</c><00:18:18.880><c> they</c>

00:18:19.029 --> 00:18:19.039 align:start position:0%
they can come multiple times and they
 

00:18:19.039 --> 00:18:21.350 align:start position:0%
they can come multiple times and they
can<00:18:19.200><c> also</c><00:18:19.440><c> contain</c><00:18:19.919><c> program</c><00:18:20.400><c> code</c><00:18:20.640><c> within</c>

00:18:21.350 --> 00:18:21.360 align:start position:0%
can also contain program code within
 

00:18:21.360 --> 00:18:22.710 align:start position:0%
can also contain program code within
those<00:18:21.679><c> blocks</c>

00:18:22.710 --> 00:18:22.720 align:start position:0%
those blocks
 

00:18:22.720 --> 00:18:25.029 align:start position:0%
those blocks
and<00:18:23.039><c> such</c><00:18:23.280><c> program</c><00:18:23.679><c> code</c><00:18:23.919><c> is</c><00:18:24.000><c> typically</c><00:18:24.640><c> used</c>

00:18:25.029 --> 00:18:25.039 align:start position:0%
and such program code is typically used
 

00:18:25.039 --> 00:18:26.470 align:start position:0%
and such program code is typically used
to<00:18:25.360><c> do</c><00:18:25.600><c> some</c>

00:18:26.470 --> 00:18:26.480 align:start position:0%
to do some
 

00:18:26.480 --> 00:18:28.390 align:start position:0%
to do some
initialization<00:18:27.120><c> of</c><00:18:27.280><c> variables</c><00:18:27.679><c> but</c>

00:18:28.390 --> 00:18:28.400 align:start position:0%
initialization of variables but
 

00:18:28.400 --> 00:18:30.150 align:start position:0%
initialization of variables but
it<00:18:28.559><c> could</c><00:18:28.880><c> also</c><00:18:29.280><c> have</c>

00:18:30.150 --> 00:18:30.160 align:start position:0%
it could also have
 

00:18:30.160 --> 00:18:31.510 align:start position:0%
it could also have
anything<00:18:30.559><c> else</c><00:18:30.799><c> that</c><00:18:30.960><c> you</c><00:18:31.039><c> would</c><00:18:31.200><c> like</c><00:18:31.360><c> to</c>

00:18:31.510 --> 00:18:31.520 align:start position:0%
anything else that you would like to
 

00:18:31.520 --> 00:18:32.870 align:start position:0%
anything else that you would like to
compute

00:18:32.870 --> 00:18:32.880 align:start position:0%
compute
 

00:18:32.880 --> 00:18:35.110 align:start position:0%
compute
at<00:18:33.039><c> the</c><00:18:33.120><c> beginning</c><00:18:33.520><c> of</c><00:18:33.840><c> the</c>

00:18:35.110 --> 00:18:35.120 align:start position:0%
at the beginning of the
 

00:18:35.120 --> 00:18:37.350 align:start position:0%
at the beginning of the
processing<00:18:35.679><c> of</c><00:18:35.840><c> input</c><00:18:36.160><c> stream</c><00:18:36.720><c> code</c><00:18:37.039><c> blocks</c>

00:18:37.350 --> 00:18:37.360 align:start position:0%
processing of input stream code blocks
 

00:18:37.360 --> 00:18:39.430 align:start position:0%
processing of input stream code blocks
that<00:18:37.679><c> come</c><00:18:37.840><c> with</c><00:18:38.080><c> a</c><00:18:38.160><c> pattern</c>

00:18:39.430 --> 00:18:39.440 align:start position:0%
that come with a pattern
 

00:18:39.440 --> 00:18:42.070 align:start position:0%
that come with a pattern
they<00:18:39.600><c> can</c><00:18:40.080><c> have</c><00:18:40.400><c> the</c><00:18:40.640><c> patterns</c><00:18:41.120><c> combined</c><00:18:41.679><c> with</c>

00:18:42.070 --> 00:18:42.080 align:start position:0%
they can have the patterns combined with
 

00:18:42.080 --> 00:18:43.190 align:start position:0%
they can have the patterns combined with
the

00:18:43.190 --> 00:18:43.200 align:start position:0%
the
 

00:18:43.200 --> 00:18:45.990 align:start position:0%
the
logical<00:18:43.760><c> and</c><00:18:44.000><c> or</c><00:18:44.160><c> logical</c><00:18:44.720><c> or</c><00:18:45.200><c> or</c><00:18:45.440><c> negation</c>

00:18:45.990 --> 00:18:46.000 align:start position:0%
logical and or logical or or negation
 

00:18:46.000 --> 00:18:47.350 align:start position:0%
logical and or logical or or negation
operators

00:18:47.350 --> 00:18:47.360 align:start position:0%
operators
 

00:18:47.360 --> 00:18:48.870 align:start position:0%
operators
and<00:18:47.679><c> you</c><00:18:47.760><c> could</c><00:18:47.919><c> also</c><00:18:48.160><c> give</c><00:18:48.320><c> a</c><00:18:48.480><c> range</c><00:18:48.799><c> of</c>

00:18:48.870 --> 00:18:48.880 align:start position:0%
and you could also give a range of
 

00:18:48.880 --> 00:18:50.950 align:start position:0%
and you could also give a range of
records<00:18:49.280><c> that</c><00:18:49.440><c> could</c><00:18:49.600><c> be</c><00:18:49.919><c> processed</c>

00:18:50.950 --> 00:18:50.960 align:start position:0%
records that could be processed
 

00:18:50.960 --> 00:18:53.830 align:start position:0%
records that could be processed
using<00:18:51.280><c> a</c><00:18:51.360><c> comma</c><00:18:51.919><c> you</c><00:18:52.160><c> could</c>

00:18:53.830 --> 00:18:53.840 align:start position:0%
using a comma you could
 

00:18:53.840 --> 00:18:55.669 align:start position:0%
using a comma you could
you<00:18:54.000><c> would</c><00:18:54.080><c> have</c><00:18:54.240><c> already</c><00:18:54.480><c> seen</c><00:18:54.720><c> that</c><00:18:55.120><c> these</c>

00:18:55.669 --> 00:18:55.679 align:start position:0%
you would have already seen that these
 

00:18:55.679 --> 00:18:57.190 align:start position:0%
you would have already seen that these
blocks<00:18:56.160><c> are</c>

00:18:57.190 --> 00:18:57.200 align:start position:0%
blocks are
 

00:18:57.200 --> 00:18:59.750 align:start position:0%
blocks are
processed<00:18:57.679><c> for</c><00:18:58.000><c> each</c><00:18:58.320><c> record</c><00:18:59.120><c> every</c><00:18:59.440><c> time</c><00:18:59.600><c> the</c>

00:18:59.750 --> 00:18:59.760 align:start position:0%
processed for each record every time the
 

00:18:59.760 --> 00:19:02.230 align:start position:0%
processed for each record every time the
pattern<00:19:00.080><c> evaluates</c><00:19:00.799><c> to</c><00:19:01.039><c> true</c><00:19:01.679><c> and</c><00:19:01.919><c> in</c><00:19:02.000><c> case</c>

00:19:02.230 --> 00:19:02.240 align:start position:0%
pattern evaluates to true and in case
 

00:19:02.240 --> 00:19:04.549 align:start position:0%
pattern evaluates to true and in case
the<00:19:02.320><c> pattern</c><00:19:02.720><c> is</c><00:19:02.960><c> empty</c><00:19:03.280><c> then</c><00:19:03.760><c> the</c><00:19:04.000><c> code</c><00:19:04.240><c> block</c>

00:19:04.549 --> 00:19:04.559 align:start position:0%
the pattern is empty then the code block
 

00:19:04.559 --> 00:19:07.029 align:start position:0%
the pattern is empty then the code block
is<00:19:04.640><c> executed</c><00:19:05.200><c> for</c><00:19:05.520><c> every</c><00:19:05.840><c> record</c><00:19:06.559><c> and</c><00:19:06.720><c> as</c><00:19:06.960><c> you</c>

00:19:07.029 --> 00:19:07.039 align:start position:0%
is executed for every record and as you
 

00:19:07.039 --> 00:19:08.630 align:start position:0%
is executed for every record and as you
can<00:19:07.200><c> see</c><00:19:07.440><c> that</c><00:19:07.840><c> one</c>

00:19:08.630 --> 00:19:08.640 align:start position:0%
can see that one
 

00:19:08.640 --> 00:19:10.390 align:start position:0%
can see that one
need<00:19:08.880><c> not</c><00:19:09.120><c> mention</c><00:19:09.440><c> what</c><00:19:09.679><c> is</c><00:19:09.760><c> a</c><00:19:09.919><c> pattern</c><00:19:10.320><c> you</c>

00:19:10.390 --> 00:19:10.400 align:start position:0%
need not mention what is a pattern you
 

00:19:10.400 --> 00:19:11.830 align:start position:0%
need not mention what is a pattern you
could<00:19:10.559><c> actually</c><00:19:10.960><c> just</c>

00:19:11.830 --> 00:19:11.840 align:start position:0%
could actually just
 

00:19:11.840 --> 00:19:15.029 align:start position:0%
could actually just
give<00:19:12.559><c> a</c><00:19:12.799><c> set</c><00:19:13.039><c> of</c><00:19:13.600><c> instructions</c><00:19:14.400><c> between</c>

00:19:15.029 --> 00:19:15.039 align:start position:0%
give a set of instructions between
 

00:19:15.039 --> 00:19:17.110 align:start position:0%
give a set of instructions between
braces<00:19:15.600><c> and</c><00:19:15.679><c> that</c><00:19:15.840><c> will</c><00:19:16.000><c> be</c><00:19:16.160><c> interpreted</c><00:19:16.799><c> as</c><00:19:17.039><c> a</c>

00:19:17.110 --> 00:19:17.120 align:start position:0%
braces and that will be interpreted as a
 

00:19:17.120 --> 00:19:18.470 align:start position:0%
braces and that will be interpreted as a
default

00:19:18.470 --> 00:19:18.480 align:start position:0%
default
 

00:19:18.480 --> 00:19:20.789 align:start position:0%
default
action<00:19:19.120><c> that</c><00:19:19.360><c> will</c><00:19:19.440><c> be</c><00:19:19.600><c> performed</c><00:19:20.080><c> on</c>

00:19:20.789 --> 00:19:20.799 align:start position:0%
action that will be performed on
 

00:19:20.799 --> 00:19:23.029 align:start position:0%
action that will be performed on
every<00:19:21.200><c> line</c><00:19:21.440><c> of</c><00:19:21.520><c> the</c><00:19:21.679><c> input</c><00:19:22.000><c> stream</c><00:19:22.640><c> so</c><00:19:22.799><c> there</c>

00:19:23.029 --> 00:19:23.039 align:start position:0%
every line of the input stream so there
 

00:19:23.039 --> 00:19:24.710 align:start position:0%
every line of the input stream so there
are<00:19:23.120><c> many</c><00:19:23.440><c> operators</c><00:19:24.000><c> that</c><00:19:24.160><c> are</c><00:19:24.240><c> available</c>

00:19:24.710 --> 00:19:24.720 align:start position:0%
are many operators that are available
 

00:19:24.720 --> 00:19:27.510 align:start position:0%
are many operators that are available
which<00:19:25.280><c> make</c><00:19:25.520><c> the</c><00:19:25.840><c> awk</c><00:19:26.160><c> language</c><00:19:26.640><c> almost</c><00:19:27.360><c> a</c>

00:19:27.510 --> 00:19:27.520 align:start position:0%
which make the awk language almost a
 

00:19:27.520 --> 00:19:29.750 align:start position:0%
which make the awk language almost a
complete<00:19:28.080><c> programming</c><00:19:28.559><c> language</c><00:19:29.440><c> you</c><00:19:29.600><c> have</c>

00:19:29.750 --> 00:19:29.760 align:start position:0%
complete programming language you have
 

00:19:29.760 --> 00:19:32.150 align:start position:0%
complete programming language you have
got<00:19:30.000><c> assignment</c><00:19:30.480><c> operators</c><00:19:30.960><c> which</c><00:19:31.200><c> are</c><00:19:31.760><c> given</c>

00:19:32.150 --> 00:19:32.160 align:start position:0%
got assignment operators which are given
 

00:19:32.160 --> 00:19:33.110 align:start position:0%
got assignment operators which are given
in<00:19:32.240><c> the</c>

00:19:33.110 --> 00:19:33.120 align:start position:0%
in the
 

00:19:33.120 --> 00:19:35.110 align:start position:0%
in the
sequence<00:19:33.600><c> of</c><00:19:33.760><c> precedence</c><00:19:34.640><c> then</c><00:19:34.799><c> there</c><00:19:35.039><c> are</c>

00:19:35.110 --> 00:19:35.120 align:start position:0%
sequence of precedence then there are
 

00:19:35.120 --> 00:19:37.750 align:start position:0%
sequence of precedence then there are
logical<00:19:35.600><c> operators</c><00:19:36.559><c> algebraic</c><00:19:37.120><c> operators</c>

00:19:37.750 --> 00:19:37.760 align:start position:0%
logical operators algebraic operators
 

00:19:37.760 --> 00:19:39.990 align:start position:0%
logical operators algebraic operators
that<00:19:37.919><c> will</c><00:19:38.080><c> help</c><00:19:38.320><c> you</c><00:19:38.400><c> to</c><00:19:38.559><c> do</c><00:19:38.799><c> arithmetic</c>

00:19:39.990 --> 00:19:40.000 align:start position:0%
that will help you to do arithmetic
 

00:19:40.000 --> 00:19:42.870 align:start position:0%
that will help you to do arithmetic
and<00:19:40.400><c> relational</c><00:19:40.799><c> operators</c><00:19:41.440><c> for</c><00:19:41.760><c> the</c><00:19:41.919><c> strings</c>

00:19:42.870 --> 00:19:42.880 align:start position:0%
and relational operators for the strings
 

00:19:42.880 --> 00:19:46.710 align:start position:0%
and relational operators for the strings
and<00:19:43.120><c> for</c><00:19:43.280><c> comparison</c><00:19:43.840><c> purposes</c>

00:19:46.710 --> 00:19:46.720 align:start position:0%
 
 

00:19:46.720 --> 00:19:48.710 align:start position:0%
 
operators<00:19:47.200><c> are</c><00:19:47.360><c> elaborated</c><00:19:48.000><c> here</c><00:19:48.240><c> you</c><00:19:48.480><c> could</c>

00:19:48.710 --> 00:19:48.720 align:start position:0%
operators are elaborated here you could
 

00:19:48.720 --> 00:19:50.310 align:start position:0%
operators are elaborated here you could
also<00:19:49.039><c> have</c><00:19:49.280><c> the</c>

00:19:50.310 --> 00:19:50.320 align:start position:0%
also have the
 

00:19:50.320 --> 00:19:52.390 align:start position:0%
also have the
if<00:19:50.559><c> then</c><00:19:50.799><c> else</c><00:19:51.039><c> loop</c><00:19:51.520><c> in</c><00:19:51.679><c> a</c>

00:19:52.390 --> 00:19:52.400 align:start position:0%
if then else loop in a
 

00:19:52.400 --> 00:19:54.789 align:start position:0%
if then else loop in a
succinct<00:19:52.960><c> form</c><00:19:53.280><c> as</c><00:19:53.440><c> it</c><00:19:53.600><c> in</c><00:19:54.080><c> as</c><00:19:54.320><c> available</c><00:19:54.720><c> in</c>

00:19:54.789 --> 00:19:54.799 align:start position:0%
succinct form as it in as available in
 

00:19:54.799 --> 00:19:56.789 align:start position:0%
succinct form as it in as available in
the<00:19:54.960><c> c</c><00:19:55.120><c> language</c><00:19:55.520><c> here</c><00:19:55.760><c> also</c><00:19:56.080><c> so</c><00:19:56.320><c> expression</c>

00:19:56.789 --> 00:19:56.799 align:start position:0%
the c language here also so expression
 

00:19:56.799 --> 00:19:58.950 align:start position:0%
the c language here also so expression
question<00:19:57.200><c> mark</c><00:19:57.520><c> a</c><00:19:57.840><c> colon</c><00:19:58.240><c> b</c>

00:19:58.950 --> 00:19:58.960 align:start position:0%
question mark a colon b
 

00:19:58.960 --> 00:20:00.870 align:start position:0%
question mark a colon b
if<00:19:59.039><c> the</c><00:19:59.200><c> expression</c><00:19:59.600><c> is</c><00:20:00.000><c> true</c><00:20:00.240><c> then</c><00:20:00.480><c> a</c><00:20:00.640><c> will</c><00:20:00.799><c> be</c>

00:20:00.870 --> 00:20:00.880 align:start position:0%
if the expression is true then a will be
 

00:20:00.880 --> 00:20:02.789 align:start position:0%
if the expression is true then a will be
returned<00:20:01.440><c> if</c><00:20:01.600><c> it</c><00:20:01.679><c> is</c><00:20:01.840><c> false</c><00:20:02.080><c> then</c><00:20:02.320><c> b</c><00:20:02.559><c> will</c><00:20:02.720><c> be</c>

00:20:02.789 --> 00:20:02.799 align:start position:0%
returned if it is false then b will be
 

00:20:02.799 --> 00:20:04.870 align:start position:0%
returned if it is false then b will be
written<00:20:03.440><c> so</c><00:20:03.679><c> such</c>

00:20:04.870 --> 00:20:04.880 align:start position:0%
written so such
 

00:20:04.880 --> 00:20:06.470 align:start position:0%
written so such
concise<00:20:05.360><c> notations</c>

00:20:06.470 --> 00:20:06.480 align:start position:0%
concise notations
 

00:20:06.480 --> 00:20:08.070 align:start position:0%
concise notations
for<00:20:06.720><c> conditional</c><00:20:07.200><c> expression</c><00:20:07.760><c> are</c><00:20:07.919><c> also</c>

00:20:08.070 --> 00:20:08.080 align:start position:0%
for conditional expression are also
 

00:20:08.080 --> 00:20:10.390 align:start position:0%
for conditional expression are also
available<00:20:08.480><c> in</c><00:20:08.799><c> awk</c><00:20:09.280><c> the</c><00:20:09.440><c> availability</c><00:20:10.000><c> of</c><00:20:10.240><c> any</c>

00:20:10.390 --> 00:20:10.400 align:start position:0%
available in awk the availability of any
 

00:20:10.400 --> 00:20:13.110 align:start position:0%
available in awk the availability of any
element<00:20:10.720><c> in</c><00:20:10.880><c> an</c><00:20:11.039><c> array</c><00:20:11.360><c> can</c><00:20:11.600><c> also</c><00:20:11.760><c> be</c><00:20:11.919><c> tested</c>

00:20:13.110 --> 00:20:13.120 align:start position:0%
element in an array can also be tested
 

00:20:13.120 --> 00:20:14.870 align:start position:0%
element in an array can also be tested
so<00:20:13.280><c> it</c><00:20:13.440><c> will</c><00:20:13.520><c> be</c><00:20:13.600><c> tested</c><00:20:13.919><c> against</c><00:20:14.240><c> the</c><00:20:14.400><c> indices</c>

00:20:14.870 --> 00:20:14.880 align:start position:0%
so it will be tested against the indices
 

00:20:14.880 --> 00:20:16.390 align:start position:0%
so it will be tested against the indices
of<00:20:14.960><c> the</c><00:20:15.120><c> array</c>

00:20:16.390 --> 00:20:16.400 align:start position:0%
of the array
 

00:20:16.400 --> 00:20:19.510 align:start position:0%
of the array
and<00:20:17.039><c> you</c><00:20:17.200><c> could</c><00:20:17.440><c> do</c><00:20:17.600><c> a</c><00:20:17.760><c> comparison</c>

00:20:19.510 --> 00:20:19.520 align:start position:0%
and you could do a comparison
 

00:20:19.520 --> 00:20:20.710 align:start position:0%
and you could do a comparison
to

00:20:20.710 --> 00:20:20.720 align:start position:0%
to
 

00:20:20.720 --> 00:20:22.870 align:start position:0%
to
do<00:20:20.880><c> a</c><00:20:20.960><c> regular</c><00:20:21.360><c> expression</c><00:20:21.760><c> match</c><00:20:22.559><c> you</c><00:20:22.720><c> could</c>

00:20:22.870 --> 00:20:22.880 align:start position:0%
do a regular expression match you could
 

00:20:22.880 --> 00:20:24.549 align:start position:0%
do a regular expression match you could
also<00:20:23.039><c> negate</c><00:20:23.440><c> that</c><00:20:23.600><c> particular</c><00:20:24.159><c> regular</c>

00:20:24.549 --> 00:20:24.559 align:start position:0%
also negate that particular regular
 

00:20:24.559 --> 00:20:25.909 align:start position:0%
also negate that particular regular
expression<00:20:25.039><c> match</c>

00:20:25.909 --> 00:20:25.919 align:start position:0%
expression match
 

00:20:25.919 --> 00:20:28.230 align:start position:0%
expression match
you<00:20:26.159><c> also</c><00:20:26.400><c> have</c><00:20:26.640><c> the</c><00:20:26.799><c> unary</c><00:20:27.280><c> operators</c><00:20:28.000><c> for</c>

00:20:28.230 --> 00:20:28.240 align:start position:0%
you also have the unary operators for
 

00:20:28.240 --> 00:20:30.470 align:start position:0%
you also have the unary operators for
arithmetic<00:20:28.799><c> such</c><00:20:29.039><c> as</c><00:20:29.200><c> the</c><00:20:29.360><c> plus</c><00:20:29.679><c> plus</c>

00:20:30.470 --> 00:20:30.480 align:start position:0%
arithmetic such as the plus plus
 

00:20:30.480 --> 00:20:32.310 align:start position:0%
arithmetic such as the plus plus
for<00:20:30.720><c> the</c><00:20:30.960><c> increment</c><00:20:31.360><c> and</c><00:20:31.520><c> minus</c><00:20:31.840><c> minus</c><00:20:32.159><c> per</c>

00:20:32.310 --> 00:20:32.320 align:start position:0%
for the increment and minus minus per
 

00:20:32.320 --> 00:20:34.390 align:start position:0%
for the increment and minus minus per
decrement<00:20:33.360><c> you</c><00:20:33.520><c> could</c><00:20:33.679><c> use</c><00:20:33.919><c> it</c><00:20:34.000><c> both</c><00:20:34.240><c> as</c><00:20:34.320><c> a</c>

00:20:34.390 --> 00:20:34.400 align:start position:0%
decrement you could use it both as a
 

00:20:34.400 --> 00:20:36.390 align:start position:0%
decrement you could use it both as a
prefix<00:20:34.880><c> as</c><00:20:35.039><c> well</c><00:20:35.200><c> as</c><00:20:35.360><c> post</c><00:20:35.600><c> fix</c><00:20:36.000><c> so</c><00:20:36.159><c> you</c><00:20:36.240><c> could</c>

00:20:36.390 --> 00:20:36.400 align:start position:0%
prefix as well as post fix so you could
 

00:20:36.400 --> 00:20:38.870 align:start position:0%
prefix as well as post fix so you could
have<00:20:36.559><c> plus</c><00:20:36.799><c> plus</c><00:20:37.039><c> a</c><00:20:37.280><c> or</c><00:20:37.440><c> a</c><00:20:37.679><c> plus</c><00:20:37.919><c> plus</c><00:20:38.559><c> and</c><00:20:38.720><c> they</c>

00:20:38.870 --> 00:20:38.880 align:start position:0%
have plus plus a or a plus plus and they
 

00:20:38.880 --> 00:20:41.350 align:start position:0%
have plus plus a or a plus plus and they
both<00:20:39.120><c> will</c><00:20:39.280><c> work</c><00:20:40.000><c> and</c><00:20:40.159><c> of</c><00:20:40.320><c> course</c><00:20:40.480><c> a</c><00:20:40.559><c> dollar</c><00:20:40.960><c> is</c>

00:20:41.350 --> 00:20:41.360 align:start position:0%
both will work and of course a dollar is
 

00:20:41.360 --> 00:20:43.590 align:start position:0%
both will work and of course a dollar is
for<00:20:41.520><c> referencing</c><00:20:42.080><c> a</c><00:20:42.159><c> particular</c><00:20:42.640><c> field</c>

00:20:43.590 --> 00:20:43.600 align:start position:0%
for referencing a particular field
 

00:20:43.600 --> 00:20:45.029 align:start position:0%
for referencing a particular field
which<00:20:43.919><c> is</c><00:20:44.000><c> coming</c><00:20:44.320><c> from</c><00:20:44.480><c> the</c><00:20:44.640><c> inbuilt</c>

00:20:45.029 --> 00:20:45.039 align:start position:0%
which is coming from the inbuilt
 

00:20:45.039 --> 00:20:46.789 align:start position:0%
which is coming from the inbuilt
variables

00:20:46.789 --> 00:20:46.799 align:start position:0%
variables
 

00:20:46.799 --> 00:20:48.950 align:start position:0%
variables
and<00:20:47.120><c> another</c><00:20:47.520><c> special</c><00:20:48.000><c> operator</c><00:20:48.480><c> is</c><00:20:48.640><c> a</c><00:20:48.720><c> blank</c>

00:20:48.950 --> 00:20:48.960 align:start position:0%
and another special operator is a blank
 

00:20:48.960 --> 00:20:51.110 align:start position:0%
and another special operator is a blank
space<00:20:49.520><c> so</c><00:20:49.840><c> if</c><00:20:50.000><c> you</c><00:20:50.159><c> have</c>

00:20:51.110 --> 00:20:51.120 align:start position:0%
space so if you have
 

00:20:51.120 --> 00:20:53.190 align:start position:0%
space so if you have
two<00:20:51.360><c> variables</c><00:20:51.919><c> separated</c><00:20:52.400><c> by</c><00:20:52.559><c> a</c><00:20:52.640><c> blank</c><00:20:53.039><c> then</c>

00:20:53.190 --> 00:20:53.200 align:start position:0%
two variables separated by a blank then
 

00:20:53.200 --> 00:20:55.590 align:start position:0%
two variables separated by a blank then
it<00:20:53.360><c> will</c><00:20:53.440><c> be</c><00:20:53.600><c> interpreted</c><00:20:54.159><c> as</c><00:20:54.799><c> you</c><00:20:55.039><c> wanted</c><00:20:55.440><c> to</c>

00:20:55.590 --> 00:20:55.600 align:start position:0%
it will be interpreted as you wanted to
 

00:20:55.600 --> 00:20:58.470 align:start position:0%
it will be interpreted as you wanted to
concatenate<00:20:56.559><c> those</c><00:20:56.880><c> two</c>

00:20:58.470 --> 00:20:58.480 align:start position:0%
concatenate those two
 

00:20:58.480 --> 00:21:00.950 align:start position:0%
concatenate those two
strings<00:20:59.280><c> and</c><00:20:59.520><c> in</c><00:20:59.679><c> case</c><00:20:59.919><c> you</c>

00:21:00.950 --> 00:21:00.960 align:start position:0%
strings and in case you
 

00:21:00.960 --> 00:21:01.830 align:start position:0%
strings and in case you
add

00:21:01.830 --> 00:21:01.840 align:start position:0%
add
 

00:21:01.840 --> 00:21:04.070 align:start position:0%
add
0<00:21:02.240><c> to</c><00:21:02.640><c> a</c><00:21:02.799><c> string</c><00:21:03.200><c> then</c><00:21:03.360><c> the</c><00:21:03.520><c> string</c><00:21:03.760><c> will</c><00:21:03.919><c> be</c>

00:21:04.070 --> 00:21:04.080 align:start position:0%
0 to a string then the string will be
 

00:21:04.080 --> 00:21:06.149 align:start position:0%
0 to a string then the string will be
interpreted<00:21:04.640><c> as</c><00:21:04.799><c> a</c><00:21:04.880><c> number</c>

00:21:06.149 --> 00:21:06.159 align:start position:0%
interpreted as a number
 

00:21:06.159 --> 00:21:11.830 align:start position:0%
interpreted as a number
while<00:21:06.480><c> assigning</c><00:21:06.960><c> it</c><00:21:07.120><c> to</c><00:21:07.440><c> the</c><00:21:07.600><c> left</c><00:21:07.840><c> hand</c><00:21:08.080><c> side</c>

00:21:11.830 --> 00:21:11.840 align:start position:0%
 
 

00:21:11.840 --> 00:21:13.990 align:start position:0%
 
now<00:21:12.000><c> the</c><00:21:12.159><c> number</c><00:21:12.400><c> of</c><00:21:12.720><c> functions</c><00:21:13.280><c> and</c><00:21:13.600><c> commands</c>

00:21:13.990 --> 00:21:14.000 align:start position:0%
now the number of functions and commands
 

00:21:14.000 --> 00:21:15.909 align:start position:0%
now the number of functions and commands
that<00:21:14.159><c> are</c><00:21:14.240><c> available</c><00:21:14.720><c> is</c><00:21:14.799><c> quite</c><00:21:15.120><c> rich</c><00:21:15.679><c> so</c><00:21:15.840><c> we</c>

00:21:15.909 --> 00:21:15.919 align:start position:0%
that are available is quite rich so we
 

00:21:15.919 --> 00:21:19.510 align:start position:0%
that are available is quite rich so we
have<00:21:16.080><c> got</c><00:21:16.320><c> the</c><00:21:16.880><c> arithmetic</c><00:21:17.760><c> operations</c>

00:21:19.510 --> 00:21:19.520 align:start position:0%
have got the arithmetic operations
 

00:21:19.520 --> 00:21:21.990 align:start position:0%
have got the arithmetic operations
such<00:21:19.760><c> as</c><00:21:19.919><c> the</c><00:21:20.640><c> sine</c><00:21:20.960><c> cost</c><00:21:21.360><c> and</c><00:21:21.520><c> exponential</c>

00:21:21.990 --> 00:21:22.000 align:start position:0%
such as the sine cost and exponential
 

00:21:22.000 --> 00:21:24.310 align:start position:0%
such as the sine cost and exponential
log<00:21:22.240><c> etc</c><00:21:23.120><c> and</c><00:21:23.200><c> then</c><00:21:23.360><c> you</c><00:21:23.440><c> have</c><00:21:23.600><c> got</c><00:21:23.919><c> string</c>

00:21:24.310 --> 00:21:24.320 align:start position:0%
log etc and then you have got string
 

00:21:24.320 --> 00:21:26.230 align:start position:0%
log etc and then you have got string
operations<00:21:24.960><c> which</c><00:21:25.200><c> are</c><00:21:25.360><c> for</c><00:21:25.679><c> splitting</c><00:21:26.080><c> the</c>

00:21:26.230 --> 00:21:26.240 align:start position:0%
operations which are for splitting the
 

00:21:26.240 --> 00:21:27.350 align:start position:0%
operations which are for splitting the
strings<00:21:26.720><c> or</c>

00:21:27.350 --> 00:21:27.360 align:start position:0%
strings or
 

00:21:27.360 --> 00:21:28.950 align:start position:0%
strings or
getting<00:21:27.679><c> a</c><00:21:27.840><c> substring</c>

00:21:28.950 --> 00:21:28.960 align:start position:0%
getting a substring
 

00:21:28.960 --> 00:21:30.870 align:start position:0%
getting a substring
converting<00:21:29.440><c> the</c><00:21:29.520><c> case</c><00:21:29.840><c> of</c><00:21:30.000><c> the</c><00:21:30.320><c> characters</c><00:21:30.799><c> in</c>

00:21:30.870 --> 00:21:30.880 align:start position:0%
converting the case of the characters in
 

00:21:30.880 --> 00:21:31.990 align:start position:0%
converting the case of the characters in
the<00:21:31.039><c> string</c>

00:21:31.990 --> 00:21:32.000 align:start position:0%
the string
 

00:21:32.000 --> 00:21:34.390 align:start position:0%
the string
and<00:21:32.320><c> matching</c><00:21:32.799><c> a</c>

00:21:34.390 --> 00:21:34.400 align:start position:0%
and matching a
 

00:21:34.400 --> 00:21:35.990 align:start position:0%
and matching a
regular<00:21:34.799><c> expression</c><00:21:35.120><c> with</c><00:21:35.360><c> the</c><00:21:35.600><c> string</c><00:21:35.919><c> and</c>

00:21:35.990 --> 00:21:36.000 align:start position:0%
regular expression with the string and
 

00:21:36.000 --> 00:21:38.310 align:start position:0%
regular expression with the string and
so<00:21:36.240><c> on</c><00:21:36.559><c> and</c><00:21:36.720><c> you</c><00:21:36.880><c> also</c><00:21:37.120><c> have</c><00:21:37.360><c> loops</c>

00:21:38.310 --> 00:21:38.320 align:start position:0%
so on and you also have loops
 

00:21:38.320 --> 00:21:41.029 align:start position:0%
so on and you also have loops
that<00:21:38.559><c> use</c><00:21:38.880><c> the</c><00:21:38.960><c> control</c><00:21:39.440><c> flow</c>

00:21:41.029 --> 00:21:41.039 align:start position:0%
that use the control flow
 

00:21:41.039 --> 00:21:42.950 align:start position:0%
that use the control flow
various<00:21:41.440><c> type</c><00:21:41.679><c> of</c><00:21:41.919><c> loops</c><00:21:42.159><c> that</c><00:21:42.320><c> you</c><00:21:42.480><c> have</c><00:21:42.640><c> seen</c>

00:21:42.950 --> 00:21:42.960 align:start position:0%
various type of loops that you have seen
 

00:21:42.960 --> 00:21:44.710 align:start position:0%
various type of loops that you have seen
in<00:21:43.280><c> shell</c><00:21:43.520><c> scripts</c>

00:21:44.710 --> 00:21:44.720 align:start position:0%
in shell scripts
 

00:21:44.720 --> 00:21:46.870 align:start position:0%
in shell scripts
all<00:21:44.880><c> those</c><00:21:45.120><c> are</c><00:21:45.200><c> also</c><00:21:45.440><c> available</c><00:21:45.760><c> in</c><00:21:45.919><c> awk</c>

00:21:46.870 --> 00:21:46.880 align:start position:0%
all those are also available in awk
 

00:21:46.880 --> 00:21:48.470 align:start position:0%
all those are also available in awk
input<00:21:47.200><c> output</c><00:21:47.520><c> functions</c><00:21:47.840><c> are</c><00:21:47.919><c> available</c><00:21:48.320><c> for</c>

00:21:48.470 --> 00:21:48.480 align:start position:0%
input output functions are available for
 

00:21:48.480 --> 00:21:51.029 align:start position:0%
input output functions are available for
printing<00:21:49.200><c> or</c><00:21:49.440><c> to</c><00:21:49.760><c> read</c>

00:21:51.029 --> 00:21:51.039 align:start position:0%
printing or to read
 

00:21:51.039 --> 00:21:52.710 align:start position:0%
printing or to read
input<00:21:51.440><c> from</c><00:21:51.760><c> a</c><00:21:51.919><c> shell</c><00:21:52.080><c> command</c><00:21:52.480><c> that</c><00:21:52.559><c> is</c>

00:21:52.710 --> 00:21:52.720 align:start position:0%
input from a shell command that is
 

00:21:52.720 --> 00:21:54.549 align:start position:0%
input from a shell command that is
executed<00:21:53.120><c> in</c><00:21:53.280><c> the</c><00:21:53.360><c> background</c>

00:21:54.549 --> 00:21:54.559 align:start position:0%
executed in the background
 

00:21:54.559 --> 00:21:57.029 align:start position:0%
executed in the background
and<00:21:54.880><c> you</c><00:21:55.039><c> also</c><00:21:55.440><c> have</c><00:21:55.760><c> ability</c><00:21:56.159><c> to</c><00:21:56.320><c> write</c><00:21:56.720><c> your</c>

00:21:57.029 --> 00:21:57.039 align:start position:0%
and you also have ability to write your
 

00:21:57.039 --> 00:21:59.430 align:start position:0%
and you also have ability to write your
own<00:21:57.200><c> functions</c><00:21:58.320><c> and</c><00:21:58.480><c> bitwise</c><00:21:58.880><c> operators</c><00:21:59.280><c> are</c>

00:21:59.430 --> 00:21:59.440 align:start position:0%
own functions and bitwise operators are
 

00:21:59.440 --> 00:22:01.830 align:start position:0%
own functions and bitwise operators are
also<00:21:59.600><c> available</c><00:22:00.080><c> for</c><00:22:00.240><c> fast</c><00:22:00.559><c> execution</c>

00:22:01.830 --> 00:22:01.840 align:start position:0%
also available for fast execution
 

00:22:01.840 --> 00:22:04.630 align:start position:0%
also available for fast execution
so<00:22:02.000><c> that</c><00:22:02.240><c> way</c><00:22:02.400><c> the</c><00:22:03.039><c> awk</c><00:22:03.360><c> language</c><00:22:03.760><c> is</c>

00:22:04.630 --> 00:22:04.640 align:start position:0%
so that way the awk language is
 

00:22:04.640 --> 00:22:06.549 align:start position:0%
so that way the awk language is
fairly<00:22:05.039><c> comprehensive</c>

00:22:06.549 --> 00:22:06.559 align:start position:0%
fairly comprehensive
 

00:22:06.559 --> 00:22:08.070 align:start position:0%
fairly comprehensive
and<00:22:06.720><c> if</c><00:22:06.880><c> you</c><00:22:07.039><c> learn</c><00:22:07.280><c> it</c>

00:22:08.070 --> 00:22:08.080 align:start position:0%
and if you learn it
 

00:22:08.080 --> 00:22:10.149 align:start position:0%
and if you learn it
understanding<00:22:08.640><c> the</c><00:22:08.720><c> way</c><00:22:08.880><c> it</c><00:22:09.039><c> executes</c>

00:22:10.149 --> 00:22:10.159 align:start position:0%
understanding the way it executes
 

00:22:10.159 --> 00:22:12.390 align:start position:0%
understanding the way it executes
then<00:22:10.320><c> you</c><00:22:10.400><c> can</c><00:22:10.559><c> put</c><00:22:10.720><c> it</c><00:22:10.799><c> to</c><00:22:10.960><c> a</c><00:22:11.039><c> very</c><00:22:11.280><c> good</c><00:22:11.520><c> use</c>

00:22:12.390 --> 00:22:12.400 align:start position:0%
then you can put it to a very good use
 

00:22:12.400 --> 00:22:15.909 align:start position:0%
then you can put it to a very good use
now<00:22:12.559><c> let</c><00:22:12.720><c> us</c><00:22:12.960><c> look</c><00:22:13.120><c> at</c><00:22:13.520><c> the</c><00:22:14.000><c> other</c><00:22:14.240><c> examples</c>

00:22:15.909 --> 00:22:15.919 align:start position:0%
now let us look at the other examples
 

00:22:15.919 --> 00:22:23.029 align:start position:0%
now let us look at the other examples
to<00:22:16.080><c> illustrate</c><00:22:16.559><c> the</c><00:22:16.799><c> execution</c><00:22:17.280><c> model</c><00:22:17.600><c> of</c><00:22:17.840><c> awk</c>

00:22:23.029 --> 00:22:23.039 align:start position:0%
 
 

00:22:23.039 --> 00:22:25.270 align:start position:0%
 
so<00:22:23.280><c> here</c><00:22:23.520><c> is</c><00:22:23.679><c> a</c><00:22:23.760><c> code</c><00:22:24.159><c> which</c>

00:22:25.270 --> 00:22:25.280 align:start position:0%
so here is a code which
 

00:22:25.280 --> 00:22:28.390 align:start position:0%
so here is a code which
tells<00:22:25.679><c> you</c><00:22:26.320><c> how</c><00:22:26.480><c> to</c><00:22:26.720><c> use</c><00:22:27.039><c> the</c><00:22:27.280><c> variables</c>

00:22:28.390 --> 00:22:28.400 align:start position:0%
tells you how to use the variables
 

00:22:28.400 --> 00:22:30.710 align:start position:0%
tells you how to use the variables
so<00:22:28.880><c> here</c><00:22:29.200><c> the</c><00:22:29.360><c> dollar</c><00:22:29.760><c> zero</c><00:22:30.240><c> would</c><00:22:30.400><c> give</c><00:22:30.559><c> you</c>

00:22:30.710 --> 00:22:30.720 align:start position:0%
so here the dollar zero would give you
 

00:22:30.720 --> 00:22:32.470 align:start position:0%
so here the dollar zero would give you
the<00:22:30.960><c> entire</c><00:22:31.440><c> record</c>

00:22:32.470 --> 00:22:32.480 align:start position:0%
the entire record
 

00:22:32.480 --> 00:22:33.750 align:start position:0%
the entire record
that<00:22:32.720><c> is</c><00:22:32.799><c> the</c><00:22:32.960><c> whole</c>

00:22:33.750 --> 00:22:33.760 align:start position:0%
that is the whole
 

00:22:33.760 --> 00:22:35.510 align:start position:0%
that is the whole
line<00:22:34.000><c> that</c><00:22:34.240><c> has</c><00:22:34.400><c> been</c><00:22:34.640><c> read</c>

00:22:35.510 --> 00:22:35.520 align:start position:0%
line that has been read
 

00:22:35.520 --> 00:22:37.350 align:start position:0%
line that has been read
and<00:22:36.159><c> fnr</c>

00:22:37.350 --> 00:22:37.360 align:start position:0%
and fnr
 

00:22:37.360 --> 00:22:38.230 align:start position:0%
and fnr
would

00:22:38.230 --> 00:22:38.240 align:start position:0%
would
 

00:22:38.240 --> 00:22:40.470 align:start position:0%
would
tell<00:22:38.480><c> you</c><00:22:39.039><c> how</c><00:22:39.200><c> manyth</c><00:22:39.679><c> line</c><00:22:40.080><c> are</c><00:22:40.240><c> we</c>

00:22:40.470 --> 00:22:40.480 align:start position:0%
tell you how manyth line are we
 

00:22:40.480 --> 00:22:42.070 align:start position:0%
tell you how manyth line are we
currently<00:22:40.960><c> processing</c>

00:22:42.070 --> 00:22:42.080 align:start position:0%
currently processing
 

00:22:42.080 --> 00:22:44.230 align:start position:0%
currently processing
and<00:22:42.480><c> that</c><00:22:42.799><c> line</c><00:22:43.039><c> is</c><00:22:43.200><c> split</c><00:22:43.600><c> according</c><00:22:43.919><c> to</c><00:22:44.080><c> the</c>

00:22:44.230 --> 00:22:44.240 align:start position:0%
and that line is split according to the
 

00:22:44.240 --> 00:22:46.789 align:start position:0%
and that line is split according to the
default<00:22:44.799><c> field</c><00:22:45.039><c> separator</c><00:22:45.520><c> namely</c><00:22:45.840><c> the</c><00:22:46.000><c> space</c>

00:22:46.789 --> 00:22:46.799 align:start position:0%
default field separator namely the space
 

00:22:46.799 --> 00:22:48.630 align:start position:0%
default field separator namely the space
and<00:22:47.039><c> as</c><00:22:47.280><c> per</c><00:22:47.520><c> that</c><00:22:47.679><c> splitting</c><00:22:48.159><c> how</c><00:22:48.320><c> many</c>

00:22:48.630 --> 00:22:48.640 align:start position:0%
and as per that splitting how many
 

00:22:48.640 --> 00:22:50.070 align:start position:0%
and as per that splitting how many
fields<00:22:48.960><c> are</c><00:22:49.120><c> available</c><00:22:49.520><c> in</c><00:22:49.600><c> the</c><00:22:49.760><c> current</c>

00:22:50.070 --> 00:22:50.080 align:start position:0%
fields are available in the current
 

00:22:50.080 --> 00:22:52.149 align:start position:0%
fields are available in the current
record<00:22:50.880><c> so</c><00:22:51.120><c> you</c><00:22:51.280><c> could</c><00:22:51.520><c> see</c><00:22:51.679><c> these</c><00:22:51.919><c> three</c>

00:22:52.149 --> 00:22:52.159 align:start position:0%
record so you could see these three
 

00:22:52.159 --> 00:22:54.310 align:start position:0%
record so you could see these three
lines<00:22:52.480><c> being</c><00:22:52.640><c> repeated</c><00:22:53.120><c> for</c><00:22:53.440><c> every</c><00:22:53.840><c> input</c>

00:22:54.310 --> 00:22:54.320 align:start position:0%
lines being repeated for every input
 

00:22:54.320 --> 00:22:55.190 align:start position:0%
lines being repeated for every input
line

00:22:55.190 --> 00:22:55.200 align:start position:0%
line
 

00:22:55.200 --> 00:22:57.270 align:start position:0%
line
and<00:22:55.280><c> then</c><00:22:55.520><c> these</c><00:22:55.840><c> two</c>

00:22:57.270 --> 00:22:57.280 align:start position:0%
and then these two
 

00:22:57.280 --> 00:22:59.510 align:start position:0%
and then these two
being<00:22:57.840><c> done</c><00:22:58.080><c> only</c><00:22:58.559><c> once</c>

00:22:59.510 --> 00:22:59.520 align:start position:0%
being done only once
 

00:22:59.520 --> 00:23:00.710 align:start position:0%
being done only once
at<00:22:59.679><c> the</c><00:22:59.760><c> beginning</c><00:23:00.159><c> and</c><00:23:00.320><c> at</c><00:23:00.400><c> the</c><00:23:00.559><c> end</c>

00:23:00.710 --> 00:23:00.720 align:start position:0%
at the beginning and at the end
 

00:23:00.720 --> 00:23:01.990 align:start position:0%
at the beginning and at the end
respectively

00:23:01.990 --> 00:23:02.000 align:start position:0%
respectively
 

00:23:02.000 --> 00:23:05.350 align:start position:0%
respectively
so<00:23:02.320><c> the</c><00:23:02.559><c> input</c><00:23:03.039><c> file</c><00:23:03.520><c> which</c><00:23:03.760><c> contains</c><00:23:04.320><c> the</c>

00:23:05.350 --> 00:23:05.360 align:start position:0%
so the input file which contains the
 

00:23:05.360 --> 00:23:09.110 align:start position:0%
so the input file which contains the
records<00:23:06.159><c> that</c><00:23:06.400><c> are</c><00:23:06.559><c> being</c><00:23:06.799><c> processed</c><00:23:07.280><c> is</c><00:23:07.440><c> here</c>

00:23:09.110 --> 00:23:09.120 align:start position:0%
records that are being processed is here
 

00:23:09.120 --> 00:23:11.110 align:start position:0%
records that are being processed is here
so<00:23:09.280><c> here</c><00:23:09.520><c> is</c><00:23:09.679><c> input</c><00:23:09.919><c> file</c><00:23:10.159><c> so</c><00:23:10.320><c> you</c><00:23:10.480><c> have</c><00:23:10.640><c> got</c>

00:23:11.110 --> 00:23:11.120 align:start position:0%
so here is input file so you have got
 

00:23:11.120 --> 00:23:13.350 align:start position:0%
so here is input file so you have got
three<00:23:11.360><c> lines</c><00:23:11.600><c> with</c><00:23:11.919><c> three</c><00:23:12.159><c> different</c>

00:23:13.350 --> 00:23:13.360 align:start position:0%
three lines with three different
 

00:23:13.360 --> 00:23:14.789 align:start position:0%
three lines with three different
number<00:23:13.679><c> of</c><00:23:13.840><c> fields</c>

00:23:14.789 --> 00:23:14.799 align:start position:0%
number of fields
 

00:23:14.799 --> 00:23:16.630 align:start position:0%
number of fields
so<00:23:15.039><c> that</c><00:23:15.200><c> we</c><00:23:15.360><c> can</c><00:23:15.520><c> illustrate</c><00:23:16.080><c> that</c><00:23:16.400><c> through</c>

00:23:16.630 --> 00:23:16.640 align:start position:0%
so that we can illustrate that through
 

00:23:16.640 --> 00:23:18.149 align:start position:0%
so that we can illustrate that through
the<00:23:16.720><c> output</c><00:23:17.120><c> so</c><00:23:17.360><c> let</c><00:23:17.520><c> us</c><00:23:17.600><c> go</c><00:23:17.760><c> ahead</c><00:23:18.000><c> and</c>

00:23:18.149 --> 00:23:18.159 align:start position:0%
the output so let us go ahead and
 

00:23:18.159 --> 00:23:19.830 align:start position:0%
the output so let us go ahead and
execute<00:23:18.640><c> that</c>

00:23:19.830 --> 00:23:19.840 align:start position:0%
execute that
 

00:23:19.840 --> 00:23:21.590 align:start position:0%
execute that
so<00:23:20.000><c> when</c><00:23:20.159><c> you</c><00:23:20.400><c> execute</c><00:23:20.880><c> you</c><00:23:20.960><c> can</c><00:23:21.120><c> see</c><00:23:21.360><c> from</c>

00:23:21.590 --> 00:23:21.600 align:start position:0%
so when you execute you can see from
 

00:23:21.600 --> 00:23:22.710 align:start position:0%
so when you execute you can see from
here

00:23:22.710 --> 00:23:22.720 align:start position:0%
here
 

00:23:22.720 --> 00:23:24.149 align:start position:0%
here
that

00:23:24.149 --> 00:23:24.159 align:start position:0%
that
 

00:23:24.159 --> 00:23:26.470 align:start position:0%
that
the<00:23:24.320><c> begin</c><00:23:24.720><c> action</c><00:23:25.440><c> was</c><00:23:25.679><c> performed</c><00:23:26.240><c> at</c><00:23:26.320><c> the</c>

00:23:26.470 --> 00:23:26.480 align:start position:0%
the begin action was performed at the
 

00:23:26.480 --> 00:23:27.510 align:start position:0%
the begin action was performed at the
beginning

00:23:27.510 --> 00:23:27.520 align:start position:0%
beginning
 

00:23:27.520 --> 00:23:29.990 align:start position:0%
beginning
after<00:23:27.840><c> that</c><00:23:28.080><c> we</c><00:23:28.240><c> have</c><00:23:28.400><c> got</c><00:23:28.799><c> the</c><00:23:29.039><c> pattern</c><00:23:29.440><c> of</c>

00:23:29.990 --> 00:23:30.000 align:start position:0%
after that we have got the pattern of
 

00:23:30.000 --> 00:23:33.110 align:start position:0%
after that we have got the pattern of
three<00:23:30.480><c> lines</c><00:23:30.880><c> output</c><00:23:31.600><c> for</c><00:23:31.840><c> every</c><00:23:32.480><c> line</c><00:23:32.799><c> of</c><00:23:32.880><c> the</c>

00:23:33.110 --> 00:23:33.120 align:start position:0%
three lines output for every line of the
 

00:23:33.120 --> 00:23:35.430 align:start position:0%
three lines output for every line of the
input<00:23:33.440><c> stream</c><00:23:34.159><c> so</c><00:23:34.480><c> here</c><00:23:34.720><c> it</c><00:23:34.880><c> says</c><00:23:35.120><c> that</c><00:23:35.360><c> the</c>

00:23:35.430 --> 00:23:35.440 align:start position:0%
input stream so here it says that the
 

00:23:35.440 --> 00:23:36.870 align:start position:0%
input stream so here it says that the
number<00:23:35.679><c> of</c><00:23:35.760><c> fields</c><00:23:36.080><c> is</c><00:23:36.240><c> four</c><00:23:36.480><c> you</c><00:23:36.559><c> can</c><00:23:36.720><c> see</c>

00:23:36.870 --> 00:23:36.880 align:start position:0%
number of fields is four you can see
 

00:23:36.880 --> 00:23:39.590 align:start position:0%
number of fields is four you can see
line<00:23:37.120><c> one</c><00:23:37.440><c> word</c><00:23:37.760><c> one</c><00:23:38.000><c> a</c><00:23:38.240><c> word</c><00:23:38.480><c> one</c><00:23:38.720><c> b</c><00:23:38.880><c> one</c><00:23:39.280><c> word</c>

00:23:39.590 --> 00:23:39.600 align:start position:0%
line one word one a word one b one word
 

00:23:39.600 --> 00:23:40.549 align:start position:0%
line one word one a word one b one word
one

00:23:40.549 --> 00:23:40.559 align:start position:0%
one
 

00:23:40.559 --> 00:23:41.430 align:start position:0%
one
b

00:23:41.430 --> 00:23:41.440 align:start position:0%
b
 

00:23:41.440 --> 00:23:43.269 align:start position:0%
b
so<00:23:41.600><c> you</c><00:23:41.679><c> have</c><00:23:41.840><c> got</c><00:23:42.080><c> like</c><00:23:42.320><c> there</c><00:23:42.559><c> are</c><00:23:42.880><c> there</c><00:23:43.120><c> are</c>

00:23:43.269 --> 00:23:43.279 align:start position:0%
so you have got like there are there are
 

00:23:43.279 --> 00:23:45.430 align:start position:0%
so you have got like there are there are
four<00:23:43.600><c> fields</c><00:23:43.840><c> that</c><00:23:44.080><c> are</c><00:23:44.159><c> being</c><00:23:44.400><c> reported</c><00:23:45.120><c> and</c>

00:23:45.430 --> 00:23:45.440 align:start position:0%
four fields that are being reported and
 

00:23:45.440 --> 00:23:47.669 align:start position:0%
four fields that are being reported and
this<00:23:45.600><c> is</c><00:23:45.760><c> the</c><00:23:45.919><c> first</c><00:23:46.320><c> line</c><00:23:47.039><c> now</c><00:23:47.200><c> when</c><00:23:47.360><c> you</c><00:23:47.520><c> come</c>

00:23:47.669 --> 00:23:47.679 align:start position:0%
this is the first line now when you come
 

00:23:47.679 --> 00:23:49.430 align:start position:0%
this is the first line now when you come
to<00:23:47.840><c> the</c><00:23:48.000><c> second</c><00:23:48.400><c> line</c>

00:23:49.430 --> 00:23:49.440 align:start position:0%
to the second line
 

00:23:49.440 --> 00:23:51.830 align:start position:0%
to the second line
you<00:23:49.600><c> see</c><00:23:49.760><c> that</c><00:23:50.000><c> here</c><00:23:50.240><c> it</c><00:23:50.400><c> says</c><00:23:50.640><c> that</c><00:23:50.960><c> the</c>

00:23:51.830 --> 00:23:51.840 align:start position:0%
you see that here it says that the
 

00:23:51.840 --> 00:23:54.549 align:start position:0%
you see that here it says that the
fnr<00:23:52.400><c> value</c><00:23:52.720><c> is</c><00:23:52.960><c> 2</c><00:23:53.520><c> and</c><00:23:53.760><c> the</c><00:23:53.840><c> number</c><00:23:54.159><c> of</c><00:23:54.240><c> fields</c>

00:23:54.549 --> 00:23:54.559 align:start position:0%
fnr value is 2 and the number of fields
 

00:23:54.559 --> 00:23:55.750 align:start position:0%
fnr value is 2 and the number of fields
is<00:23:54.880><c> 3</c>

00:23:55.750 --> 00:23:55.760 align:start position:0%
is 3
 

00:23:55.760 --> 00:23:57.990 align:start position:0%
is 3
so<00:23:56.000><c> that</c><00:23:56.240><c> is</c><00:23:56.400><c> also</c><00:23:56.960><c> seen</c><00:23:57.279><c> from</c><00:23:57.440><c> here</c><00:23:57.679><c> number</c><00:23:57.919><c> of</c>

00:23:57.990 --> 00:23:58.000 align:start position:0%
so that is also seen from here number of
 

00:23:58.000 --> 00:23:59.510 align:start position:0%
so that is also seen from here number of
fields<00:23:58.320><c> is</c><00:23:58.480><c> 3</c>

00:23:59.510 --> 00:23:59.520 align:start position:0%
fields is 3
 

00:23:59.520 --> 00:24:02.390 align:start position:0%
fields is 3
and<00:23:59.840><c> when</c><00:24:00.000><c> you</c><00:24:00.159><c> come</c><00:24:00.320><c> to</c><00:24:00.480><c> the</c><00:24:00.880><c> last</c><00:24:01.279><c> line</c><00:24:02.080><c> so</c><00:24:02.240><c> it</c>

00:24:02.390 --> 00:24:02.400 align:start position:0%
and when you come to the last line so it
 

00:24:02.400 --> 00:24:03.590 align:start position:0%
and when you come to the last line so it
says<00:24:02.720><c> the</c>

00:24:03.590 --> 00:24:03.600 align:start position:0%
says the
 

00:24:03.600 --> 00:24:05.590 align:start position:0%
says the
number<00:24:03.840><c> of</c><00:24:04.000><c> fields</c><00:24:04.320><c> is</c><00:24:04.480><c> 2.</c><00:24:04.880><c> so</c><00:24:05.120><c> here</c><00:24:05.360><c> you</c><00:24:05.440><c> can</c>

00:24:05.590 --> 00:24:05.600 align:start position:0%
number of fields is 2. so here you can
 

00:24:05.600 --> 00:24:08.470 align:start position:0%
number of fields is 2. so here you can
see<00:24:05.760><c> the</c><00:24:05.840><c> number</c><00:24:06.080><c> of</c><00:24:06.240><c> bits</c><00:24:06.559><c> is</c><00:24:06.720><c> 2</c><00:24:07.440><c> and</c><00:24:07.840><c> the</c><00:24:08.000><c> fnr</c>

00:24:08.470 --> 00:24:08.480 align:start position:0%
see the number of bits is 2 and the fnr
 

00:24:08.480 --> 00:24:10.070 align:start position:0%
see the number of bits is 2 and the fnr
value<00:24:08.720><c> is</c><00:24:08.880><c> 3</c><00:24:09.120><c> that</c><00:24:09.200><c> means</c><00:24:09.440><c> it</c><00:24:09.520><c> is</c><00:24:09.600><c> the</c><00:24:09.760><c> third</c>

00:24:10.070 --> 00:24:10.080 align:start position:0%
value is 3 that means it is the third
 

00:24:10.080 --> 00:24:11.909 align:start position:0%
value is 3 that means it is the third
line<00:24:10.320><c> in</c><00:24:10.400><c> the</c><00:24:11.039><c> input</c><00:24:11.360><c> string</c><00:24:11.600><c> that</c><00:24:11.679><c> we</c><00:24:11.840><c> are</c>

00:24:11.909 --> 00:24:11.919 align:start position:0%
line in the input string that we are
 

00:24:11.919 --> 00:24:14.230 align:start position:0%
line in the input string that we are
talking<00:24:12.159><c> about</c><00:24:12.960><c> and</c><00:24:13.360><c> then</c>

00:24:14.230 --> 00:24:14.240 align:start position:0%
talking about and then
 

00:24:14.240 --> 00:24:15.510 align:start position:0%
talking about and then
the<00:24:14.480><c> end</c>

00:24:15.510 --> 00:24:15.520 align:start position:0%
the end
 

00:24:15.520 --> 00:24:17.350 align:start position:0%
the end
action<00:24:15.840><c> block</c><00:24:16.159><c> has</c><00:24:16.240><c> been</c><00:24:16.400><c> performed</c><00:24:16.799><c> so</c><00:24:17.120><c> this</c>

00:24:17.350 --> 00:24:17.360 align:start position:0%
action block has been performed so this
 

00:24:17.360 --> 00:24:19.590 align:start position:0%
action block has been performed so this
is<00:24:17.440><c> the</c><00:24:17.600><c> execution</c><00:24:18.080><c> model</c>

00:24:19.590 --> 00:24:19.600 align:start position:0%
is the execution model
 

00:24:19.600 --> 00:24:22.870 align:start position:0%
is the execution model
and<00:24:20.159><c> we</c><00:24:20.320><c> can</c><00:24:20.559><c> then</c><00:24:20.799><c> use</c>

00:24:22.870 --> 00:24:22.880 align:start position:0%
and we can then use
 

00:24:22.880 --> 00:24:24.630 align:start position:0%
and we can then use
the<00:24:23.039><c> input</c>

00:24:24.630 --> 00:24:24.640 align:start position:0%
the input
 

00:24:24.640 --> 00:24:25.750 align:start position:0%
the input
lines<00:24:25.039><c> to</c>

00:24:25.750 --> 00:24:25.760 align:start position:0%
lines to
 

00:24:25.760 --> 00:24:27.750 align:start position:0%
lines to
execute<00:24:26.320><c> the</c><00:24:26.480><c> code</c><00:24:26.799><c> block</c>

00:24:27.750 --> 00:24:27.760 align:start position:0%
execute the code block
 

00:24:27.760 --> 00:24:29.669 align:start position:0%
execute the code block
as<00:24:28.000><c> we</c><00:24:28.159><c> require</c><00:24:28.880><c> we</c><00:24:29.039><c> can</c><00:24:29.200><c> look</c><00:24:29.360><c> at</c><00:24:29.440><c> the</c>

00:24:29.669 --> 00:24:29.679 align:start position:0%
as we require we can look at the
 

00:24:29.679 --> 00:24:32.070 align:start position:0%
as we require we can look at the
patterns<00:24:30.480><c> based</c><00:24:30.799><c> upon</c><00:24:31.039><c> which</c><00:24:31.360><c> the</c><00:24:31.760><c> actions</c>

00:24:32.070 --> 00:24:32.080 align:start position:0%
patterns based upon which the actions
 

00:24:32.080 --> 00:24:34.070 align:start position:0%
patterns based upon which the actions
will<00:24:32.240><c> be</c><00:24:32.400><c> taken</c><00:24:32.880><c> using</c><00:24:33.200><c> the</c>

00:24:34.070 --> 00:24:34.080 align:start position:0%
will be taken using the
 

00:24:34.080 --> 00:24:35.350 align:start position:0%
will be taken using the
next<00:24:34.400><c> example</c>

00:24:35.350 --> 00:24:35.360 align:start position:0%
next example
 

00:24:35.360 --> 00:24:36.789 align:start position:0%
next example
so<00:24:35.520><c> here</c><00:24:35.760><c> is</c><00:24:35.919><c> a</c>

00:24:36.789 --> 00:24:36.799 align:start position:0%
so here is a
 

00:24:36.799 --> 00:24:38.390 align:start position:0%
so here is a
example<00:24:37.279><c> where</c><00:24:37.520><c> we</c><00:24:37.600><c> are</c><00:24:37.760><c> using</c><00:24:38.000><c> the</c><00:24:38.080><c> regular</c>

00:24:38.390 --> 00:24:38.400 align:start position:0%
example where we are using the regular
 

00:24:38.400 --> 00:24:39.750 align:start position:0%
example where we are using the regular
expression

00:24:39.750 --> 00:24:39.760 align:start position:0%
expression
 

00:24:39.760 --> 00:24:42.310 align:start position:0%
expression
in<00:24:39.840><c> front</c><00:24:40.159><c> of</c><00:24:40.320><c> the</c><00:24:40.960><c> action</c><00:24:41.360><c> block</c><00:24:41.760><c> so</c><00:24:42.000><c> this</c><00:24:42.159><c> is</c>

00:24:42.310 --> 00:24:42.320 align:start position:0%
in front of the action block so this is
 

00:24:42.320 --> 00:24:44.630 align:start position:0%
in front of the action block so this is
the<00:24:42.400><c> action</c><00:24:42.799><c> block</c><00:24:43.039><c> the</c><00:24:43.200><c> first</c><00:24:43.440><c> action</c><00:24:43.760><c> block</c>

00:24:44.630 --> 00:24:44.640 align:start position:0%
the action block the first action block
 

00:24:44.640 --> 00:24:46.630 align:start position:0%
the action block the first action block
this<00:24:44.880><c> is</c><00:24:44.960><c> the</c><00:24:45.120><c> second</c><00:24:45.440><c> action</c><00:24:45.760><c> block</c>

00:24:46.630 --> 00:24:46.640 align:start position:0%
this is the second action block
 

00:24:46.640 --> 00:24:48.549 align:start position:0%
this is the second action block
this<00:24:46.880><c> is</c><00:24:46.960><c> the</c><00:24:47.120><c> third</c><00:24:47.360><c> action</c><00:24:47.679><c> block</c>

00:24:48.549 --> 00:24:48.559 align:start position:0%
this is the third action block
 

00:24:48.559 --> 00:24:50.549 align:start position:0%
this is the third action block
this<00:24:48.799><c> is</c><00:24:48.880><c> the</c><00:24:49.039><c> end</c><00:24:49.279><c> block</c><00:24:50.000><c> and</c><00:24:50.159><c> this</c><00:24:50.400><c> is</c><00:24:50.480><c> the</c>

00:24:50.549 --> 00:24:50.559 align:start position:0%
this is the end block and this is the
 

00:24:50.559 --> 00:24:53.669 align:start position:0%
this is the end block and this is the
begin<00:24:50.880><c> block</c><00:24:51.520><c> okay</c><00:24:52.080><c> so</c>

00:24:53.669 --> 00:24:53.679 align:start position:0%
begin block okay so
 

00:24:53.679 --> 00:24:56.070 align:start position:0%
begin block okay so
this<00:24:53.919><c> action</c><00:24:54.240><c> block</c><00:24:54.880><c> will</c><00:24:55.039><c> be</c><00:24:55.200><c> performed</c><00:24:55.760><c> on</c>

00:24:56.070 --> 00:24:56.080 align:start position:0%
this action block will be performed on
 

00:24:56.080 --> 00:24:57.510 align:start position:0%
this action block will be performed on
all<00:24:56.320><c> those</c>

00:24:57.510 --> 00:24:57.520 align:start position:0%
all those
 

00:24:57.520 --> 00:24:58.549 align:start position:0%
all those
records

00:24:58.549 --> 00:24:58.559 align:start position:0%
records
 

00:24:58.559 --> 00:25:01.029 align:start position:0%
records
which<00:24:58.960><c> satisfy</c><00:24:59.600><c> a</c><00:24:59.760><c> pattern</c><00:25:00.159><c> matching</c><00:25:00.640><c> as</c>

00:25:01.029 --> 00:25:01.039 align:start position:0%
which satisfy a pattern matching as
 

00:25:01.039 --> 00:25:03.190 align:start position:0%
which satisfy a pattern matching as
mentioned<00:25:01.440><c> here</c><00:25:01.760><c> which</c><00:25:02.000><c> means</c><00:25:02.320><c> that</c><00:25:03.039><c> it</c>

00:25:03.190 --> 00:25:03.200 align:start position:0%
mentioned here which means that it
 

00:25:03.200 --> 00:25:05.029 align:start position:0%
mentioned here which means that it
should<00:25:03.440><c> contain</c>

00:25:05.029 --> 00:25:05.039 align:start position:0%
should contain
 

00:25:05.039 --> 00:25:07.350 align:start position:0%
should contain
alphabetic<00:25:05.679><c> characters</c><00:25:06.400><c> so</c><00:25:06.640><c> if</c><00:25:06.799><c> the</c><00:25:06.960><c> line</c><00:25:07.200><c> has</c>

00:25:07.350 --> 00:25:07.360 align:start position:0%
alphabetic characters so if the line has
 

00:25:07.360 --> 00:25:09.510 align:start position:0%
alphabetic characters so if the line has
an<00:25:07.520><c> alphabetic</c><00:25:08.000><c> character</c><00:25:08.400><c> this</c><00:25:08.640><c> executable</c>

00:25:09.510 --> 00:25:09.520 align:start position:0%
an alphabetic character this executable
 

00:25:09.520 --> 00:25:11.510 align:start position:0%
an alphabetic character this executable
this<00:25:09.760><c> action</c><00:25:10.000><c> will</c><00:25:10.159><c> be</c><00:25:10.320><c> executed</c>

00:25:11.510 --> 00:25:11.520 align:start position:0%
this action will be executed
 

00:25:11.520 --> 00:25:14.149 align:start position:0%
this action will be executed
if<00:25:11.679><c> the</c><00:25:11.840><c> line</c><00:25:12.240><c> has</c><00:25:12.720><c> alpha</c><00:25:13.120><c> numeric</c><00:25:13.600><c> characters</c>

00:25:14.149 --> 00:25:14.159 align:start position:0%
if the line has alpha numeric characters
 

00:25:14.159 --> 00:25:15.590 align:start position:0%
if the line has alpha numeric characters
then<00:25:14.320><c> the</c><00:25:14.480><c> second</c>

00:25:15.590 --> 00:25:15.600 align:start position:0%
then the second
 

00:25:15.600 --> 00:25:17.590 align:start position:0%
then the second
action<00:25:15.919><c> will</c><00:25:16.080><c> be</c><00:25:16.159><c> executed</c>

00:25:17.590 --> 00:25:17.600 align:start position:0%
action will be executed
 

00:25:17.600 --> 00:25:20.070 align:start position:0%
action will be executed
if<00:25:17.760><c> the</c><00:25:17.919><c> line</c><00:25:18.240><c> has</c><00:25:18.640><c> any</c><00:25:18.960><c> digits</c><00:25:19.760><c> then</c><00:25:19.919><c> the</c>

00:25:20.070 --> 00:25:20.080 align:start position:0%
if the line has any digits then the
 

00:25:20.080 --> 00:25:22.630 align:start position:0%
if the line has any digits then the
third<00:25:20.400><c> block</c><00:25:20.880><c> will</c><00:25:21.039><c> be</c><00:25:21.200><c> executed</c><00:25:22.000><c> so</c><00:25:22.240><c> what</c><00:25:22.480><c> is</c>

00:25:22.630 --> 00:25:22.640 align:start position:0%
third block will be executed so what is
 

00:25:22.640 --> 00:25:23.990 align:start position:0%
third block will be executed so what is
the<00:25:22.799><c> example</c>

00:25:23.990 --> 00:25:24.000 align:start position:0%
the example
 

00:25:24.000 --> 00:25:26.470 align:start position:0%
the example
input<00:25:24.640><c> stream</c><00:25:25.039><c> that</c><00:25:25.120><c> we</c><00:25:25.279><c> are</c><00:25:25.360><c> trying</c><00:25:25.679><c> it</c><00:25:25.840><c> out</c>

00:25:26.470 --> 00:25:26.480 align:start position:0%
input stream that we are trying it out
 

00:25:26.480 --> 00:25:29.350 align:start position:0%
input stream that we are trying it out
so<00:25:26.640><c> here</c><00:25:26.880><c> is</c><00:25:27.039><c> the</c><00:25:27.200><c> example</c><00:25:28.159><c> input</c><00:25:28.559><c> file</c><00:25:28.880><c> where</c>

00:25:29.350 --> 00:25:29.360 align:start position:0%
so here is the example input file where
 

00:25:29.360 --> 00:25:31.750 align:start position:0%
so here is the example input file where
the<00:25:29.520><c> first</c><00:25:29.840><c> line</c><00:25:30.080><c> does</c><00:25:30.320><c> not</c><00:25:30.480><c> have</c><00:25:30.720><c> any</c><00:25:30.880><c> digits</c>

00:25:31.750 --> 00:25:31.760 align:start position:0%
the first line does not have any digits
 

00:25:31.760 --> 00:25:33.909 align:start position:0%
the first line does not have any digits
so<00:25:31.919><c> we</c><00:25:32.080><c> don't</c><00:25:32.320><c> expect</c><00:25:32.720><c> the</c><00:25:32.960><c> third</c><00:25:33.200><c> block</c><00:25:33.520><c> to</c><00:25:33.600><c> be</c>

00:25:33.909 --> 00:25:33.919 align:start position:0%
so we don't expect the third block to be
 

00:25:33.919 --> 00:25:35.269 align:start position:0%
so we don't expect the third block to be
executed<00:25:34.400><c> on</c><00:25:34.559><c> it</c>

00:25:35.269 --> 00:25:35.279 align:start position:0%
executed on it
 

00:25:35.279 --> 00:25:37.110 align:start position:0%
executed on it
the<00:25:35.600><c> second</c><00:25:36.000><c> one</c><00:25:36.240><c> has</c><00:25:36.480><c> alphanumeric</c>

00:25:37.110 --> 00:25:37.120 align:start position:0%
the second one has alphanumeric
 

00:25:37.120 --> 00:25:39.430 align:start position:0%
the second one has alphanumeric
characters<00:25:37.840><c> the</c><00:25:38.080><c> third</c><00:25:38.320><c> one</c><00:25:38.640><c> has</c>

00:25:39.430 --> 00:25:39.440 align:start position:0%
characters the third one has
 

00:25:39.440 --> 00:25:42.470 align:start position:0%
characters the third one has
mix<00:25:39.760><c> of</c><00:25:40.320><c> all</c><00:25:40.480><c> three</c><00:25:41.200><c> and</c><00:25:41.360><c> then</c><00:25:41.520><c> the</c><00:25:41.600><c> last</c><00:25:42.159><c> line</c>

00:25:42.470 --> 00:25:42.480 align:start position:0%
mix of all three and then the last line
 

00:25:42.480 --> 00:25:44.390 align:start position:0%
mix of all three and then the last line
has<00:25:42.960><c> only</c><00:25:43.200><c> digits</c><00:25:43.600><c> which</c><00:25:43.840><c> does</c><00:25:44.000><c> not</c><00:25:44.159><c> have</c>

00:25:44.390 --> 00:25:44.400 align:start position:0%
has only digits which does not have
 

00:25:44.400 --> 00:25:46.310 align:start position:0%
has only digits which does not have
alphabetical<00:25:45.120><c> characters</c><00:25:45.919><c> and</c><00:25:46.000><c> therefore</c>

00:25:46.310 --> 00:25:46.320 align:start position:0%
alphabetical characters and therefore
 

00:25:46.320 --> 00:25:47.990 align:start position:0%
alphabetical characters and therefore
the<00:25:46.400><c> first</c><00:25:46.720><c> block</c><00:25:46.960><c> should</c><00:25:47.120><c> not</c><00:25:47.360><c> be</c><00:25:47.520><c> executed</c>

00:25:47.990 --> 00:25:48.000 align:start position:0%
the first block should not be executed
 

00:25:48.000 --> 00:25:53.669 align:start position:0%
the first block should not be executed
on<00:25:48.159><c> it</c><00:25:48.559><c> so</c><00:25:48.720><c> let</c><00:25:48.880><c> us</c><00:25:49.039><c> test</c><00:25:49.279><c> this</c><00:25:49.520><c> out</c>

00:25:53.669 --> 00:25:53.679 align:start position:0%
 
 

00:25:53.679 --> 00:25:55.510 align:start position:0%
 
after<00:25:53.919><c> the</c><00:25:54.000><c> begin</c><00:25:54.320><c> block</c>

00:25:55.510 --> 00:25:55.520 align:start position:0%
after the begin block
 

00:25:55.520 --> 00:25:58.630 align:start position:0%
after the begin block
the<00:25:56.000><c> record</c><00:25:56.480><c> 1</c><00:25:56.880><c> has</c><00:25:57.039><c> been</c><00:25:57.200><c> executed</c><00:25:58.000><c> by</c><00:25:58.400><c> two</c>

00:25:58.630 --> 00:25:58.640 align:start position:0%
the record 1 has been executed by two
 

00:25:58.640 --> 00:25:59.590 align:start position:0%
the record 1 has been executed by two
blocks

00:25:59.590 --> 00:25:59.600 align:start position:0%
blocks
 

00:25:59.600 --> 00:26:01.350 align:start position:0%
blocks
alpha<00:25:59.919><c> block</c><00:26:00.240><c> and</c><00:26:00.400><c> aluminum</c><00:26:00.799><c> block</c><00:26:01.039><c> that</c><00:26:01.200><c> is</c>

00:26:01.350 --> 00:26:01.360 align:start position:0%
alpha block and aluminum block that is
 

00:26:01.360 --> 00:26:03.110 align:start position:0%
alpha block and aluminum block that is
alphabetical<00:26:02.000><c> as</c><00:26:02.080><c> well</c><00:26:02.320><c> as</c><00:26:02.480><c> alpha</c><00:26:02.720><c> numeric</c>

00:26:03.110 --> 00:26:03.120 align:start position:0%
alphabetical as well as alpha numeric
 

00:26:03.120 --> 00:26:05.510 align:start position:0%
alphabetical as well as alpha numeric
because<00:26:03.360><c> the</c><00:26:03.440><c> first</c><00:26:03.919><c> line</c><00:26:04.400><c> has</c>

00:26:05.510 --> 00:26:05.520 align:start position:0%
because the first line has
 

00:26:05.520 --> 00:26:07.190 align:start position:0%
because the first line has
alphabetical<00:26:06.080><c> characters</c>

00:26:07.190 --> 00:26:07.200 align:start position:0%
alphabetical characters
 

00:26:07.200 --> 00:26:09.750 align:start position:0%
alphabetical characters
now<00:26:07.440><c> if</c><00:26:07.520><c> you</c><00:26:07.679><c> look</c><00:26:07.840><c> at</c><00:26:08.000><c> the</c><00:26:08.159><c> second</c>

00:26:09.750 --> 00:26:09.760 align:start position:0%
now if you look at the second
 

00:26:09.760 --> 00:26:12.070 align:start position:0%
now if you look at the second
line

00:26:12.070 --> 00:26:12.080 align:start position:0%
 
 

00:26:12.080 --> 00:26:13.909 align:start position:0%
 
all<00:26:12.240><c> the</c><00:26:12.400><c> three</c><00:26:12.799><c> blocks</c><00:26:13.120><c> have</c><00:26:13.200><c> been</c><00:26:13.360><c> executed</c>

00:26:13.909 --> 00:26:13.919 align:start position:0%
all the three blocks have been executed
 

00:26:13.919 --> 00:26:16.549 align:start position:0%
all the three blocks have been executed
because<00:26:14.720><c> it</c><00:26:14.880><c> has</c><00:26:15.200><c> both</c>

00:26:16.549 --> 00:26:16.559 align:start position:0%
because it has both
 

00:26:16.559 --> 00:26:18.070 align:start position:0%
because it has both
alphabetical<00:26:17.120><c> characters</c><00:26:17.600><c> as</c><00:26:17.679><c> well</c><00:26:17.919><c> as</c>

00:26:18.070 --> 00:26:18.080 align:start position:0%
alphabetical characters as well as
 

00:26:18.080 --> 00:26:20.789 align:start position:0%
alphabetical characters as well as
digits<00:26:18.799><c> so</c><00:26:18.960><c> it</c><00:26:19.120><c> would</c><00:26:19.200><c> satisfy</c><00:26:19.840><c> alpha</c>

00:26:20.789 --> 00:26:20.799 align:start position:0%
digits so it would satisfy alpha
 

00:26:20.799 --> 00:26:23.269 align:start position:0%
digits so it would satisfy alpha
alpha<00:26:21.440><c> as</c><00:26:21.600><c> well</c><00:26:21.840><c> as</c><00:26:22.080><c> digit</c><00:26:22.640><c> patterns</c><00:26:23.120><c> of</c>

00:26:23.269 --> 00:26:23.279 align:start position:0%
alpha as well as digit patterns of
 

00:26:23.279 --> 00:26:24.950 align:start position:0%
alpha as well as digit patterns of
character<00:26:23.679><c> matching</c>

00:26:24.950 --> 00:26:24.960 align:start position:0%
character matching
 

00:26:24.960 --> 00:26:28.870 align:start position:0%
character matching
the<00:26:25.360><c> third</c><00:26:25.679><c> block</c>

00:26:28.870 --> 00:26:28.880 align:start position:0%
 
 

00:26:28.880 --> 00:26:30.630 align:start position:0%
 
is<00:26:29.039><c> also</c><00:26:29.279><c> similar</c><00:26:29.760><c> because</c><00:26:30.320><c> it</c><00:26:30.480><c> would</c>

00:26:30.630 --> 00:26:30.640 align:start position:0%
is also similar because it would
 

00:26:30.640 --> 00:26:32.710 align:start position:0%
is also similar because it would
actually<00:26:31.039><c> have</c>

00:26:32.710 --> 00:26:32.720 align:start position:0%
actually have
 

00:26:32.720 --> 00:26:34.710 align:start position:0%
actually have
all<00:26:32.880><c> the</c><00:26:33.039><c> three</c><00:26:33.279><c> types</c><00:26:33.600><c> of</c><00:26:33.919><c> characters</c><00:26:34.559><c> in</c>

00:26:34.710 --> 00:26:34.720 align:start position:0%
all the three types of characters in
 

00:26:34.720 --> 00:26:36.710 align:start position:0%
all the three types of characters in
that<00:26:34.880><c> particular</c><00:26:35.360><c> block</c>

00:26:36.710 --> 00:26:36.720 align:start position:0%
that particular block
 

00:26:36.720 --> 00:26:39.669 align:start position:0%
that particular block
now<00:26:36.960><c> if</c><00:26:37.120><c> you</c><00:26:37.200><c> take</c><00:26:37.520><c> the</c><00:26:37.840><c> last</c><00:26:38.240><c> block</c>

00:26:39.669 --> 00:26:39.679 align:start position:0%
now if you take the last block
 

00:26:39.679 --> 00:26:41.590 align:start position:0%
now if you take the last block
then<00:26:40.159><c> it</c><00:26:40.320><c> has</c><00:26:40.480><c> only</c><00:26:40.720><c> the</c><00:26:40.799><c> digits</c><00:26:41.200><c> which</c><00:26:41.360><c> means</c>

00:26:41.590 --> 00:26:41.600 align:start position:0%
then it has only the digits which means
 

00:26:41.600 --> 00:26:45.269 align:start position:0%
then it has only the digits which means
it<00:26:41.760><c> will</c><00:26:41.840><c> be</c><00:26:42.000><c> satisfied</c><00:26:42.640><c> by</c><00:26:43.360><c> alnum</c><00:26:44.240><c> or</c><00:26:44.640><c> digit</c>

00:26:45.269 --> 00:26:45.279 align:start position:0%
it will be satisfied by alnum or digit
 

00:26:45.279 --> 00:26:46.870 align:start position:0%
it will be satisfied by alnum or digit
so<00:26:45.520><c> only</c><00:26:45.840><c> those</c><00:26:46.000><c> two</c><00:26:46.159><c> blocks</c><00:26:46.480><c> have</c><00:26:46.640><c> been</c>

00:26:46.870 --> 00:26:46.880 align:start position:0%
so only those two blocks have been
 

00:26:46.880 --> 00:26:49.350 align:start position:0%
so only those two blocks have been
executed<00:26:47.840><c> and</c><00:26:48.000><c> after</c><00:26:48.240><c> this</c><00:26:48.480><c> was</c><00:26:48.720><c> over</c><00:26:48.960><c> the</c><00:26:49.120><c> end</c>

00:26:49.350 --> 00:26:49.360 align:start position:0%
executed and after this was over the end
 

00:26:49.360 --> 00:26:51.590 align:start position:0%
executed and after this was over the end
block<00:26:49.600><c> has</c><00:26:49.679><c> been</c><00:26:49.919><c> executed</c><00:26:50.960><c> so</c><00:26:51.120><c> this</c><00:26:51.360><c> shows</c>

00:26:51.590 --> 00:26:51.600 align:start position:0%
block has been executed so this shows
 

00:26:51.600 --> 00:26:53.830 align:start position:0%
block has been executed so this shows
you<00:26:51.760><c> how</c><00:26:52.159><c> you</c><00:26:52.240><c> can</c><00:26:52.480><c> pick</c><00:26:53.279><c> which</c><00:26:53.520><c> of</c><00:26:53.679><c> the</c>

00:26:53.830 --> 00:26:53.840 align:start position:0%
you how you can pick which of the
 

00:26:53.840 --> 00:26:55.750 align:start position:0%
you how you can pick which of the
records<00:26:54.480><c> should</c><00:26:54.640><c> be</c><00:26:54.880><c> processed</c><00:26:55.360><c> by</c><00:26:55.520><c> which</c>

00:26:55.750 --> 00:26:55.760 align:start position:0%
records should be processed by which
 

00:26:55.760 --> 00:26:57.430 align:start position:0%
records should be processed by which
code<00:26:56.000><c> block</c>

00:26:57.430 --> 00:26:57.440 align:start position:0%
code block
 

00:26:57.440 --> 00:27:00.230 align:start position:0%
code block
we<00:26:57.600><c> have</c><00:26:58.159><c> taken</c><00:26:58.559><c> the</c><00:26:58.960><c> pattern</c><00:26:59.360><c> matching</c><00:26:59.840><c> to</c>

00:27:00.230 --> 00:27:00.240 align:start position:0%
we have taken the pattern matching to
 

00:27:00.240 --> 00:27:02.789 align:start position:0%
we have taken the pattern matching to
one<00:27:00.480><c> level</c><00:27:00.880><c> further</c><00:27:01.279><c> complexity</c><00:27:02.240><c> so</c><00:27:02.559><c> instead</c>

00:27:02.789 --> 00:27:02.799 align:start position:0%
one level further complexity so instead
 

00:27:02.799 --> 00:27:05.350 align:start position:0%
one level further complexity so instead
of<00:27:02.960><c> trying</c><00:27:03.200><c> to</c><00:27:03.440><c> match</c><00:27:03.840><c> the</c><00:27:04.080><c> entire</c><00:27:04.559><c> record</c>

00:27:05.350 --> 00:27:05.360 align:start position:0%
of trying to match the entire record
 

00:27:05.360 --> 00:27:06.950 align:start position:0%
of trying to match the entire record
with<00:27:05.520><c> the</c><00:27:05.679><c> pattern</c><00:27:06.159><c> we</c><00:27:06.320><c> are</c><00:27:06.400><c> trying</c><00:27:06.559><c> to</c><00:27:06.720><c> match</c>

00:27:06.950 --> 00:27:06.960 align:start position:0%
with the pattern we are trying to match
 

00:27:06.960 --> 00:27:09.190 align:start position:0%
with the pattern we are trying to match
only<00:27:07.200><c> the</c><00:27:07.679><c> first</c><00:27:08.080><c> field</c>

00:27:09.190 --> 00:27:09.200 align:start position:0%
only the first field
 

00:27:09.200 --> 00:27:11.909 align:start position:0%
only the first field
that<00:27:09.440><c> means</c><00:27:09.760><c> that</c><00:27:10.240><c> the</c><00:27:10.400><c> very</c><00:27:10.640><c> first</c>

00:27:11.909 --> 00:27:11.919 align:start position:0%
that means that the very first
 

00:27:11.919 --> 00:27:14.070 align:start position:0%
that means that the very first
field<00:27:12.320><c> in</c><00:27:12.480><c> the</c><00:27:12.720><c> record</c><00:27:13.120><c> will</c><00:27:13.279><c> be</c><00:27:13.520><c> looked</c><00:27:13.840><c> at</c>

00:27:14.070 --> 00:27:14.080 align:start position:0%
field in the record will be looked at
 

00:27:14.080 --> 00:27:16.630 align:start position:0%
field in the record will be looked at
whether<00:27:14.400><c> it</c><00:27:14.480><c> is</c><00:27:14.880><c> a</c><00:27:15.120><c> alphabetical</c><00:27:15.840><c> character</c>

00:27:16.630 --> 00:27:16.640 align:start position:0%
whether it is a alphabetical character
 

00:27:16.640 --> 00:27:18.789 align:start position:0%
whether it is a alphabetical character
or<00:27:16.880><c> alpha</c><00:27:17.200><c> numeric</c><00:27:17.600><c> or</c><00:27:17.679><c> digit</c><00:27:18.480><c> and</c><00:27:18.559><c> then</c>

00:27:18.789 --> 00:27:18.799 align:start position:0%
or alpha numeric or digit and then
 

00:27:18.799 --> 00:27:21.669 align:start position:0%
or alpha numeric or digit and then
accordingly<00:27:19.360><c> the</c><00:27:19.919><c> code</c><00:27:20.159><c> will</c><00:27:20.240><c> be</c><00:27:20.399><c> executed</c><00:27:21.360><c> so</c>

00:27:21.669 --> 00:27:21.679 align:start position:0%
accordingly the code will be executed so
 

00:27:21.679 --> 00:27:24.710 align:start position:0%
accordingly the code will be executed so
here<00:27:22.080><c> the</c><00:27:22.399><c> pattern</c><00:27:23.039><c> is</c><00:27:23.520><c> having</c><00:27:23.919><c> a</c><00:27:24.159><c> relational</c>

00:27:24.710 --> 00:27:24.720 align:start position:0%
here the pattern is having a relational
 

00:27:24.720 --> 00:27:25.590 align:start position:0%
here the pattern is having a relational
match

00:27:25.590 --> 00:27:25.600 align:start position:0%
match
 

00:27:25.600 --> 00:27:27.350 align:start position:0%
match
that<00:27:25.840><c> is</c><00:27:25.919><c> the</c><00:27:26.080><c> first</c><00:27:26.320><c> field</c><00:27:26.640><c> is</c><00:27:26.720><c> matched</c><00:27:27.039><c> with</c>

00:27:27.350 --> 00:27:27.360 align:start position:0%
that is the first field is matched with
 

00:27:27.360 --> 00:27:28.549 align:start position:0%
that is the first field is matched with
the<00:27:27.440><c> regular</c><00:27:27.840><c> expression</c><00:27:28.159><c> that</c><00:27:28.320><c> we</c><00:27:28.399><c> have</c>

00:27:28.549 --> 00:27:28.559 align:start position:0%
the regular expression that we have
 

00:27:28.559 --> 00:27:30.070 align:start position:0%
the regular expression that we have
provided

00:27:30.070 --> 00:27:30.080 align:start position:0%
provided
 

00:27:30.080 --> 00:27:32.549 align:start position:0%
provided
input<00:27:30.480><c> stream</c><00:27:30.880><c> that</c><00:27:31.120><c> we</c><00:27:31.279><c> are</c><00:27:31.840><c> trying</c><00:27:32.080><c> to</c><00:27:32.240><c> test</c>

00:27:32.549 --> 00:27:32.559 align:start position:0%
input stream that we are trying to test
 

00:27:32.559 --> 00:27:35.110 align:start position:0%
input stream that we are trying to test
it<00:27:32.799><c> on</c><00:27:34.080><c> is</c><00:27:34.240><c> here</c>

00:27:35.110 --> 00:27:35.120 align:start position:0%
it on is here
 

00:27:35.120 --> 00:27:37.990 align:start position:0%
it on is here
where<00:27:35.360><c> we</c><00:27:35.520><c> have</c><00:27:35.679><c> got</c><00:27:36.159><c> different</c><00:27:37.039><c> words</c><00:27:37.440><c> in</c><00:27:37.520><c> the</c>

00:27:37.990 --> 00:27:38.000 align:start position:0%
where we have got different words in the
 

00:27:38.000 --> 00:27:40.310 align:start position:0%
where we have got different words in the
first<00:27:38.399><c> field</c><00:27:39.039><c> so</c><00:27:39.440><c> i</c><00:27:39.600><c> have</c><00:27:39.760><c> got</c><00:27:40.000><c> only</c><00:27:40.240><c> the</c>

00:27:40.310 --> 00:27:40.320 align:start position:0%
first field so i have got only the
 

00:27:40.320 --> 00:27:42.230 align:start position:0%
first field so i have got only the
alphabetical<00:27:41.039><c> character</c>

00:27:42.230 --> 00:27:42.240 align:start position:0%
alphabetical character
 

00:27:42.240 --> 00:27:44.230 align:start position:0%
alphabetical character
and<00:27:42.399><c> then</c><00:27:42.559><c> i</c><00:27:42.640><c> have</c><00:27:42.799><c> got</c><00:27:42.960><c> alpha</c><00:27:43.279><c> numeric</c><00:27:44.080><c> and</c>

00:27:44.230 --> 00:27:44.240 align:start position:0%
and then i have got alpha numeric and
 

00:27:44.240 --> 00:27:47.269 align:start position:0%
and then i have got alpha numeric and
then<00:27:44.559><c> purely</c><00:27:45.039><c> numeric</c><00:27:45.840><c> and</c><00:27:46.000><c> purely</c><00:27:46.480><c> numeric</c>

00:27:47.269 --> 00:27:47.279 align:start position:0%
then purely numeric and purely numeric
 

00:27:47.279 --> 00:27:49.029 align:start position:0%
then purely numeric and purely numeric
so<00:27:47.520><c> you</c><00:27:47.600><c> can</c><00:27:47.840><c> now</c><00:27:48.080><c> test</c>

00:27:49.029 --> 00:27:49.039 align:start position:0%
so you can now test
 

00:27:49.039 --> 00:27:55.430 align:start position:0%
so you can now test
how<00:27:49.200><c> this</c><00:27:49.440><c> will</c><00:27:49.679><c> be</c><00:27:50.000><c> working</c><00:27:50.399><c> out</c>

00:27:55.430 --> 00:27:55.440 align:start position:0%
 
 

00:27:55.440 --> 00:27:58.070 align:start position:0%
 
so<00:27:55.600><c> you</c><00:27:55.760><c> can</c><00:27:55.919><c> see</c><00:27:56.159><c> that</c>

00:27:58.070 --> 00:27:58.080 align:start position:0%
so you can see that
 

00:27:58.080 --> 00:28:00.630 align:start position:0%
so you can see that
the<00:27:58.399><c> first</c>

00:28:00.630 --> 00:28:00.640 align:start position:0%
the first
 

00:28:00.640 --> 00:28:02.710 align:start position:0%
the first
record<00:28:01.039><c> has</c><00:28:01.200><c> been</c><00:28:01.360><c> processed</c><00:28:01.760><c> by</c><00:28:02.080><c> alpha</c><00:28:02.559><c> and</c>

00:28:02.710 --> 00:28:02.720 align:start position:0%
record has been processed by alpha and
 

00:28:02.720 --> 00:28:05.190 align:start position:0%
record has been processed by alpha and
alum<00:28:03.520><c> because</c><00:28:03.840><c> you</c><00:28:03.919><c> can</c><00:28:04.080><c> see</c><00:28:04.320><c> that</c><00:28:04.720><c> the</c><00:28:04.880><c> first</c>

00:28:05.190 --> 00:28:05.200 align:start position:0%
alum because you can see that the first
 

00:28:05.200 --> 00:28:07.990 align:start position:0%
alum because you can see that the first
line<00:28:05.440><c> has</c><00:28:06.000><c> hello</c><00:28:06.320><c> will</c><00:28:06.559><c> fit</c><00:28:07.279><c> pattern</c><00:28:07.600><c> matching</c>

00:28:07.990 --> 00:28:08.000 align:start position:0%
line has hello will fit pattern matching
 

00:28:08.000 --> 00:28:08.710 align:start position:0%
line has hello will fit pattern matching
with

00:28:08.710 --> 00:28:08.720 align:start position:0%
with
 

00:28:08.720 --> 00:28:11.350 align:start position:0%
with
alpha<00:28:09.200><c> as</c><00:28:09.360><c> well</c><00:28:09.600><c> as</c><00:28:10.080><c> alum</c><00:28:10.799><c> so</c><00:28:11.039><c> it</c><00:28:11.120><c> has</c>

00:28:11.350 --> 00:28:11.360 align:start position:0%
alpha as well as alum so it has
 

00:28:11.360 --> 00:28:12.950 align:start position:0%
alpha as well as alum so it has
alphabetical<00:28:11.919><c> characters</c><00:28:12.320><c> so</c><00:28:12.480><c> both</c><00:28:12.720><c> will</c><00:28:12.880><c> be</c>

00:28:12.950 --> 00:28:12.960 align:start position:0%
alphabetical characters so both will be
 

00:28:12.960 --> 00:28:14.070 align:start position:0%
alphabetical characters so both will be
satisfied

00:28:14.070 --> 00:28:14.080 align:start position:0%
satisfied
 

00:28:14.080 --> 00:28:16.230 align:start position:0%
satisfied
now<00:28:14.240><c> look</c><00:28:14.480><c> at</c><00:28:14.559><c> the</c><00:28:14.640><c> second</c><00:28:15.039><c> record</c><00:28:15.679><c> the</c><00:28:15.840><c> first</c>

00:28:16.230 --> 00:28:16.240 align:start position:0%
now look at the second record the first
 

00:28:16.240 --> 00:28:18.950 align:start position:0%
now look at the second record the first
field<00:28:16.480><c> is</c><00:28:16.720><c> mm-22</c><00:28:17.440><c> b901</c><00:28:18.320><c> it</c><00:28:18.399><c> has</c><00:28:18.640><c> both</c><00:28:18.880><c> the</c>

00:28:18.950 --> 00:28:18.960 align:start position:0%
field is mm-22 b901 it has both the
 

00:28:18.960 --> 00:28:20.389 align:start position:0%
field is mm-22 b901 it has both the
digits<00:28:19.360><c> as</c><00:28:19.440><c> well</c><00:28:19.600><c> as</c><00:28:19.840><c> alphabetical</c>

00:28:20.389 --> 00:28:20.399 align:start position:0%
digits as well as alphabetical
 

00:28:20.399 --> 00:28:22.789 align:start position:0%
digits as well as alphabetical
characters<00:28:21.200><c> so</c><00:28:21.440><c> it</c><00:28:21.600><c> will</c><00:28:21.679><c> be</c><00:28:21.840><c> executed</c><00:28:22.320><c> by</c><00:28:22.640><c> all</c>

00:28:22.789 --> 00:28:22.799 align:start position:0%
characters so it will be executed by all
 

00:28:22.799 --> 00:28:24.950 align:start position:0%
characters so it will be executed by all
the<00:28:22.960><c> three</c><00:28:23.200><c> blocks</c><00:28:23.600><c> alpha</c><00:28:24.080><c> alone</c><00:28:24.480><c> as</c><00:28:24.640><c> well</c><00:28:24.799><c> as</c>

00:28:24.950 --> 00:28:24.960 align:start position:0%
the three blocks alpha alone as well as
 

00:28:24.960 --> 00:28:25.990 align:start position:0%
the three blocks alpha alone as well as
digital

00:28:25.990 --> 00:28:26.000 align:start position:0%
digital
 

00:28:26.000 --> 00:28:28.549 align:start position:0%
digital
okay<00:28:26.559><c> in</c><00:28:26.720><c> the</c><00:28:26.799><c> third</c><00:28:27.039><c> line</c><00:28:27.279><c> six</c><00:28:27.520><c> lakh</c><00:28:27.760><c> 36</c><00:28:28.399><c> is</c>

00:28:28.549 --> 00:28:28.559 align:start position:0%
okay in the third line six lakh 36 is
 

00:28:28.559 --> 00:28:31.269 align:start position:0%
okay in the third line six lakh 36 is
the<00:28:28.960><c> first</c><00:28:29.360><c> field</c><00:28:30.000><c> which</c><00:28:30.240><c> will</c><00:28:30.480><c> fit</c>

00:28:31.269 --> 00:28:31.279 align:start position:0%
the first field which will fit
 

00:28:31.279 --> 00:28:33.750 align:start position:0%
the first field which will fit
either<00:28:31.600><c> with</c><00:28:31.919><c> aluminum</c><00:28:32.480><c> pattern</c><00:28:32.960><c> or</c><00:28:33.520><c> with</c><00:28:33.679><c> a</c>

00:28:33.750 --> 00:28:33.760 align:start position:0%
either with aluminum pattern or with a
 

00:28:33.760 --> 00:28:35.750 align:start position:0%
either with aluminum pattern or with a
digit<00:28:34.159><c> pattern</c><00:28:34.480><c> so</c><00:28:34.640><c> only</c><00:28:34.960><c> those</c><00:28:35.200><c> two</c><00:28:35.360><c> blocks</c>

00:28:35.750 --> 00:28:35.760 align:start position:0%
digit pattern so only those two blocks
 

00:28:35.760 --> 00:28:37.029 align:start position:0%
digit pattern so only those two blocks
are<00:28:36.000><c> being</c>

00:28:37.029 --> 00:28:37.039 align:start position:0%
are being
 

00:28:37.039 --> 00:28:41.750 align:start position:0%
are being
executed

00:28:41.750 --> 00:28:41.760 align:start position:0%
 
 

00:28:41.760 --> 00:28:43.590 align:start position:0%
 
okay<00:28:42.000><c> so</c><00:28:42.159><c> only</c><00:28:42.399><c> two</c><00:28:42.559><c> blocks</c><00:28:42.960><c> are</c><00:28:43.360><c> being</c>

00:28:43.590 --> 00:28:43.600 align:start position:0%
okay so only two blocks are being
 

00:28:43.600 --> 00:28:46.389 align:start position:0%
okay so only two blocks are being
executed<00:28:44.159><c> for</c><00:28:44.399><c> the</c><00:28:44.799><c> third</c><00:28:45.120><c> record</c><00:28:46.000><c> for</c><00:28:46.159><c> the</c>

00:28:46.389 --> 00:28:46.399 align:start position:0%
executed for the third record for the
 

00:28:46.399 --> 00:28:49.510 align:start position:0%
executed for the third record for the
fourth<00:28:46.640><c> record</c><00:28:47.600><c> you</c><00:28:47.760><c> see</c><00:28:48.000><c> again</c><00:28:48.480><c> only</c>

00:28:49.510 --> 00:28:49.520 align:start position:0%
fourth record you see again only
 

00:28:49.520 --> 00:28:51.990 align:start position:0%
fourth record you see again only
a<00:28:49.679><c> number</c><00:28:50.080><c> is</c><00:28:50.159><c> there</c><00:28:50.399><c> so</c><00:28:50.640><c> the</c><00:28:50.799><c> same</c><00:28:51.039><c> way</c><00:28:51.360><c> it</c><00:28:51.520><c> has</c>

00:28:51.990 --> 00:28:52.000 align:start position:0%
a number is there so the same way it has
 

00:28:52.000 --> 00:28:53.909 align:start position:0%
a number is there so the same way it has
been<00:28:52.240><c> executed</c><00:28:52.640><c> by</c><00:28:52.799><c> only</c><00:28:53.039><c> alum</c><00:28:53.440><c> block</c><00:28:53.679><c> as</c><00:28:53.760><c> well</c>

00:28:53.909 --> 00:28:53.919 align:start position:0%
been executed by only alum block as well
 

00:28:53.919 --> 00:28:56.710 align:start position:0%
been executed by only alum block as well
as<00:28:54.080><c> digit</c><00:28:54.399><c> block</c><00:28:55.200><c> so</c><00:28:55.360><c> here</c><00:28:55.600><c> you</c><00:28:55.760><c> can</c><00:28:55.919><c> see</c>

00:28:56.710 --> 00:28:56.720 align:start position:0%
as digit block so here you can see
 

00:28:56.720 --> 00:28:57.590 align:start position:0%
as digit block so here you can see
that

00:28:57.590 --> 00:28:57.600 align:start position:0%
that
 

00:28:57.600 --> 00:28:59.669 align:start position:0%
that
this<00:28:57.760><c> is</c><00:28:57.919><c> the</c><00:28:58.159><c> unknown</c><00:28:58.640><c> block</c>

00:28:59.669 --> 00:28:59.679 align:start position:0%
this is the unknown block
 

00:28:59.679 --> 00:29:01.350 align:start position:0%
this is the unknown block
and<00:28:59.760><c> this</c><00:28:59.919><c> is</c><00:28:59.919><c> a</c><00:29:00.000><c> digit</c><00:29:00.320><c> block</c><00:29:00.640><c> so</c><00:29:00.880><c> which</c><00:29:01.120><c> means</c>

00:29:01.350 --> 00:29:01.360 align:start position:0%
and this is a digit block so which means
 

00:29:01.360 --> 00:29:03.590 align:start position:0%
and this is a digit block so which means
that<00:29:01.679><c> only</c><00:29:02.000><c> when</c><00:29:02.640><c> the</c>

00:29:03.590 --> 00:29:03.600 align:start position:0%
that only when the
 

00:29:03.600 --> 00:29:06.230 align:start position:0%
that only when the
first<00:29:04.000><c> field</c><00:29:04.399><c> is</c><00:29:04.640><c> alphabetical</c><00:29:05.919><c> alpha</c>

00:29:06.230 --> 00:29:06.240 align:start position:0%
first field is alphabetical alpha
 

00:29:06.240 --> 00:29:07.990 align:start position:0%
first field is alphabetical alpha
numeric<00:29:06.720><c> or</c><00:29:07.120><c> digit</c>

00:29:07.990 --> 00:29:08.000 align:start position:0%
numeric or digit
 

00:29:08.000 --> 00:29:10.310 align:start position:0%
numeric or digit
or<00:29:08.559><c> comprised</c><00:29:09.039><c> of</c><00:29:09.120><c> digits</c><00:29:09.600><c> then</c><00:29:09.760><c> the</c><00:29:09.919><c> second</c>

00:29:10.310 --> 00:29:10.320 align:start position:0%
or comprised of digits then the second
 

00:29:10.320 --> 00:29:12.870 align:start position:0%
or comprised of digits then the second
and<00:29:10.480><c> third</c><00:29:10.720><c> blocks</c><00:29:10.960><c> are</c><00:29:11.120><c> executed</c><00:29:12.080><c> and</c><00:29:12.399><c> if</c><00:29:12.559><c> the</c>

00:29:12.870 --> 00:29:12.880 align:start position:0%
and third blocks are executed and if the
 

00:29:12.880 --> 00:29:15.190 align:start position:0%
and third blocks are executed and if the
first<00:29:13.279><c> field</c><00:29:13.600><c> is</c><00:29:13.840><c> purely</c><00:29:14.559><c> alphabetical</c>

00:29:15.190 --> 00:29:15.200 align:start position:0%
first field is purely alphabetical
 

00:29:15.200 --> 00:29:16.630 align:start position:0%
first field is purely alphabetical
characters<00:29:15.679><c> then</c><00:29:15.840><c> the</c><00:29:15.919><c> first</c><00:29:16.159><c> block</c><00:29:16.480><c> is</c>

00:29:16.630 --> 00:29:16.640 align:start position:0%
characters then the first block is
 

00:29:16.640 --> 00:29:18.630 align:start position:0%
characters then the first block is
executed<00:29:17.120><c> so</c><00:29:17.679><c> we</c><00:29:17.840><c> can</c><00:29:18.000><c> actually</c><00:29:18.320><c> do</c><00:29:18.480><c> a</c>

00:29:18.630 --> 00:29:18.640 align:start position:0%
executed so we can actually do a
 

00:29:18.640 --> 00:29:21.350 align:start position:0%
executed so we can actually do a
comparison<00:29:19.200><c> on</c><00:29:19.440><c> any</c><00:29:20.159><c> specific</c><00:29:20.720><c> field</c><00:29:21.120><c> within</c>

00:29:21.350 --> 00:29:21.360 align:start position:0%
comparison on any specific field within
 

00:29:21.360 --> 00:29:23.990 align:start position:0%
comparison on any specific field within
that<00:29:21.520><c> particular</c><00:29:22.000><c> record</c><00:29:22.880><c> and</c><00:29:23.120><c> then</c>

00:29:23.990 --> 00:29:24.000 align:start position:0%
that particular record and then
 

00:29:24.000 --> 00:29:25.350 align:start position:0%
that particular record and then
ask<00:29:24.480><c> the</c>

00:29:25.350 --> 00:29:25.360 align:start position:0%
ask the
 

00:29:25.360 --> 00:29:27.510 align:start position:0%
ask the
action<00:29:25.919><c> block</c><00:29:26.240><c> to</c><00:29:26.320><c> be</c><00:29:26.480><c> executed</c><00:29:27.039><c> on</c><00:29:27.279><c> that</c>

00:29:27.510 --> 00:29:27.520 align:start position:0%
action block to be executed on that
 

00:29:27.520 --> 00:29:30.230 align:start position:0%
action block to be executed on that
particular<00:29:28.399><c> record</c><00:29:29.200><c> so</c><00:29:29.440><c> here</c><00:29:29.679><c> we</c><00:29:29.840><c> have</c><00:29:30.000><c> got</c>

00:29:30.230 --> 00:29:30.240 align:start position:0%
particular record so here we have got
 

00:29:30.240 --> 00:29:32.389 align:start position:0%
particular record so here we have got
one<00:29:30.399><c> more</c><00:29:30.640><c> example</c><00:29:31.120><c> where</c><00:29:31.360><c> we</c>

00:29:32.389 --> 00:29:32.399 align:start position:0%
one more example where we
 

00:29:32.399 --> 00:29:34.789 align:start position:0%
one more example where we
do<00:29:32.559><c> not</c><00:29:32.960><c> do</c><00:29:33.200><c> any</c><00:29:33.440><c> pattern</c><00:29:33.760><c> matching</c><00:29:34.399><c> or</c>

00:29:34.789 --> 00:29:34.799 align:start position:0%
do not do any pattern matching or
 

00:29:34.799 --> 00:29:36.870 align:start position:0%
do not do any pattern matching or
comparison<00:29:35.440><c> but</c><00:29:35.600><c> we</c><00:29:35.840><c> actually</c><00:29:36.240><c> look</c><00:29:36.480><c> at</c><00:29:36.640><c> the</c>

00:29:36.870 --> 00:29:36.880 align:start position:0%
comparison but we actually look at the
 

00:29:36.880 --> 00:29:38.870 align:start position:0%
comparison but we actually look at the
number<00:29:37.200><c> of</c><00:29:37.360><c> fields</c><00:29:37.679><c> in</c><00:29:37.760><c> that</c><00:29:38.000><c> particular</c>

00:29:38.870 --> 00:29:38.880 align:start position:0%
number of fields in that particular
 

00:29:38.880 --> 00:29:41.830 align:start position:0%
number of fields in that particular
record<00:29:39.440><c> so</c><00:29:40.159><c> nf</c><00:29:40.880><c> corresponds</c><00:29:41.360><c> to</c><00:29:41.520><c> the</c><00:29:41.600><c> number</c>

00:29:41.830 --> 00:29:41.840 align:start position:0%
record so nf corresponds to the number
 

00:29:41.840 --> 00:29:43.110 align:start position:0%
record so nf corresponds to the number
of<00:29:41.919><c> fields</c><00:29:42.320><c> so</c>

00:29:43.110 --> 00:29:43.120 align:start position:0%
of fields so
 

00:29:43.120 --> 00:29:44.950 align:start position:0%
of fields so
in<00:29:43.200><c> this</c><00:29:43.440><c> script</c><00:29:43.840><c> we</c><00:29:44.000><c> are</c><00:29:44.159><c> looking</c><00:29:44.480><c> at</c><00:29:44.799><c> the</c>

00:29:44.950 --> 00:29:44.960 align:start position:0%
in this script we are looking at the
 

00:29:44.960 --> 00:29:47.110 align:start position:0%
in this script we are looking at the
number<00:29:45.200><c> of</c><00:29:45.360><c> records</c><00:29:46.240><c> and</c><00:29:46.399><c> if</c><00:29:46.480><c> the</c><00:29:46.559><c> records</c><00:29:46.960><c> is</c>

00:29:47.110 --> 00:29:47.120 align:start position:0%
number of records and if the records is
 

00:29:47.120 --> 00:29:49.029 align:start position:0%
number of records and if the records is
num<00:29:47.440><c> more</c><00:29:47.679><c> than</c><00:29:47.919><c> two</c><00:29:48.159><c> then</c><00:29:48.320><c> the</c><00:29:48.399><c> first</c><00:29:48.720><c> block</c>

00:29:49.029 --> 00:29:49.039 align:start position:0%
num more than two then the first block
 

00:29:49.039 --> 00:29:51.029 align:start position:0%
num more than two then the first block
is<00:29:49.440><c> executed</c><00:29:50.080><c> here</c>

00:29:51.029 --> 00:29:51.039 align:start position:0%
is executed here
 

00:29:51.039 --> 00:29:52.630 align:start position:0%
is executed here
and<00:29:51.279><c> if</c><00:29:51.440><c> the</c><00:29:51.520><c> number</c><00:29:51.760><c> of</c><00:29:51.840><c> records</c><00:29:52.240><c> is</c><00:29:52.480><c> less</c>

00:29:52.630 --> 00:29:52.640 align:start position:0%
and if the number of records is less
 

00:29:52.640 --> 00:29:54.149 align:start position:0%
and if the number of records is less
than<00:29:52.799><c> or</c><00:29:52.960><c> equal</c><00:29:53.200><c> to</c><00:29:53.360><c> then</c><00:29:53.520><c> the</c><00:29:53.600><c> second</c><00:29:53.919><c> block</c>

00:29:54.149 --> 00:29:54.159 align:start position:0%
than or equal to then the second block
 

00:29:54.159 --> 00:29:56.789 align:start position:0%
than or equal to then the second block
is<00:29:54.320><c> executed</c><00:29:55.360><c> now</c><00:29:55.600><c> the</c><00:29:55.760><c> field</c><00:29:56.000><c> separator</c><00:29:56.559><c> is</c>

00:29:56.789 --> 00:29:56.799 align:start position:0%
is executed now the field separator is
 

00:29:56.799 --> 00:29:58.710 align:start position:0%
is executed now the field separator is
being<00:29:57.039><c> given</c><00:29:57.600><c> in</c><00:29:57.760><c> terms</c><00:29:58.080><c> of</c><00:29:58.240><c> a</c><00:29:58.320><c> regular</c>

00:29:58.710 --> 00:29:58.720 align:start position:0%
being given in terms of a regular
 

00:29:58.720 --> 00:30:00.230 align:start position:0%
being given in terms of a regular
expression<00:29:59.200><c> where</c><00:29:59.520><c> the</c>

00:30:00.230 --> 00:30:00.240 align:start position:0%
expression where the
 

00:30:00.240 --> 00:30:01.590 align:start position:0%
expression where the
square<00:30:00.559><c> brackets</c><00:30:00.960><c> tell</c><00:30:01.120><c> you</c><00:30:01.200><c> what</c><00:30:01.360><c> are</c><00:30:01.440><c> the</c>

00:30:01.590 --> 00:30:01.600 align:start position:0%
square brackets tell you what are the
 

00:30:01.600 --> 00:30:03.909 align:start position:0%
square brackets tell you what are the
different<00:30:01.919><c> options</c><00:30:02.399><c> so</c><00:30:02.559><c> the</c><00:30:02.720><c> space</c>

00:30:03.909 --> 00:30:03.919 align:start position:0%
different options so the space
 

00:30:03.919 --> 00:30:04.710 align:start position:0%
different options so the space
the

00:30:04.710 --> 00:30:04.720 align:start position:0%
the
 

00:30:04.720 --> 00:30:07.029 align:start position:0%
the
dot<00:30:05.039><c> symbol</c><00:30:05.679><c> the</c><00:30:05.840><c> semicolon</c>

00:30:07.029 --> 00:30:07.039 align:start position:0%
dot symbol the semicolon
 

00:30:07.039 --> 00:30:09.510 align:start position:0%
dot symbol the semicolon
the<00:30:07.200><c> colon</c><00:30:07.760><c> and</c><00:30:08.080><c> the</c><00:30:08.320><c> hyphen</c><00:30:08.799><c> all</c><00:30:09.039><c> of</c><00:30:09.120><c> them</c><00:30:09.360><c> are</c>

00:30:09.510 --> 00:30:09.520 align:start position:0%
the colon and the hyphen all of them are
 

00:30:09.520 --> 00:30:14.870 align:start position:0%
the colon and the hyphen all of them are
being<00:30:09.760><c> given</c><00:30:10.480><c> so</c><00:30:10.720><c> what</c><00:30:10.960><c> is</c><00:30:11.039><c> the</c><00:30:11.360><c> input</c>

00:30:14.870 --> 00:30:14.880 align:start position:0%
 
 

00:30:14.880 --> 00:30:16.710 align:start position:0%
 
stream<00:30:15.279><c> you</c><00:30:15.440><c> can</c><00:30:15.520><c> see</c><00:30:15.679><c> that</c><00:30:15.840><c> the</c><00:30:16.000><c> input</c><00:30:16.320><c> stream</c>

00:30:16.710 --> 00:30:16.720 align:start position:0%
stream you can see that the input stream
 

00:30:16.720 --> 00:30:18.310 align:start position:0%
stream you can see that the input stream
is<00:30:16.880><c> such</c><00:30:17.120><c> that</c><00:30:17.360><c> it</c><00:30:17.520><c> has</c>

00:30:18.310 --> 00:30:18.320 align:start position:0%
is such that it has
 

00:30:18.320 --> 00:30:19.750 align:start position:0%
is such that it has
all<00:30:18.480><c> the</c><00:30:18.640><c> different</c><00:30:18.960><c> types</c><00:30:19.279><c> of</c><00:30:19.520><c> fields</c>

00:30:19.750 --> 00:30:19.760 align:start position:0%
all the different types of fields
 

00:30:19.760 --> 00:30:22.710 align:start position:0%
all the different types of fields
separate<00:30:20.159><c> it</c><00:30:20.320><c> has</c><00:30:20.480><c> got</c><00:30:20.640><c> a</c><00:30:20.799><c> colon</c><00:30:21.760><c> here</c><00:30:22.399><c> it</c><00:30:22.559><c> has</c>

00:30:22.710 --> 00:30:22.720 align:start position:0%
separate it has got a colon here it has
 

00:30:22.720 --> 00:30:25.430 align:start position:0%
separate it has got a colon here it has
got<00:30:22.960><c> a</c><00:30:23.120><c> semicolon</c><00:30:23.840><c> here</c><00:30:24.480><c> it</c><00:30:24.640><c> got</c><00:30:24.880><c> it</c><00:30:25.039><c> has</c><00:30:25.120><c> got</c><00:30:25.360><c> a</c>

00:30:25.430 --> 00:30:25.440 align:start position:0%
got a semicolon here it got it has got a
 

00:30:25.440 --> 00:30:26.789 align:start position:0%
got a semicolon here it got it has got a
hyphen<00:30:25.919><c> here</c>

00:30:26.789 --> 00:30:26.799 align:start position:0%
hyphen here
 

00:30:26.799 --> 00:30:28.710 align:start position:0%
hyphen here
it<00:30:26.880><c> has</c><00:30:27.120><c> a</c><00:30:27.200><c> space</c><00:30:27.600><c> here</c>

00:30:28.710 --> 00:30:28.720 align:start position:0%
it has a space here
 

00:30:28.720 --> 00:30:30.950 align:start position:0%
it has a space here
and<00:30:28.880><c> it</c><00:30:29.039><c> has</c><00:30:29.360><c> a</c><00:30:29.600><c> dot</c><00:30:30.000><c> here</c><00:30:30.399><c> in</c><00:30:30.480><c> the</c><00:30:30.640><c> email</c>

00:30:30.950 --> 00:30:30.960 align:start position:0%
and it has a dot here in the email
 

00:30:30.960 --> 00:30:33.110 align:start position:0%
and it has a dot here in the email
address<00:30:31.600><c> so</c><00:30:32.159><c> depending</c><00:30:32.640><c> upon</c><00:30:32.880><c> which</c>

00:30:33.110 --> 00:30:33.120 align:start position:0%
address so depending upon which
 

00:30:33.120 --> 00:30:34.870 align:start position:0%
address so depending upon which
character<00:30:33.679><c> you</c><00:30:33.840><c> would</c><00:30:34.000><c> like</c><00:30:34.159><c> to</c><00:30:34.320><c> choose</c><00:30:34.720><c> the</c>

00:30:34.870 --> 00:30:34.880 align:start position:0%
character you would like to choose the
 

00:30:34.880 --> 00:30:36.789 align:start position:0%
character you would like to choose the
number<00:30:35.120><c> of</c><00:30:35.200><c> fields</c><00:30:35.520><c> will</c><00:30:35.679><c> be</c><00:30:35.840><c> different</c>

00:30:36.789 --> 00:30:36.799 align:start position:0%
number of fields will be different
 

00:30:36.799 --> 00:30:39.029 align:start position:0%
number of fields will be different
so<00:30:37.039><c> if</c><00:30:37.200><c> i</c><00:30:37.600><c> choose</c><00:30:38.080><c> all</c><00:30:38.320><c> of</c><00:30:38.399><c> them</c><00:30:38.720><c> then</c><00:30:38.880><c> what</c>

00:30:39.029 --> 00:30:39.039 align:start position:0%
so if i choose all of them then what
 

00:30:39.039 --> 00:30:40.950 align:start position:0%
so if i choose all of them then what
happens<00:30:39.360><c> is</c><00:30:39.520><c> that</c><00:30:39.760><c> every</c><00:30:40.080><c> single</c>

00:30:40.950 --> 00:30:40.960 align:start position:0%
happens is that every single
 

00:30:40.960 --> 00:30:43.350 align:start position:0%
happens is that every single
word<00:30:41.600><c> or</c><00:30:41.919><c> roll</c><00:30:42.159><c> number</c><00:30:42.559><c> or</c><00:30:42.720><c> pin</c><00:30:42.960><c> code</c><00:30:43.279><c> or</c>

00:30:43.350 --> 00:30:43.360 align:start position:0%
word or roll number or pin code or
 

00:30:43.360 --> 00:30:46.789 align:start position:0%
word or roll number or pin code or
telephone<00:30:43.840><c> number</c><00:30:44.720><c> parts</c><00:30:45.039><c> of</c><00:30:45.279><c> the</c>

00:30:46.789 --> 00:30:46.799 align:start position:0%
telephone number parts of the
 

00:30:46.799 --> 00:30:48.470 align:start position:0%
telephone number parts of the
email<00:30:47.200><c> all</c><00:30:47.360><c> of</c><00:30:47.440><c> them</c><00:30:47.600><c> will</c><00:30:47.679><c> be</c><00:30:47.840><c> split</c><00:30:48.240><c> number</c>

00:30:48.470 --> 00:30:48.480 align:start position:0%
email all of them will be split number
 

00:30:48.480 --> 00:30:50.549 align:start position:0%
email all of them will be split number
of<00:30:48.559><c> fields</c><00:30:48.799><c> will</c><00:30:48.880><c> be</c><00:30:49.039><c> decided</c><00:30:49.440><c> accordingly</c><00:30:50.240><c> so</c>

00:30:50.549 --> 00:30:50.559 align:start position:0%
of fields will be decided accordingly so
 

00:30:50.559 --> 00:30:59.669 align:start position:0%
of fields will be decided accordingly so
if<00:30:50.720><c> you</c><00:30:50.960><c> now</c><00:30:51.679><c> run</c><00:30:51.919><c> this</c>

00:30:59.669 --> 00:30:59.679 align:start position:0%
 
 

00:30:59.679 --> 00:31:01.990 align:start position:0%
 
you<00:30:59.840><c> will</c><00:31:00.000><c> see</c><00:31:00.240><c> that</c><00:31:00.720><c> the</c><00:31:01.120><c> first</c><00:31:01.440><c> line</c><00:31:01.760><c> would</c>

00:31:01.990 --> 00:31:02.000 align:start position:0%
you will see that the first line would
 

00:31:02.000 --> 00:31:02.950 align:start position:0%
you will see that the first line would
have

00:31:02.950 --> 00:31:02.960 align:start position:0%
have
 

00:31:02.960 --> 00:31:05.990 align:start position:0%
have
one<00:31:03.200><c> two</c><00:31:03.519><c> three</c><00:31:03.919><c> four</c><00:31:04.240><c> five</c><00:31:04.559><c> five</c><00:31:04.880><c> right</c><00:31:05.519><c> okay</c>

00:31:05.990 --> 00:31:06.000 align:start position:0%
one two three four five five right okay
 

00:31:06.000 --> 00:31:09.590 align:start position:0%
one two three four five five right okay
the<00:31:06.159><c> second</c><00:31:06.880><c> would</c><00:31:07.120><c> have</c><00:31:07.519><c> three</c>

00:31:09.590 --> 00:31:09.600 align:start position:0%
the second would have three
 

00:31:09.600 --> 00:31:12.950 align:start position:0%
the second would have three
the<00:31:09.919><c> third</c><00:31:10.240><c> one</c><00:31:10.480><c> will</c><00:31:10.640><c> have</c><00:31:10.880><c> again</c><00:31:11.200><c> three</c>

00:31:12.950 --> 00:31:12.960 align:start position:0%
the third one will have again three
 

00:31:12.960 --> 00:31:15.190 align:start position:0%
the third one will have again three
the<00:31:13.279><c> fourth</c><00:31:13.600><c> line</c><00:31:13.840><c> would</c><00:31:14.159><c> have</c>

00:31:15.190 --> 00:31:15.200 align:start position:0%
the fourth line would have
 

00:31:15.200 --> 00:31:16.710 align:start position:0%
the fourth line would have
three

00:31:16.710 --> 00:31:16.720 align:start position:0%
three
 

00:31:16.720 --> 00:31:19.350 align:start position:0%
three
the<00:31:16.880><c> fifth</c><00:31:17.279><c> line</c><00:31:17.519><c> would</c><00:31:17.760><c> have</c><00:31:18.080><c> again</c>

00:31:19.350 --> 00:31:19.360 align:start position:0%
the fifth line would have again
 

00:31:19.360 --> 00:31:21.029 align:start position:0%
the fifth line would have again
three

00:31:21.029 --> 00:31:21.039 align:start position:0%
three
 

00:31:21.039 --> 00:31:22.230 align:start position:0%
three
okay<00:31:21.279><c> so</c>

00:31:22.230 --> 00:31:22.240 align:start position:0%
okay so
 

00:31:22.240 --> 00:31:24.070 align:start position:0%
okay so
what<00:31:22.399><c> we</c><00:31:22.559><c> will</c><00:31:22.720><c> do</c><00:31:22.880><c> is</c><00:31:23.120><c> now</c><00:31:23.279><c> we</c><00:31:23.440><c> will</c><00:31:23.600><c> edit</c><00:31:23.919><c> the</c>

00:31:24.070 --> 00:31:24.080 align:start position:0%
what we will do is now we will edit the
 

00:31:24.080 --> 00:31:25.830 align:start position:0%
what we will do is now we will edit the
script<00:31:24.799><c> to</c>

00:31:25.830 --> 00:31:25.840 align:start position:0%
script to
 

00:31:25.840 --> 00:31:28.230 align:start position:0%
script to
make<00:31:26.080><c> the</c><00:31:26.399><c> field</c><00:31:26.640><c> separator</c><00:31:27.200><c> slightly</c>

00:31:28.230 --> 00:31:28.240 align:start position:0%
make the field separator slightly
 

00:31:28.240 --> 00:31:32.870 align:start position:0%
make the field separator slightly
more<00:31:28.480><c> restrictive</c>

00:31:32.870 --> 00:31:32.880 align:start position:0%
 
 

00:31:32.880 --> 00:31:35.669 align:start position:0%
 
what<00:31:33.039><c> we</c><00:31:33.200><c> would</c><00:31:33.440><c> do</c><00:31:33.840><c> is</c><00:31:34.240><c> we</c><00:31:34.399><c> will</c><00:31:34.640><c> not</c><00:31:34.880><c> allow</c>

00:31:35.669 --> 00:31:35.679 align:start position:0%
what we would do is we will not allow
 

00:31:35.679 --> 00:31:38.070 align:start position:0%
what we would do is we will not allow
the<00:31:35.840><c> space</c><00:31:36.240><c> and</c><00:31:36.320><c> the</c><00:31:36.480><c> dot</c>

00:31:38.070 --> 00:31:38.080 align:start position:0%
the space and the dot
 

00:31:38.080 --> 00:31:41.590 align:start position:0%
the space and the dot
as<00:31:38.320><c> possible</c><00:31:38.799><c> options</c>

00:31:41.590 --> 00:31:41.600 align:start position:0%
 
 

00:31:41.600 --> 00:31:42.950 align:start position:0%
 
and<00:31:41.760><c> you</c><00:31:41.919><c> now</c><00:31:42.159><c> see</c><00:31:42.320><c> that</c><00:31:42.480><c> the</c><00:31:42.559><c> number</c><00:31:42.799><c> of</c>

00:31:42.950 --> 00:31:42.960 align:start position:0%
and you now see that the number of
 

00:31:42.960 --> 00:31:44.630 align:start position:0%
and you now see that the number of
fields<00:31:43.200><c> have</c><00:31:43.360><c> been</c><00:31:43.919><c> different</c><00:31:44.240><c> so</c><00:31:44.399><c> you</c><00:31:44.480><c> can</c>

00:31:44.630 --> 00:31:44.640 align:start position:0%
fields have been different so you can
 

00:31:44.640 --> 00:31:47.110 align:start position:0%
fields have been different so you can
see<00:31:44.880><c> that</c><00:31:45.200><c> the</c><00:31:45.440><c> last</c><00:31:45.760><c> line</c><00:31:46.080><c> is</c><00:31:46.240><c> being</c><00:31:46.799><c> treated</c>

00:31:47.110 --> 00:31:47.120 align:start position:0%
see that the last line is being treated
 

00:31:47.120 --> 00:31:49.430 align:start position:0%
see that the last line is being treated
as<00:31:47.279><c> just</c><00:31:47.519><c> one</c><00:31:47.679><c> record</c><00:31:48.159><c> because</c><00:31:48.640><c> the</c>

00:31:49.430 --> 00:31:49.440 align:start position:0%
as just one record because the
 

00:31:49.440 --> 00:31:52.870 align:start position:0%
as just one record because the
field<00:31:49.679><c> separator</c><00:31:50.480><c> is</c><00:31:50.720><c> not</c><00:31:50.960><c> having</c><00:31:51.519><c> dot</c>

00:31:52.870 --> 00:31:52.880 align:start position:0%
field separator is not having dot
 

00:31:52.880 --> 00:31:54.950 align:start position:0%
field separator is not having dot
as<00:31:53.120><c> one</c><00:31:53.279><c> of</c><00:31:53.360><c> the</c><00:31:53.440><c> possibilities</c>

00:31:54.950 --> 00:31:54.960 align:start position:0%
as one of the possibilities
 

00:31:54.960 --> 00:31:56.710 align:start position:0%
as one of the possibilities
now<00:31:55.200><c> what</c><00:31:55.360><c> i</c><00:31:55.519><c> would</c><00:31:55.600><c> do</c><00:31:55.840><c> is</c><00:31:55.919><c> i</c><00:31:56.000><c> will</c><00:31:56.240><c> change</c>

00:31:56.710 --> 00:31:56.720 align:start position:0%
now what i would do is i will change
 

00:31:56.720 --> 00:32:00.870 align:start position:0%
now what i would do is i will change
this<00:31:57.279><c> to</c><00:31:57.519><c> only</c><00:31:57.760><c> a</c><00:31:57.919><c> space</c>

00:32:00.870 --> 00:32:00.880 align:start position:0%
this to only a space
 

00:32:00.880 --> 00:32:03.190 align:start position:0%
this to only a space
and<00:32:01.360><c> you</c><00:32:01.600><c> now</c><00:32:01.840><c> see</c><00:32:02.080><c> that</c>

00:32:03.190 --> 00:32:03.200 align:start position:0%
and you now see that
 

00:32:03.200 --> 00:32:05.750 align:start position:0%
and you now see that
the<00:32:03.440><c> default</c><00:32:03.840><c> field</c><00:32:04.000><c> separation</c><00:32:04.559><c> now</c><00:32:04.960><c> would</c>

00:32:05.750 --> 00:32:05.760 align:start position:0%
the default field separation now would
 

00:32:05.760 --> 00:32:08.070 align:start position:0%
the default field separation now would
give<00:32:06.000><c> you</c><00:32:06.320><c> three</c><00:32:06.640><c> fields</c><00:32:06.880><c> for</c><00:32:07.039><c> the</c><00:32:07.120><c> first</c><00:32:07.440><c> line</c>

00:32:08.070 --> 00:32:08.080 align:start position:0%
give you three fields for the first line
 

00:32:08.080 --> 00:32:09.590 align:start position:0%
give you three fields for the first line
because<00:32:08.559><c> there</c><00:32:08.720><c> is</c>

00:32:09.590 --> 00:32:09.600 align:start position:0%
because there is
 

00:32:09.600 --> 00:32:11.190 align:start position:0%
because there is
there<00:32:09.840><c> are</c><00:32:10.080><c> there</c><00:32:10.240><c> are</c><00:32:10.320><c> only</c><00:32:10.559><c> two</c><00:32:10.720><c> spaces</c>

00:32:11.190 --> 00:32:11.200 align:start position:0%
there are there are only two spaces
 

00:32:11.200 --> 00:32:14.230 align:start position:0%
there are there are only two spaces
between<00:32:11.519><c> welcome</c><00:32:12.399><c> two</c><00:32:12.720><c> and</c><00:32:12.799><c> then</c><00:32:12.960><c> two</c><00:32:13.200><c> and</c><00:32:13.440><c> awk</c>

00:32:14.230 --> 00:32:14.240 align:start position:0%
between welcome two and then two and awk
 

00:32:14.240 --> 00:32:15.830 align:start position:0%
between welcome two and then two and awk
and<00:32:14.399><c> then</c><00:32:14.559><c> the</c><00:32:14.720><c> second</c><00:32:15.039><c> line</c><00:32:15.279><c> does</c><00:32:15.440><c> not</c><00:32:15.600><c> have</c>

00:32:15.830 --> 00:32:15.840 align:start position:0%
and then the second line does not have
 

00:32:15.840 --> 00:32:17.990 align:start position:0%
and then the second line does not have
any<00:32:16.080><c> space</c><00:32:16.399><c> so</c><00:32:16.640><c> only</c><00:32:16.799><c> one</c><00:32:17.039><c> record</c>

00:32:17.990 --> 00:32:18.000 align:start position:0%
any space so only one record
 

00:32:18.000 --> 00:32:19.669 align:start position:0%
any space so only one record
third<00:32:18.320><c> line</c><00:32:18.480><c> doesn't</c><00:32:18.799><c> have</c><00:32:18.960><c> any</c><00:32:19.120><c> space</c><00:32:19.440><c> it</c><00:32:19.519><c> has</c>

00:32:19.669 --> 00:32:19.679 align:start position:0%
third line doesn't have any space it has
 

00:32:19.679 --> 00:32:22.230 align:start position:0%
third line doesn't have any space it has
only<00:32:19.840><c> hyphens</c><00:32:20.320><c> so</c><00:32:20.480><c> only</c><00:32:20.720><c> one</c><00:32:20.880><c> record</c>

00:32:22.230 --> 00:32:22.240 align:start position:0%
only hyphens so only one record
 

00:32:22.240 --> 00:32:24.870 align:start position:0%
only hyphens so only one record
the<00:32:22.880><c> fourth</c><00:32:23.360><c> line</c><00:32:23.679><c> has</c><00:32:23.919><c> two</c><00:32:24.159><c> spaces</c><00:32:24.559><c> so</c><00:32:24.720><c> there</c>

00:32:24.870 --> 00:32:24.880 align:start position:0%
the fourth line has two spaces so there
 

00:32:24.880 --> 00:32:26.310 align:start position:0%
the fourth line has two spaces so there
are<00:32:25.039><c> three</c><00:32:25.279><c> records</c>

00:32:26.310 --> 00:32:26.320 align:start position:0%
are three records
 

00:32:26.320 --> 00:32:27.909 align:start position:0%
are three records
and<00:32:26.399><c> then</c><00:32:26.559><c> the</c><00:32:26.640><c> last</c><00:32:26.960><c> line</c><00:32:27.200><c> has</c><00:32:27.360><c> only</c><00:32:27.600><c> email</c>

00:32:27.909 --> 00:32:27.919 align:start position:0%
and then the last line has only email
 

00:32:27.919 --> 00:32:29.750 align:start position:0%
and then the last line has only email
address<00:32:28.399><c> and</c><00:32:28.720><c> no</c><00:32:28.880><c> space</c><00:32:29.120><c> so</c><00:32:29.279><c> therefore</c><00:32:29.600><c> it's</c>

00:32:29.750 --> 00:32:29.760 align:start position:0%
address and no space so therefore it's
 

00:32:29.760 --> 00:32:31.830 align:start position:0%
address and no space so therefore it's
only<00:32:30.000><c> one</c><00:32:30.159><c> record</c><00:32:31.039><c> so</c>

00:32:31.830 --> 00:32:31.840 align:start position:0%
only one record so
 

00:32:31.840 --> 00:32:33.909 align:start position:0%
only one record so
by<00:32:32.000><c> looking</c><00:32:32.320><c> at</c><00:32:32.559><c> the</c><00:32:32.720><c> input</c><00:32:33.039><c> stream</c><00:32:33.519><c> you</c><00:32:33.760><c> need</c>

00:32:33.909 --> 00:32:33.919 align:start position:0%
by looking at the input stream you need
 

00:32:33.919 --> 00:32:36.870 align:start position:0%
by looking at the input stream you need
to<00:32:34.080><c> decide</c><00:32:34.720><c> what</c><00:32:34.960><c> would</c><00:32:35.120><c> be</c><00:32:35.279><c> the</c><00:32:35.519><c> suitable</c>

00:32:36.870 --> 00:32:36.880 align:start position:0%
to decide what would be the suitable
 

00:32:36.880 --> 00:32:38.470 align:start position:0%
to decide what would be the suitable
field<00:32:37.120><c> separator</c>

00:32:38.470 --> 00:32:38.480 align:start position:0%
field separator
 

00:32:38.480 --> 00:32:40.870 align:start position:0%
field separator
to<00:32:38.880><c> split</c><00:32:39.279><c> the</c><00:32:39.440><c> record</c><00:32:39.840><c> into</c><00:32:40.080><c> the</c><00:32:40.159><c> fields</c><00:32:40.640><c> as</c>

00:32:40.870 --> 00:32:40.880 align:start position:0%
to split the record into the fields as
 

00:32:40.880 --> 00:32:43.909 align:start position:0%
to split the record into the fields as
you<00:32:41.200><c> desire</c><00:32:42.320><c> luckily</c><00:32:42.880><c> you</c><00:32:43.039><c> can</c><00:32:43.200><c> change</c><00:32:43.600><c> it</c>

00:32:43.909 --> 00:32:43.919 align:start position:0%
you desire luckily you can change it
 

00:32:43.919 --> 00:32:48.760 align:start position:0%
you desire luckily you can change it
during<00:32:44.320><c> the</c><00:32:44.480><c> execution</c><00:32:45.120><c> of</c><00:32:45.200><c> the</c><00:32:45.360><c> script</c><00:32:45.760><c> also</c>

